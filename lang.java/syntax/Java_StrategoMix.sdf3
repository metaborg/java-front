module Java_StrategoMix

imports
  java/packages/CompilationUnits

  StrategoLang/import-namespaced
  StrategoLang/sugar/terms-namespaced
  StrategoLang/core/identifiers-namespaced
  StrategoLang/core/modules-namespaced

context-free start-symbols

  Module

context-free syntax

  Module = StrategoLang-Module

///
// Quotations for CompilationUnit
///
context-free syntax
  StrategoLang-Term.ToMetaExpr = "java:compilation-unit" "|[" CompilationUnit "]|"
  StrategoLang-Term.ToMetaExpr =      "compilation-unit" "|[" CompilationUnit "]|"
  StrategoLang-Term.ToMetaExpr = "java"                  "|[" CompilationUnit "]|"
  StrategoLang-Term.ToMetaExpr =                         "|[" CompilationUnit "]|"

///
// Variables for Formal Parameters
///
variables
  FormalParam  = "param"         [0-9]*     {prefer}
  FormalParam  = "param_"  [a-zA-Z0-9]*     {prefer}
  FormalParams = "params"        [0-9]*     {prefer}
  FormalParams = "params_" [a-zA-Z0-9]*     {prefer}
  FormalParams = "param"         [0-9]* "*" {prefer}
  FormalParams = "param_"  [a-zA-Z0-9]* "*" {prefer}

///
// Quotations for Formal Parameters
///
context-free syntax
  StrategoLang-Term.ToMetaExpr =             "param"  "|[" FormalParam "]|"
  StrategoLang-Term.ToMetaExpr =        "java:param"  "|[" FormalParam "]|"

  StrategoLang-Term.ToMetaExpr =             "param*" "|[" {FormalParam ","}* "]|"
  StrategoLang-Term.ToMetaExpr =        "java:param*" "|[" {FormalParam ","}* "]|"

  StrategoLang-Term.ToMetaExpr =  "java:formal-param" "|[" FormalParam "]|"
  StrategoLang-Term.ToMetaExpr =       "formal-param" "|[" FormalParam "]|"
  StrategoLang-Term.ToMetaExpr =  "java"              "|[" FormalParam "]|"
  StrategoLang-Term.ToMetaExpr =                      "|[" FormalParam "]|"

  StrategoLang-Term.ToMetaExpr = "java:formal-param*" "|[" {FormalParam ","}* "]|"
  StrategoLang-Term.ToMetaExpr =      "formal-param*" "|[" {FormalParam ","}* "]|"
  StrategoLang-Term.ToMetaExpr = "java"               "|[" {FormalParam ","}* "]|"
  StrategoLang-Term.ToMetaExpr =                      "|[" {FormalParam ","}* "]|"

///
// Anti Quotations for Formal Parameters
///
context-free syntax
   FormalParam.FromMetaExpr       = "~"  StrategoLang-Term
  {FormalParam ","}*.FromMetaExpr = "~*" StrategoLang-Term

///
// Anti-Quotation for Types
///
context-free syntax
  StrategoLang-Term.ToMetaExpr =         "t" "|[" UnannType "]|"
  StrategoLang-Term.ToMetaExpr =        "ty" "|[" UnannType "]|"

  StrategoLang-Term.ToMetaExpr = "java:type" "|[" UnannType "]|"
  StrategoLang-Term.ToMetaExpr =      "type" "|[" UnannType "]|"
  StrategoLang-Term.ToMetaExpr = "java"      "|[" UnannType "]|"
  StrategoLang-Term.ToMetaExpr =             "|[" UnannType "]|"
  StrategoLang-Term.ToMetaExpr =     "rtype" "|[" ReferenceType "]|"

///
// Anti-Quotation for Types
///
context-free syntax
  UnannType.FromMetaExpr     = "~"        StrategoLang-Term
  UnannType.FromMetaExpr     = "~type:"   StrategoLang-Term

  ReferenceType.FromMetaExpr = "~refType" StrategoLang-Term
  ReferenceType.FromMetaExpr = "~rtype:"  StrategoLang-Term

///
// Variables for Types
///
variables
  UnannType     = MetaTypeVar {prefer}
  PrimitiveType = MetaPrimTypeVar {prefer}
  ReferenceType = MetaReferenceTypeVar {prefer}

lexical syntax
  MetaTypeVar          = "t"         [0-9\']*
  MetaTypeVar          = "t_"  [a-zA-Z0-9\']*
  MetaTypeVar          = "ty"        [0-9\']*
  MetaTypeVar          = "ty_" [a-zA-Z0-9\']*

  MetaPrimTypeVar      = "primt"         [0-9\']*
  MetaPrimTypeVar      = "primt_"  [a-zA-Z0-9\']*
  MetaPrimTypeVar      = "primty"        [0-9\']*
  MetaPrimTypeVar      = "primty_" [a-zA-Z0-9\']*

  MetaReferenceTypeVar = "rt"         [0-9\']*
  MetaReferenceTypeVar = "rt_"  [a-zA-Z0-9\']*
  MetaReferenceTypeVar = "rty"        [0-9\']*
  MetaReferenceTypeVar = "rty_" [a-zA-Z0-9\']*

  ID = "t"         [0-9\']* {reject}
  ID = "t_"  [a-zA-Z0-9\']* {reject}
  ID = "ty"        [0-9\']* {reject}
  ID = "ty_" [a-zA-Z0-9\']* {reject}

  ID = "primt"         [0-9\']* {reject}
  ID = "primt_"  [a-zA-Z0-9\']* {reject}
  ID = "primty"        [0-9\']* {reject}
  ID = "primty_" [a-zA-Z0-9\']* {reject}

  ID = "rt"         [0-9\']* {reject}
  ID = "rt_"  [a-zA-Z0-9\']* {reject}
  ID = "rty"        [0-9\']* {reject}
  ID = "rty_" [a-zA-Z0-9\']* {reject}

lexical restrictions
  MetaTypeVar          -/- [a-zA-Z0-9\_\$\']
  MetaPrimTypeVar      -/- [a-zA-Z0-9\_\$\']
  MetaReferenceTypeVar -/- [a-zA-Z0-9\_\$\']

///
// Quotations for Statements
///
context-free syntax
  StrategoLang-Term.ToMetaExpr     =        "java:bstm"  "|[" BlockStatement "]|"
  StrategoLang-Term.ToMetaExpr     =             "bstm"  "|[" BlockStatement "]|"
  StrategoLang-Term.ToMetaExpr     =        "java"       "|[" BlockStatement "]|"
  StrategoLang-Term.ToMetaExpr     =                     "|[" BlockStatement "]|"

  StrategoLang-Term.ToMetaListExpr =        "java:bstm*" "|[" BlockStatement* "]|"
  StrategoLang-Term.ToMetaListExpr =             "bstm*" "|[" BlockStatement* "]|"

  StrategoLang-Term.ToMetaExpr     =   "java:block-stm"  "|[" BlockStatement "]|"
  StrategoLang-Term.ToMetaExpr     =        "block-stm"  "|[" BlockStatement "]|"
  StrategoLang-Term.ToMetaExpr     =   "java"            "|[" BlockStatement "]|"
  StrategoLang-Term.ToMetaExpr     =                     "|[" BlockStatement "]|"

  StrategoLang-Term.ToMetaListExpr =   "java:block-stm*" "|[" BlockStatement* "]|"
  StrategoLang-Term.ToMetaListExpr =        "block-stm*" "|[" BlockStatement* "]|"


  StrategoLang-Term.ToMetaExpr     =         "java:stm"  "|[" Statement "]|"
  StrategoLang-Term.ToMetaExpr     =              "stm"  "|[" Statement "]|"

  StrategoLang-Term.ToMetaListExpr =      "switch-group" "|[" SwitchGroup "]|"
  StrategoLang-Term.ToMetaListExpr = "java:switch-group" "|[" SwitchGroup "]|"

///
// Anti Quotations for Statements
///
context-free syntax
  BlockStatement.FromMetaExpr  = "~"       StrategoLang-Term
  BlockStatement.FromMetaExpr  = "~bstm:"  StrategoLang-Term
  BlockStatement*.FromMetaExpr = "~*"      StrategoLang-Term
  BlockStatement*.FromMetaExpr = "~bstm*:" StrategoLang-Term

  Statement.FromMetaExpr       = "~stm:"   StrategoLang-Term {prefer}
  Statement.FromMetaExpr       = "~"       StrategoLang-Term

  SwitchGroup*.FromMetaExpr    =   "~*"              StrategoLang-Term
  SwitchGroup*.FromMetaExpr    =   "~switch-group*:" StrategoLang-Term


  SwitchGroup.FromMetaExpr     = "~"               StrategoLang-Term
  SwitchGroup.FromMetaExpr     = "~switch-group:"  StrategoLang-Term

///
// Variables for Statements
///
variables

  Statement       = "stm"         [0-9\']*     {prefer}
  Statement       = "stm_"  [a-zA-Z0-9\']*     {prefer}
  BlockStatement  = "bstm"        [0-9\']*     {prefer}
  BlockStatement  = "bstm_" [a-zA-Z0-9\']*     {prefer}
  BlockStatement* = "bstm"        [0-9\']* "*" {prefer}
  BlockStatement* = "bstm_" [a-zA-Z0-9\']* "*" {prefer}

///
// Quotations for Expressions
///
context-free syntax
  StrategoLang-Term.ToMetaExpr =         "e" "|[" Expression "]|"
  StrategoLang-Term.ToMetaExpr = "java:expr" "|[" Expression "]|"
  StrategoLang-Term.ToMetaExpr =      "expr" "|[" Expression "]|"
  StrategoLang-Term.ToMetaExpr = "java"      "|[" Expression "]|"
  StrategoLang-Term.ToMetaExpr =             "|[" Expression "]|"

///
// Anti Quotations for Expressions
///
context-free syntax
  Expression.FromMetaExpr = "~"      StrategoLang-Term
  Expression.FromMetaExpr = "~e:"    StrategoLang-Term {prefer}
  Expression.FromMetaExpr = "~expr:" StrategoLang-Term {prefer}

///
// Variables for Expressions
///
variables
  Expression        = "e"        [0-9\']*     {prefer}
  Expression        = "e_" [a-zA-Z0-9\']*     {prefer}
  {Expression ","}* = "e"        [0-9\']* "*" {prefer}
  {Expression ","}* = "e_" [a-zA-Z0-9\']* "*" {prefer}

lexical syntax
  ID = "e"  [0-9\']*       {reject}
  ID = "e_" [a-zA-Z0-9\']* {reject}

///
// Anti Quotations for LeftHandSide of Assignment
///
context-free syntax
  LHS.FromMetaExpr = "~"     StrategoLang-Term
  LHS.FromMetaExpr = "~lhs:"  StrategoLang-Term

///
// Quotations for Id
///
context-free syntax
  StrategoLang-Term.ToMetaExpr    = "ident" "|[" Id "]|"

///
// Anti Quotations for ID
///
  ID.FromMetaExpr = "~"     StrategoLang-Term
  ID.FromMetaExpr = "~id:"  StrategoLang-Term
  ID.FromMetaExpr = "~idd:" StrategoLang-Term ":"

///
// Variables for ID
///
variables
  ID = [xyz]            [0-9\']* {prefer}
  ID = [xyz] [\_] [a-zA-Z0-9\']* {prefer}

context-free restrictions
  ID -/- [\_a-zA-Z0-9\']

///
// Anti Quotations for Literal
///
context-free syntax
  StringLit.FromMetaExpr = "~"        StrategoLang-Term
  StringLit.FromMetaExpr = "~strlit:" StrategoLang-Term

//  SingleChar.FromMetaExpr =     "~" <StrategoLang-Term-CF> <LAYOUT?-CF>  {prefer}

//exports
//  variables
//  DeciLiteral =     [ij]  [0-9\']* {prefer}
//  DeciLiteral =     [ij]  [\_] [a-zA-Z0-9\']* {prefer}

//
//  StrategoLang-Term.ToMetaExpr =     "var-init" "|[" VariableInitializer "]|"
//
/////
// // Statements
// ///
//exports
//
//  ///
//   // Variables for Statements
//   ///
//  variables
//  Statement =     "stm"  [0-9\']*         {prefer}
//  Statement =     "stm_" [a-zA-Z0-9\']*         {prefer}
//  BlockStatement =     "bstm" [0-9\']*    {prefer}
//  BlockStatement =     "bstm_" [a-zA-Z0-9\']*    {prefer}
//  BlockStatement* =     "bstm" [0-9\']* "*"   {prefer}
//  BlockStatement* =     "bstm_" [a-zA-Z0-9\']* "*"   {prefer}
//
//  ///
//   // Quotations for Statements
//   ///
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =     "java:bstm"  "|[" BlockStatement "]|"
//  StrategoLang-Term.ToMetaExpr =          "bstm"  "|[" BlockStatement "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"       "|[" BlockStatement "]|"
//  StrategoLang-Term.ToMetaExpr =                  "|[" BlockStatement "]|"
//
//  StrategoLang-Term.ToMetaListExpr =     "java:bstm*" "|[" BlockStatement* "]|"
//  StrategoLang-Term.ToMetaListExpr =          "bstm*" "|[" BlockStatement* "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:block-stm"  "|[" BlockStatement "]|"
//  StrategoLang-Term.ToMetaExpr =          "block-stm"  "|[" BlockStatement "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"            "|[" BlockStatement "]|"
//  StrategoLang-Term.ToMetaExpr =                       "|[" BlockStatement "]|"
//
//  StrategoLang-Term.ToMetaListExpr =     "java:block-stm*" "|[" BlockStatement* "]|"
//  StrategoLang-Term.ToMetaListExpr =          "block-stm*" "|[" BlockStatement* "]|"
//
//
//  StrategoLang-Term.ToMetaExpr =     "java:stm"  "|[" Statement "]|"
//  StrategoLang-Term.ToMetaExpr =          "stm"  "|[" Statement "]|"
//
//  StrategoLang-Term.ToMetaListExpr =          "switch-group" "|[" SwitchGroup "]|"
//  StrategoLang-Term.ToMetaListExpr =     "java:switch-group" "|[" SwitchGroup "]|"
//
//  ///
//   // Anti Quotations for Statements
//   ///
//  context-free syntax
//  BlockStatement.FromMetaExpr =     "~"       StrategoLang-Term
//  BlockStatement.FromMetaExpr =     "~bstm:"  StrategoLang-Term
//  BlockStatement*.FromMetaExpr =     "~*"      StrategoLang-Term
//  BlockStatement*.FromMetaExpr =     "~bstm*:" StrategoLang-Term
//
//  Statement.FromMetaExpr =     "~stm:"   StrategoLang-Term {prefer}
//  Statement.FromMetaExpr =     "~"       StrategoLang-Term
//
//  SwitchGroup*.FromMetaExpr =     "~*"              StrategoLang-Term
//  SwitchGroup*.FromMetaExpr =     "~switch-group*:" StrategoLang-Term
//
//  SwitchGroup.FromMetaExpr =     "~"               StrategoLang-Term
//  SwitchGroup.FromMetaExpr =     "~switch-group:"  StrategoLang-Term
//
/////
// // Variable Declarations
// ///
//
//  ///
//   // Variables for Variable Declarations
//   ///
//  variables
//  LocalVariableDeclaration =     "lvdec" [0-9]*    {prefer}
//  LocalVariableDeclaration =     "lvdec_" [a-zA-Z0-9]*    {prefer}
//  VarDecl =      "vdec" [0-9]*         {prefer}
//  VarDecl =      "vdec_" [a-zA-Z0-9]*         {prefer}
//     "vdec"  [0-9]* "*"       -> {VarDecl ","}+  {prefer}
//     "vdec_" [a-zA-Z0-9]* "*" -> {VarDecl ","}+  {prefer}
//
//  lexical syntax
//  ID =     "lvdec" {reject}
//  ID =     "lvdec_" [a-zA-Z0-9]* {reject}
//  ID =      "vdec" {reject}
//  ID =      "vdec_" [a-zA-Z0-9]* {reject}
//
//  ///
//   // Quotations for Local Variable Declarations
//   ///
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =     "java:lvdec"  "|[" LocalVariableDeclaration "]|"
//  StrategoLang-Term.ToMetaExpr =          "lvdec"  "|[" LocalVariableDeclaration "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:vdec" "|[" VarDecl "]|"
//  StrategoLang-Term.ToMetaExpr =          "vdec" "|[" VarDecl "]|"
//
//  ///
//   // Anti Quotations for Local Variable Declarations
//   ///
//  context-free syntax
//
/////
// // LeftHandSide of Assignment
// ///
//exports
//
//  ///
//   // Variables for LeftHandSide of Assignment
//   ///
//  variables
//  LHS =     "lhs" [0-9\']* {prefer}
//  LHS =     "e"   [0-9\']* {prefer}
//
//  lexical syntax
//  ID =     "lhs" [0-9\']* {reject}
//
/////
// // Types
// ///
//exports
//
//  ///
//   // Variables for Types
//   ///
//  variables
//  Type =     MetaTypeVar     {prefer}
//  PrimType =     MetaPrimTypeVar {prefer}
//  RefType =     MetaRefTypeVar  {prefer}
//
//  lexical syntax
//  MetaTypeVar =     "t"  [0-9\']*
//  MetaTypeVar =     "t_" [a-zA-Z0-9\']*
//  MetaTypeVar =     "ty" [0-9]*
//  MetaTypeVar =     "ty_" [a-zA-Z0-9\']*
//
//  MetaPrimTypeVar =     "primt"  [0-9]*
//  MetaPrimTypeVar =     "primt_" [a-zA-Z0-9]*
//  MetaPrimTypeVar =     "primty" [0-9]*
//  MetaPrimTypeVar =     "primty_" [a-zA-Z0-9]*
//  MetaRefTypeVar =     "reft"   [0-9]*
//  MetaRefTypeVar =     "reft_" [a-zA-Z0-9]*
//  MetaRefTypeVar =     "refty"  [0-9]*
//  MetaRefTypeVar =     "refty_" [a-zA-Z0-9]*
//
//  ID =     "t"  [0-9\']* {reject}
//  ID =     "t_" [a-zA-Z0-9]* {reject}
//  ID =     "ty" [0-9]* {reject}
//  ID =     "ty_" [a-zA-Z0-9]* {reject}
//  ID =     "primt"  [0-9]* {reject}
//  ID =     "primt_" [a-zA-Z0-9]*  {reject}
//  ID =     "primty" [0-9]* {reject}
//  ID =     "primty_" [a-zA-Z0-9]* {reject}
//  ID =     "reft"   [0-9]* {reject}
//  ID =     "reft_" [a-zA-Z0-9]* {reject}
//  ID =     "refty"  [0-9]* {reject}
//  ID =     "refty_" [a-zA-Z0-9]* {reject}
//
//  lexical restrictions
//    MetaTypeVar -/- [a-zA-Z0-9\_\$\']
//
//  ///
//   // Quotation for Types
//   ///
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =             "t" "|[" Type "]|"
//  StrategoLang-Term.ToMetaExpr =            "ty" "|[" Type "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:type" "|[" Type "]|"
//  StrategoLang-Term.ToMetaExpr =          "type" "|[" Type "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"      "|[" Type "]|"
//  StrategoLang-Term.ToMetaExpr =                 "|[" Type "]|"
//
//  ///
//   // Anti-Quotation for Types
//   ///
//  context-free syntax
//  Type.FromMetaExpr =     "~"       StrategoLang-Term
//  Type.FromMetaExpr =     "~type:"  StrategoLang-Term
//
/////
// // Names
// ///
//exports
//
//  ///
//   // Variables for Names
//   ///
//  variables
//  AmbName =     "ambname"  [0-9]*    {prefer}
//  AmbName =     "ambname_" [a-zA-Z0-9]*    {prefer}
//  ExprName =     "ename"    [0-9]*   {prefer}
//  ExprName =     "ename_" [a-zA-Z0-9]*   {prefer}
//  MethodName =     "fname"    [0-9]* {prefer}
//  MethodName =     "fname_" [a-zA-Z0-9]* {prefer}
//  TypeName =     "tname"    [0-9]*   {prefer}
//  TypeName =     "tname_" [a-zA-Z0-9]*   {prefer}
//  PackageOrTypeName =     "pkgtname" [0-9]*  {prefer}
//  PackageOrTypeName =     "pkgtname_" [a-zA-Z0-9]*  {prefer}
//  PackageName =     "pkgname" [0-9]*  {prefer}
//  PackageName =     "pkgname_" [a-zA-Z0-9]*  {prefer}
//
//  ///
//   // Quotations for Names
//   ///
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =     "ambname"  "|[" AmbName    "]|"
//  StrategoLang-Term.ToMetaExpr =     "ename"    "|[" ExprName   "]|"
//  StrategoLang-Term.ToMetaExpr =     "fname"    "|[" MethodName "]|"
//  StrategoLang-Term.ToMetaExpr =     "tname"    "|[" TypeName   "]|"
//  StrategoLang-Term.ToMetaExpr =     "pkgtname" "|[" PackageOrTypeName "]|"
//
/////
// // Modifiers
// ///
//exports
//
//  ///
//   // Variables for Modifiers
//   ///
//  variables
//  MethodMod =      "mod" [0-9]*  {prefer}
//  MethodMod =      "mod_" [a-zA-Z0-9]*  {prefer}
//  (Annotation =      "mod" [0-9]* "*" | MethodMod)* {prefer}
//  (Annotation =      "mod_" [a-zA-Z0-9]* "*" | MethodMod)* {prefer}
//
//  ClassMod =      "mod" [0-9]*  {prefer}
//  ClassMod =      "mod_" [a-zA-Z0-9]*  {prefer}
//  (Annotation | ClassMod)* {prefer} =      "mod" [0-9]* "*"
//  (Annotation | ClassMod)* {prefer} =      "mod_" [a-zA-Z0-9]* "*"
//
//  ConstrMod =      "mod" [0-9]*  {prefer}
//  ConstrMod =      "mod_" [a-zA-Z0-9]*  {prefer}
//  (Annotation | ConstrMod)* =      "mod" [0-9]* "*" {prefer}
//  (Annotation | ConstrMod)* =      "mod_" [a-zA-Z0-9]* "*" {prefer}
//
//  VarMod =      "mod" [0-9]*  {prefer}
//  VarMod =      "mod_" [a-zA-Z0-9]*  {prefer}
//  (Annotation | VarMod)* =      "mod" [0-9]* "*" {prefer}
//  (Annotation | VarMod)* =      "mod_" [a-zA-Z0-9]* "*" {prefer}
//
//  FieldMod =      "mod" [0-9]*  {prefer}
//  FieldMod =      "mod_" [a-zA-Z0-9]*  {prefer}
//  (Annotation | FieldMod)* =      "mod" [0-9]* "*" {prefer}
//  (Annotation | FieldMod)* =      "mod_" [a-zA-Z0-9]* "*" {prefer}
//
//  ///
//   // Quotations for Modifiers
//   ///
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =            "|[" FieldModifier "]|"
//  StrategoLang-Term.ToMetaExpr =     "mod"  "|[" FieldModifier "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "anno" "|[" Annotation "]|"
//
//
/////
// // Package Declarations
// ///
//exports
//
//  ///
//   // Quotations
//   ///
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =     "java:package-dec" "|[" PackageDec  "]|"
//  StrategoLang-Term.ToMetaExpr =          "package-dec" "|[" PackageDec  "]|"
//  StrategoLang-Term.ToMetaExpr =                        "|[" PackageDec  "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:package-dec?" "|[" PackageDec? "]|"
//  StrategoLang-Term.ToMetaExpr =          "package-dec?" "|[" PackageDec? "]|"
//
//  ///
//   // Anti Quotations
//   ///
//  context-free syntax
//  PackageDec.FromMetaExpr =     "~package-dec:"  StrategoLang-Term
//  PackageDec?.FromMetaExpr =     "~package-dec?:" StrategoLang-Term
//
/////
// // Import Declarations
// ///
//exports
//
//  ///
//   // Quotations for Import Declarations
//   ///
//  context-free syntax
//
//  StrategoLang-Term.ToMetaExpr =     "java:import-dec"  "|[" ImportDec  "]|"
//  StrategoLang-Term.ToMetaExpr =          "import-dec"  "|[" ImportDec  "]|"
//  StrategoLang-Term.ToMetaExpr =                        "|[" ImportDec  "]|"
//
//  StrategoLang-Term.ToMetaListExpr =     "java:import-dec*" "|[" ImportDec* "]|"
//  StrategoLang-Term.ToMetaListExpr =          "import-dec*" "|[" ImportDec* "]|"
//
//  ///
//   // Anti Quotations for Import Declarations
//   ///
//  context-free syntax
//
//  ImportDec.FromMetaExpr =     "~import-dec:"  StrategoLang-Term
//  ImportDec*.FromMetaExpr =     "~import-dec*:" StrategoLang-Term
//
/////
// // Must be cleaned up
// ///
//exports
//  context-free syntax
//  StrategoLang-Term.ToMetaExpr =             "e" "|[" Expr "]|"
//  StrategoLang-Term.ToMetaExpr =     "java:expr" "|[" Expr "]|"
//  StrategoLang-Term.ToMetaExpr =          "expr" "|[" Expr "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"      "|[" Expr "]|"
//  StrategoLang-Term.ToMetaExpr =                 "|[" Expr "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:compilation-unit" "|[" CompilationUnit "]|"
//  StrategoLang-Term.ToMetaExpr =          "compilation-unit" "|[" CompilationUnit "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"                  "|[" CompilationUnit "]|"
//  StrategoLang-Term.ToMetaExpr =                             "|[" CompilationUnit "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:importdecl" "|[" ImportDec "]|"
//  StrategoLang-Term.ToMetaExpr =          "importdecl" "|[" ImportDec "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"            "|[" ImportDec "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:type-dec" "|[" TypeDec "]|"
//  StrategoLang-Term.ToMetaExpr =          "type-dec" "|[" TypeDec "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"          "|[" TypeDec "]|"
//  StrategoLang-Term.ToMetaExpr =                     "|[" TypeDec "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:class-body-dec" "|["  ClassBodyDec  "]|"
//  StrategoLang-Term.ToMetaExpr =          "class-body-dec" "|["  ClassBodyDec  "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"                "|["  ClassBodyDec  "]|"
//  StrategoLang-Term.ToMetaExpr =                           "|["  ClassBodyDec  "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:interface-member-dec" "|[" InterfaceMemberDec  "]|"
//  StrategoLang-Term.ToMetaExpr =          "interface-member-dec" "|[" InterfaceMemberDec  "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:constant-dec" "|[" ConstantDec  "]|"
//  StrategoLang-Term.ToMetaExpr =          "constant-dec" "|[" ConstantDec  "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:class-body-dec*" "|[" ClassBodyDec* "]|"
//  StrategoLang-Term.ToMetaExpr =          "class-body-dec*" "|[" ClassBodyDec* "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"                 "|[" ClassBodyDec* "]|"
//  StrategoLang-Term.ToMetaListExpr =                            "|[" ClassBodyDec* "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:stm" "|["  Stm "]|"
//  StrategoLang-Term.ToMetaExpr =          "stm" "|["  Stm "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:imember-dec" "|["  AbstractMethodDec  "]|"
//  StrategoLang-Term.ToMetaExpr =          "imember-dec" "|["  AbstractMethodDec  "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"             "|["  AbstractMethodDec  "]|"
//  StrategoLang-Term.ToMetaExpr =                        "|["  AbstractMethodDec  "]|"
//
//  StrategoLang-Term.ToMetaExpr =     "java:imember-dec*" "|["  AbstractMethodDec*  "]|"
//  StrategoLang-Term.ToMetaExpr =          "imember-dec*" "|["  AbstractMethodDec*  "]|"
//  StrategoLang-Term.ToMetaExpr =     "java"              "|["  AbstractMethodDec*  "]|"
//  StrategoLang-Term.ToMetaExpr =                         "|["  AbstractMethodDec*  "]|"
//
//  // Anti-quotation
//  context-free syntax
//
//  Name.FromMetaExpr =     "~"      StrategoLang-Term
//  Name.FromMetaExpr =     "~name:" StrategoLang-Term
//  Name.FromMetaExpr =     "~*:"    StrategoLang-Term
//
//  Id.FromMetaExpr =     "~"     StrategoLang-Term
//  Id.FromMetaExpr =     "~id:"  StrategoLang-Term
//  Id.FromMetaExpr =     "~idd:" StrategoLang-Term ":"
//
//  ID.FromMetaExpr =     "~x:" StrategoLang-Term
//
//  TypeParam.FromMetaExpr =     "~"  StrategoLang-Term
//  {TypeParam ","}+.FromMetaExpr =     "~*" StrategoLang-Term
//
//  {ExceptionType ","}*.FromMetaExpr =     "~*" StrategoLang-Term
//
//  Expr.FromMetaExpr =     "~"      StrategoLang-Term
//  Expr.FromMetaExpr =     "~e:"    StrategoLang-Term {prefer}
//  Expr.FromMetaExpr =     "~expr:" StrategoLang-Term {prefer}
//
//  {Expr ","}*.FromMetaExpr =     "~*" StrategoLang-Term
//  {VarInit ","}*.FromMetaExpr =     "~*" StrategoLang-Term
//
//  TypeDec.FromMetaExpr =     "~"  StrategoLang-Term
//  TypeDec*.FromMetaExpr =     "~*" StrategoLang-Term
//
//  ClassBodyDec.FromMetaExpr =     "~"  StrategoLang-Term
//  ClassBodyDec*.FromMetaExpr =     "~*" StrategoLang-Term
//
//  InterfaceMemberDec.FromMetaExpr =     "~"  StrategoLang-Term
//  InterfaceMemberDec*.FromMetaExpr =     "~*" StrategoLang-Term
//
//  DeciLiteral.FromMetaExpr =     "~i:"      StrategoLang-Term
//  DeciLiteral.FromMetaExpr =     "~deci:"   StrategoLang-Term
//  HexaLiteral.FromMetaExpr =     "~hexa:"   StrategoLang-Term
//  OctaLiteral.FromMetaExpr =     "~octa:"   StrategoLang-Term
//  FloatLiteral.FromMetaExpr =     "~float:"  StrategoLang-Term
//  StringLiteral.FromMetaExpr =     "~string:" StrategoLang-Term
//  CharLiteral.FromMetaExpr =     "~char:"   StrategoLang-Term
//
//  syntax
//  StringChars.FromMetaExpr =     "~" <StrategoLang-Term-CF> {prefer}
//  SingleChar.FromMetaExpr =     "~" <StrategoLang-Term-CF> <LAYOUT?-CF>  {prefer}
