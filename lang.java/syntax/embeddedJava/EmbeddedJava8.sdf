module embeddedJava/EmbeddedJava8[E]
imports
  metaborg-java

exports
  %%%
  %% Quotations for CompilationUnit
  %%%
  context-free syntax
    "java:compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
         "compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
    "java"                  "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
                            "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
  
  %%%
  %% Variables for Formal Parameters
  %%%
  variables
    "param" [0-9]*            -> FormalParam  {prefer}
    "param_" [a-zA-Z0-9]*     -> FormalParam  {prefer}
    "params" [0-9]*           -> FormalParams {prefer}
    "params_" [a-zA-Z0-9]*    -> FormalParams {prefer}
    "param" [0-9]* "*"        -> FormalParams {prefer}
    "param_" [a-zA-Z0-9]* "*" -> FormalParams {prefer}

  %%%
  %% Quotations for Formal Parameters
  %%%
  context-free syntax
         "param"  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
    "java:param"  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}

         "param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
    "java:param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}

    "java:formal-param" "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
         "formal-param" "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
    "java"              "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
                        "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}

    "java:formal-param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
         "formal-param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
    "java"               "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
                         "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}

  %%%
  %% Anti Quotations for Formal Parameters
  %%%
  context-free syntax
    "~"  E  ->  FormalParam       {cons("FromMetaExpr")}
    "~*" E  -> {FormalParam ","}* {cons("FromMetaExpr")}
  
  %%%
  %% Anti-Quotation for Types
  %%%
  context-free syntax
            "t" "|[" UnannType "]|"   -> E {cons("ToMetaExpr")}
           "ty" "|[" UnannType "]|"   -> E {cons("ToMetaExpr")}

    "java:type" "|[" UnannType "]|"   -> E {cons("ToMetaExpr")}
         "type" "|[" UnannType "]|"   -> E {cons("ToMetaExpr")}
    "java"      "|[" UnannType "]|"   -> E {cons("ToMetaExpr")}
                "|[" UnannType "]|"   -> E {cons("ToMetaExpr")}
    "rtype" "|[" ReferenceType "]|"   -> E {cons("ToMetaExpr")}
                        
  %%%
  %% Anti-Quotation for Types
  %%%
  context-free syntax
    "~"       E -> UnannType {cons("FromMetaExpr")}
    "~type:"  E -> UnannType {cons("FromMetaExpr")}
    
    "~refType"  E -> ReferenceType {cons("FromMetaExpr")}
    "~rtype:"   E -> ReferenceType {cons("FromMetaExpr")}

  %%%
  %% Variables for Types
  %%%
  variables
    MetaTypeVar          -> UnannType {prefer}
    MetaPrimTypeVar      -> PrimitiveType {prefer}
    MetaReferenceTypeVar -> ReferenceType {prefer}

  lexical syntax
    "t"   [0-9\']*           -> MetaTypeVar
    "t_"  [a-zA-Z0-9\']*     -> MetaTypeVar
    "ty"  [0-9\']*           -> MetaTypeVar
    "ty_" [a-zA-Z0-9\']*     -> MetaTypeVar

    "primt"   [0-9\']*       -> MetaPrimTypeVar
    "primt_"  [a-zA-Z0-9\']* -> MetaPrimTypeVar
    "primty"  [0-9\']*       -> MetaPrimTypeVar
    "primty_" [a-zA-Z0-9\']* -> MetaPrimTypeVar
  
    "rt"   [0-9\']*       -> MetaReferenceTypeVar
    "rt_"  [a-zA-Z0-9\']* -> MetaReferenceTypeVar
    "rty"  [0-9\']*       -> MetaReferenceTypeVar
    "rty_" [a-zA-Z0-9\']* -> MetaReferenceTypeVar
    
    "t"   [0-9\']*           -> ID {reject}
    "t_"  [a-zA-Z0-9\']*     -> ID {reject}
    "ty"  [0-9\']*           -> ID {reject}
    "ty_" [a-zA-Z0-9\']*     -> ID {reject}

    "primt"   [0-9\']*       -> ID {reject}
    "primt_"  [a-zA-Z0-9\']* -> ID {reject}
    "primty"  [0-9\']*       -> ID {reject}
    "primty_" [a-zA-Z0-9\']* -> ID {reject}

    "rt"   [0-9\']*          -> ID {reject}
    "rt_"  [a-zA-Z0-9\']*    -> ID {reject}
    "rty"  [0-9\']*          -> ID {reject}
    "rty_" [a-zA-Z0-9\']*    -> ID {reject}

  lexical restrictions
    MetaTypeVar          -/- [a-zA-Z0-9\_\$\']
    MetaPrimTypeVar      -/- [a-zA-Z0-9\_\$\']
    MetaReferenceTypeVar -/- [a-zA-Z0-9\_\$\']

  %%%
  %% Quotations for Statements
  %%%
  context-free syntax
    "java:bstm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
         "bstm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
    "java"       "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
                 "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}

    "java:bstm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}
         "bstm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}

    "java:block-stm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
         "block-stm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
    "java"            "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
                      "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}

    "java:block-stm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}
         "block-stm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}


    "java:stm"  "|[" Statement "]|" -> E {cons("ToMetaExpr")}
         "stm"  "|[" Statement "]|" -> E {cons("ToMetaExpr")}
         
         "switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}         
    "java:switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}
    
  %%%
  %% Anti Quotations for Statements
  %%%
  context-free syntax
    "~"       E  -> BlockStatement  {cons("FromMetaExpr")}
    "~bstm:"  E  -> BlockStatement  {cons("FromMetaExpr")}
    "~*"      E  -> BlockStatement* {cons("FromMetaExpr")}
    "~bstm*:" E  -> BlockStatement* {cons("FromMetaExpr")}

    "~stm:"   E  -> Statement {cons("FromMetaExpr"), prefer}
    "~"       E  -> Statement {cons("FromMetaExpr")}

    "~*"              E -> SwitchGroup* {cons("FromMetaExpr")}    
    "~switch-group*:" E -> SwitchGroup* {cons("FromMetaExpr")}
        

    "~"               E -> SwitchGroup {cons("FromMetaExpr")}
    "~switch-group:"  E -> SwitchGroup {cons("FromMetaExpr")}

  %%%
  %% Variables for Statements
  %%%
  variables

    "stm"  [0-9\']*             -> Statement         {prefer}
    "stm_" [a-zA-Z0-9\']*       -> Statement         {prefer}
    "bstm" [0-9\']*             -> BlockStatement    {prefer}
    "bstm_" [a-zA-Z0-9\']*      -> BlockStatement    {prefer}
    "bstm" [0-9\']* "*"         -> BlockStatement*   {prefer}    
    "bstm_" [a-zA-Z0-9\']* "*"  -> BlockStatement*   {prefer}

  %%%
  %% Quotations for Expressions
  %%%
  context-free syntax
            "e" "|[" Expression "]|"   -> E {cons("ToMetaExpr")}
    "java:expr" "|[" Expression "]|"   -> E {cons("ToMetaExpr")}
         "expr" "|[" Expression "]|"   -> E {cons("ToMetaExpr")}
    "java"      "|[" Expression "]|"   -> E {cons("ToMetaExpr")}
                "|[" Expression "]|"   -> E {cons("ToMetaExpr")}
                
  %%%
  %% Anti Quotations for Expressions
  %%%
  context-free syntax                
    "~"      E  ->  Expression {cons("FromMetaExpr")}
    "~e:"    E  ->  Expression {prefer, cons("FromMetaExpr")}
    "~expr:" E  ->  Expression {prefer, cons("FromMetaExpr")}
    
  %%%
  %% Variables for Expressions
  %%%
  variables
    "e"    [0-9\']*         -> Expression           {prefer}
    "e_" [a-zA-Z0-9\']*     -> Expression           {prefer}
    "e"    [0-9\']* "*"     -> {Expression ","}*    {prefer}
    "e_" [a-zA-Z0-9\']* "*" -> {Expression ","}*    {prefer}

  lexical syntax
    "e" [0-9\']*            -> ID {reject}
    "e_" [a-zA-Z0-9\']*     -> ID {reject}  
   
  %%%
  %% Anti Quotations for LeftHandSide of Assignment
  %%%
  context-free syntax
    "~"     E     -> LHS   {cons("FromMetaExpr")}
    "~lhs:"  E    -> LHS   {cons("FromMetaExpr")}

  %%%
  %% Quotations for Id
  %%%
  context-free syntax
     "ident" "|[" Id "]|"   -> E {cons("ToMetaExpr")}

  %%%
  %% Anti Quotations for ID
  %%%
    "~"     E     -> ID   {cons("FromMetaExpr")}
    "~id:"  E     -> ID   {cons("FromMetaExpr")}
    "~idd:" E ":" -> ID   {cons("FromMetaExpr")}

  %%%
  %% Variables for ID
  %%%    
  variables
    [xyz] [0-9\']*            -> ID {prefer}
    [xyz] [\_] [a-zA-Z0-9\']* -> ID {prefer}
  
  context-free restrictions
    ID -/- [\_a-zA-Z0-9\']
  
  %%%
  %% Anti Quotations for Literal
  %%%
  context-free syntax
    "~"     E         -> StringLit   {cons("FromMetaExpr")}
    "~strlit:"  E     -> StringLit   {cons("FromMetaExpr")}
    
%%    "~" <E-CF> <LAYOUT?-CF> -> SingleChar  {cons("FromMetaExpr"), prefer}

%%exports
%%  variables
%%    [ij]  [0-9\']*            -> DeciLiteral {prefer}
%%    [ij]  [\_] [a-zA-Z0-9\']* -> DeciLiteral {prefer}

%%
%%    "var-init" "|[" VariableInitializer "]|" -> E {cons("ToMetaExpr")}
%%
%%%%%
%% %% Statements
%% %%%
%%exports
%%
%%  %%%
%%   %% Variables for Statements
%%   %%%
%%  variables
%%    "stm"  [0-9\']*             -> Statement         {prefer}
%%    "stm_" [a-zA-Z0-9\']*       -> Statement         {prefer}
%%    "bstm" [0-9\']*             -> BlockStatement    {prefer}
%%    "bstm_" [a-zA-Z0-9\']*      -> BlockStatement    {prefer}
%%    "bstm" [0-9\']* "*"         -> BlockStatement*   {prefer}    
%%    "bstm_" [a-zA-Z0-9\']* "*"  -> BlockStatement*   {prefer}
%%
%%  %%%
%%   %% Quotations for Statements
%%   %%%
%%  context-free syntax
%%    "java:bstm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%         "bstm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%    "java"       "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%                 "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:bstm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}
%%         "bstm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}
%%
%%    "java:block-stm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%         "block-stm"  "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%    "java"            "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%                      "|[" BlockStatement "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:block-stm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}
%%         "block-stm*" "|[" BlockStatement* "]|" -> E {cons("ToMetaListExpr")}
%%
%%
%%    "java:stm"  "|[" Statement "]|" -> E {cons("ToMetaExpr")}
%%         "stm"  "|[" Statement "]|" -> E {cons("ToMetaExpr")}
%%         
%%         "switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}         
%%    "java:switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}
%%    
%%  %%%
%%   %% Anti Quotations for Statements
%%   %%%
%%  context-free syntax
%%    "~"       E  -> BlockStatement  {cons("FromMetaExpr")}
%%    "~bstm:"  E  -> BlockStatement  {cons("FromMetaExpr")}
%%    "~*"      E  -> BlockStatement* {cons("FromMetaExpr")}
%%    "~bstm*:" E  -> BlockStatement* {cons("FromMetaExpr")}
%%
%%    "~stm:"   E  -> Statement {cons("FromMetaExpr"), prefer}
%%    "~"       E  -> Statement {cons("FromMetaExpr")}
%%
%%    "~*"              E -> SwitchGroup* {cons("FromMetaExpr")}    
%%    "~switch-group*:" E -> SwitchGroup* {cons("FromMetaExpr")}    
%%
%%    "~"               E -> SwitchGroup {cons("FromMetaExpr")}
%%    "~switch-group:"  E -> SwitchGroup {cons("FromMetaExpr")}
%%
%%%%%
%% %% Variable Declarations
%% %%%
%%
%%  %%%
%%   %% Variables for Variable Declarations
%%   %%%
%%  variables
%%    "lvdec" [0-9]*            -> LocalVariableDeclaration    {prefer}
%%    "lvdec_" [a-zA-Z0-9]*     -> LocalVariableDeclaration    {prefer}
%%     "vdec" [0-9]*            -> VarDecl         {prefer}
%%     "vdec_" [a-zA-Z0-9]*     -> VarDecl         {prefer}
%%     "vdec"  [0-9]* "*"       -> {VarDecl ","}+  {prefer}
%%     "vdec_" [a-zA-Z0-9]* "*" -> {VarDecl ","}+  {prefer}
%%
%%  lexical syntax
%%    "lvdec"               -> ID {reject}
%%    "lvdec_" [a-zA-Z0-9]* -> ID {reject}
%%     "vdec"               -> ID {reject}
%%     "vdec_" [a-zA-Z0-9]* -> ID {reject}
%%
%%  %%%
%%   %% Quotations for Local Variable Declarations
%%   %%%
%%  context-free syntax
%%    "java:lvdec"  "|[" LocalVariableDeclaration "]|" -> E {cons("ToMetaExpr")}
%%         "lvdec"  "|[" LocalVariableDeclaration "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:vdec" "|[" VarDecl "]|" -> E {cons("ToMetaExpr")}
%%         "vdec" "|[" VarDecl "]|" -> E {cons("ToMetaExpr")}
%%
%%  %%%
%%   %% Anti Quotations for Local Variable Declarations
%%   %%%
%%  context-free syntax
%%
%%%%%
%% %% LeftHandSide of Assignment
%% %%%
%%exports
%%
%%  %%%
%%   %% Variables for LeftHandSide of Assignment
%%   %%%
%%  variables
%%    "lhs" [0-9\']* -> LHS {prefer}
%%    "e"   [0-9\']* -> LHS {prefer}
%%
%%  lexical syntax
%%    "lhs" [0-9\']* -> ID {reject}
%%
%%%%%
%% %% Types
%% %%%
%%exports
%%
%%  %%%
%%   %% Variables for Types
%%   %%%
%%  variables
%%    MetaTypeVar     -> Type     {prefer}
%%    MetaPrimTypeVar -> PrimType {prefer}
%%    MetaRefTypeVar  -> RefType  {prefer}
%%
%%  lexical syntax
%%    "t"  [0-9\']*        -> MetaTypeVar
%%    "t_" [a-zA-Z0-9\']*  -> MetaTypeVar
%%    "ty" [0-9]*          -> MetaTypeVar
%%    "ty_" [a-zA-Z0-9\']* -> MetaTypeVar
%%
%%    "primt"  [0-9]*        -> MetaPrimTypeVar
%%    "primt_" [a-zA-Z0-9]*  -> MetaPrimTypeVar
%%    "primty" [0-9]*        -> MetaPrimTypeVar
%%    "primty_" [a-zA-Z0-9]* -> MetaPrimTypeVar
%%    "reft"   [0-9]*        -> MetaRefTypeVar
%%    "reft_" [a-zA-Z0-9]*   -> MetaRefTypeVar
%%    "refty"  [0-9]*        -> MetaRefTypeVar
%%    "refty_" [a-zA-Z0-9]*  -> MetaRefTypeVar
%%
%%    "t"  [0-9\']*          -> ID {reject}
%%    "t_" [a-zA-Z0-9]*      -> ID {reject}
%%    "ty" [0-9]*            -> ID {reject}
%%    "ty_" [a-zA-Z0-9]*     -> ID {reject}
%%    "primt"  [0-9]*        -> ID {reject}
%%    "primt_" [a-zA-Z0-9]*  -> ID  {reject}
%%    "primty" [0-9]*        -> ID {reject}
%%    "primty_" [a-zA-Z0-9]* -> ID {reject}
%%    "reft"   [0-9]*        -> ID {reject}
%%    "reft_" [a-zA-Z0-9]*   -> ID {reject}    
%%    "refty"  [0-9]*        -> ID {reject}
%%    "refty_" [a-zA-Z0-9]*  -> ID {reject}
%%
%%  lexical restrictions
%%    MetaTypeVar -/- [a-zA-Z0-9\_\$\']
%%
%%  %%%
%%   %% Quotation for Types
%%   %%%
%%  context-free syntax
%%            "t" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
%%           "ty" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
%%
%%    "java:type" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
%%         "type" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
%%    "java"      "|[" Type "]|"   -> E {cons("ToMetaExpr")}
%%                "|[" Type "]|"   -> E {cons("ToMetaExpr")}
%%
%%  %%%
%%   %% Anti-Quotation for Types
%%   %%%
%%  context-free syntax
%%    "~"       E -> Type {cons("FromMetaExpr")}
%%    "~type:"  E -> Type {cons("FromMetaExpr")}
%%
%%%%%
%% %% Names
%% %%%
%%exports
%%
%%  %%%
%%   %% Variables for Names
%%   %%%
%%  variables
%%    "ambname"  [0-9]*        -> AmbName    {prefer}
%%    "ambname_" [a-zA-Z0-9]*  -> AmbName    {prefer}
%%    "ename"    [0-9]*        -> ExprName   {prefer}
%%    "ename_" [a-zA-Z0-9]*    -> ExprName   {prefer}
%%    "fname"    [0-9]*        -> MethodName {prefer}
%%    "fname_" [a-zA-Z0-9]*    -> MethodName {prefer}
%%    "tname"    [0-9]*        -> TypeName   {prefer}
%%    "tname_" [a-zA-Z0-9]*    -> TypeName   {prefer}
%%    "pkgtname" [0-9]*        -> PackageOrTypeName  {prefer}
%%    "pkgtname_" [a-zA-Z0-9]* -> PackageOrTypeName  {prefer}
%%    "pkgname" [0-9]*         -> PackageName  {prefer}
%%    "pkgname_" [a-zA-Z0-9]*  -> PackageName  {prefer}
%%
%%  %%%
%%   %% Quotations for Names
%%   %%%
%%  context-free syntax
%%    "ambname"  "|[" AmbName    "]|" -> E {cons("ToMetaExpr")}
%%    "ename"    "|[" ExprName   "]|" -> E {cons("ToMetaExpr")}
%%    "fname"    "|[" MethodName "]|" -> E {cons("ToMetaExpr")}
%%    "tname"    "|[" TypeName   "]|" -> E {cons("ToMetaExpr")}
%%    "pkgtname" "|[" PackageOrTypeName "]|" -> E {cons("ToMetaExpr")}
%%
%%%%%
%% %% Modifiers
%% %%%
%%exports
%%
%%  %%%
%%   %% Variables for Modifiers
%%   %%%
%%  variables
%%     "mod" [0-9]*            -> MethodMod  {prefer}
%%     "mod_" [a-zA-Z0-9]*     -> MethodMod  {prefer}
%%     "mod" [0-9]* "*"        -> (Annotation | MethodMod)* {prefer}
%%     "mod_" [a-zA-Z0-9]* "*" -> (Annotation | MethodMod)* {prefer}
%%     
%%     "mod" [0-9]*            -> ClassMod  {prefer}
%%     "mod_" [a-zA-Z0-9]*     -> ClassMod  {prefer}
%%     "mod" [0-9]* "*"        -> (Annotation | ClassMod)* {prefer}
%%     "mod_" [a-zA-Z0-9]* "*" -> (Annotation | ClassMod)* {prefer}
%%     
%%     "mod" [0-9]*            -> ConstrMod  {prefer}
%%     "mod_" [a-zA-Z0-9]*     -> ConstrMod  {prefer}
%%     "mod" [0-9]* "*"        -> (Annotation | ConstrMod)* {prefer}
%%     "mod_" [a-zA-Z0-9]* "*" -> (Annotation | ConstrMod)* {prefer}
%%     
%%     "mod" [0-9]*            -> VarMod  {prefer}
%%     "mod_" [a-zA-Z0-9]*     -> VarMod  {prefer}
%%     "mod" [0-9]* "*"        -> (Annotation | VarMod)* {prefer}
%%     "mod_" [a-zA-Z0-9]* "*" -> (Annotation | VarMod)* {prefer}
%%
%%     "mod" [0-9]*            -> FieldMod  {prefer}
%%     "mod_" [a-zA-Z0-9]*     -> FieldMod  {prefer}
%%     "mod" [0-9]* "*"        -> (Annotation | FieldMod)* {prefer}
%%     "mod_" [a-zA-Z0-9]* "*" -> (Annotation | FieldMod)* {prefer}
%%
%%  %%%
%%   %% Quotations for Modifiers
%%   %%%
%%  context-free syntax
%%           "|[" FieldModifier "]|" -> E {cons("ToMetaExpr")}
%%    "mod"  "|[" FieldModifier "]|" -> E {cons("ToMetaExpr")}
%%
%%    "anno" "|[" Annotation "]|" -> E {cons("ToMetaExpr")}
%%
%%
%%%%%
%% %% Package Declarations
%% %%%
%%exports
%%
%%  %%%
%%   %% Quotations
%%   %%%
%%  context-free syntax
%%    "java:package-dec" "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
%%         "package-dec" "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
%%                       "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:package-dec?" "|[" PackageDec? "]|" -> E {cons("ToMetaExpr")}
%%         "package-dec?" "|[" PackageDec? "]|" -> E {cons("ToMetaExpr")}
%%
%%  %%%
%%   %% Anti Quotations
%%   %%%
%%  context-free syntax
%%    "~package-dec:"  E -> PackageDec {cons("FromMetaExpr")}
%%    "~package-dec?:" E -> PackageDec? {cons("FromMetaExpr")}
%%
%%%%%
%% %% Import Declarations
%% %%%
%%exports
%%
%%  %%%
%%   %% Quotations for Import Declarations
%%   %%%
%%  context-free syntax
%%
%%    "java:import-dec"  "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
%%         "import-dec"  "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
%%                       "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:import-dec*" "|[" ImportDec* "]|" -> E {cons("ToMetaListExpr")}
%%         "import-dec*" "|[" ImportDec* "]|" -> E {cons("ToMetaListExpr")}
%%
%%  %%%
%%   %% Anti Quotations for Import Declarations
%%   %%%
%%  context-free syntax
%%
%%    "~import-dec:"  E  -> ImportDec  {cons("FromMetaExpr")}
%%    "~import-dec*:" E  -> ImportDec* {cons("FromMetaExpr")}
%%
%%%%%
%% %% Must be cleaned up
%% %%%
%%exports
%%  context-free syntax
%%            "e" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
%%    "java:expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
%%         "expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
%%    "java"      "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
%%                "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
%%
%%    "java:compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
%%         "compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
%%    "java"                  "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
%%                            "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
%%
%%    "java:importdecl" "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
%%         "importdecl" "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
%%    "java"            "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
%%
%%    "java:type-dec" "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
%%         "type-dec" "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
%%    "java"          "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
%%                    "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:class-body-dec" "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
%%         "class-body-dec" "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
%%    "java"                "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
%%                          "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:interface-member-dec" "|[" InterfaceMemberDec  "]|" -> E {cons("ToMetaExpr")}
%%         "interface-member-dec" "|[" InterfaceMemberDec  "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:constant-dec" "|[" ConstantDec  "]|" -> E {cons("ToMetaExpr")}
%%         "constant-dec" "|[" ConstantDec  "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:class-body-dec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
%%         "class-body-dec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
%%    "java"                 "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
%%                           "|[" ClassBodyDec* "]|" -> E {cons("ToMetaListExpr")}
%%
%%    "java:stm" "|["  Stm "]|" -> E {cons("ToMetaExpr")}
%%         "stm" "|["  Stm "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:imember-dec" "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
%%         "imember-dec" "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
%%    "java"             "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
%%                       "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
%%
%%    "java:imember-dec*" "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
%%         "imember-dec*" "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
%%    "java"              "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
%%                        "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
%%
%%  %% Anti-quotation
%%  context-free syntax
%%
%%    "~"      E -> Name {cons("FromMetaExpr")}
%%    "~name:" E -> Name {cons("FromMetaExpr")}
%%    "~*:"    E -> Name {cons("FromMetaExpr")}
%%
%%    "~"     E     -> Id   {cons("FromMetaExpr")}
%%    "~id:"  E     -> Id   {cons("FromMetaExpr")}
%%    "~idd:" E ":" -> Id   {cons("FromMetaExpr")}
%%
%%    "~x:" E -> ID {cons("FromMetaExpr")}
%%
%%    "~"  E -> TypeParam        {cons("FromMetaExpr")}
%%    "~*" E -> {TypeParam ","}+ {cons("FromMetaExpr")}
%%
%%    "~*" E -> {ExceptionType ","}* {cons("FromMetaExpr")}
%%
%%    "~"      E  ->  Expr {cons("FromMetaExpr")}
%%    "~e:"    E  ->  Expr {prefer, cons("FromMetaExpr")}
%%    "~expr:" E  ->  Expr {prefer, cons("FromMetaExpr")}
%%
%%    "~*" E      -> {Expr ","}*    {cons("FromMetaExpr")}
%%    "~*" E      -> {VarInit ","}* {cons("FromMetaExpr")}
%%
%%    "~"  E  -> TypeDec  {cons("FromMetaExpr")}
%%    "~*" E  -> TypeDec* {cons("FromMetaExpr")}
%%
%%    "~"  E  -> ClassBodyDec  {cons("FromMetaExpr")}
%%    "~*" E  -> ClassBodyDec* {cons("FromMetaExpr")}
%%
%%    "~"  E  -> InterfaceMemberDec  {cons("FromMetaExpr")}
%%    "~*" E  -> InterfaceMemberDec* {cons("FromMetaExpr")}
%%
%%    "~i:"      E -> DeciLiteral   {cons("FromMetaExpr")}
%%    "~deci:"   E -> DeciLiteral   {cons("FromMetaExpr")}
%%    "~hexa:"   E -> HexaLiteral   {cons("FromMetaExpr")}
%%    "~octa:"   E -> OctaLiteral   {cons("FromMetaExpr")}
%%    "~float:"  E -> FloatLiteral  {cons("FromMetaExpr")}
%%    "~string:" E -> StringLiteral {cons("FromMetaExpr")}
%%    "~char:"   E -> CharLiteral   {cons("FromMetaExpr")}
%%
%%  syntax
%%    "~" <E-CF> -> StringChars {cons("FromMetaExpr"), prefer}
%%    "~" <E-CF> <LAYOUT?-CF> -> SingleChar  {cons("FromMetaExpr"), prefer}
