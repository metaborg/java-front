module analysis

imports

  libspoofax/core/language
  libspoofax/resource/path
  libspoofax/sdf/pp
  libspoofax/term/origin

  statix/api
  statixruntime

  injections/metaborg-java-injections

  signatures/-
  signatures/java/packages/-
  pp/-

  grouping

rules // Analysis

  // regular (class granularity)
  // editor-analyze = stx-editor-analyze(pre-analyze,group-key,post-analyze|"statics", "projectOk", "groupOk", "fileOk")

  // sub-file units (method granularity)
  editor-analyze = stx-editor-analyze(pre-analyze,subunit-group-key,post-analyze|"statics", "projectOk", "pkgGroupOk", "memberUnitOk")

  pre-analyze = explicate-injections-metaborg-java

  post-analyze = implicate-injections-metaborg-java

rules // Editor services

  editor-resolve = stx-editor-resolve

  editor-hover = stx-editor-hover

rules // Debugging

  debug-show-pre-analysis:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"pre-analysis.aterm")> path;
      result   := (filename, <pre-analyze> ast)

  debug-show-subunit-decomposition:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"pre-analysis.aterm")> path;
      result   := (filename, <subunit-group-key;strip-annos> (path, <pre-analyze; topdown({n: \n -> n{()} \})> ast))

  debug-show-analyzed:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast

