module java/packages/ImportDeclarations

imports

  signatures/java/packages/ImportDeclarations-sig

  java/names/ExpressionNames
  java/names/Main
  java/names/MethodNames
  java/names/PackageOrTypeNames
  java/names/TypeNames
  java/packages/Main
  java/types/Indirection
  java/types/Main
  java/types/ReferenceTypes


rules // 7.5. Import Declarations

  importDeclOk : scope * ImportDeclaration * scope * scope * scope
  importDeclsOk maps importDeclOk(*, list(*), *, *, *)

  importDeclListOk: scope * list(ImportDeclaration) * scope

  importDeclListOk(s, importDecls, s_imp) :-
  {s_sType s_sStatic}
    new s_sType s_sStatic,
    s_imp -SINGLE_TYPE_IMPORT-> s_sType,
    s_imp -SINGLE_STATIC_IMPORT-> s_sStatic,
    importDeclsOk(s, importDecls, s_imp, s_sType, s_sStatic).

  importDeclOk(s, SingleTypeImport(typeName), s_imp, s_sType, s_sStatic) :-
  {typeDecl}
    typeDecl == typeNameOk(s, typeName),
    aliasType(s_sType, typeDecl).


  importDeclOk(s, TypeImportOnDemand(pkgOrTypeName), s_imp, s_sType, s_sStatic) :-
  {pkgOrTypeDecl s_pkgOrType}
    pkgOrTypeDecl == pkgOrTypeNameOk(s, pkgOrTypeName),
    s_pkgOrType == pkgOrTypeDeclScope(pkgOrTypeDecl),
    s_imp -TYPE_IMPORT_ONDEMAND-> s_pkgOrType.


  importDeclOk(s, SingleStaticImport(typeName, id), s_imp, s_sType, s_sStatic) :-
  {s_ty types mthds vars}
    s_ty == typeDeclScope(typeNameOk(s, typeName)),

    types == resolveAllStaticMemberTypeNames(s_ty, id),
    importStaticTypeList(id, types, s_sStatic),

    mthds == resolveAllStaticMemberMthdNames(s_ty, id),
    importStaticMthdList(mthds, s_sStatic),

    vars == resolveAllStaticMemberExprNames(s_ty, id),
    importStaticExprList(vars, s_sStatic),

    importStaticNotEmpty(id, types, mthds, vars).

      importStaticTypeList : Id * list(TYPE_PATH) * scope
      importStaticTypeList(id, typePaths, s_imp) :- {typeDecls types}
        typeDecls == typePathDecls(typePaths),
        types == typeDeclTypes(typeDecls),
        aliasType(s_imp, (id, fromType(AMBTYPE(types)))).

      importStaticMthd : MTHD_PATH * scope
      importStaticMthdList maps importStaticMthd(list(*), *)
      importStaticMthd((_, mthdDecl), s_imp) :- aliasMthdName(s_imp, mthdDecl).

      importStaticExpr : VAR_PATH * scope
      importStaticExprList maps importStaticExpr(list(*), *)
      importStaticExpr((_, varDecl), s_imp) :- aliasExprName(s_imp, varDecl).

      importStaticNotEmpty : Id * list(TYPE_PATH) * list(MTHD_PATH) * list(VAR_PATH)
      importStaticNotEmpty(id, [], [], []) :- false | error $[Cannot resolve static type/method/expression [id].].
      importStaticNotEmpty(_, _, _, _).

  importDeclOk(s, StaticImportOnDemand(typeName), s_imp, s_sType, s_sStatic) :-
  {s_ty}
    s_ty == typeDeclScope(typeNameOk(s, typeName)),
    s_imp -STATIC_IMPORT_ONDEMAND-> s_ty.

