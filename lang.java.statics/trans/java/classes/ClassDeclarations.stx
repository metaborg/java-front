module java/classes/ClassDeclarations

imports

  signatures/java/classes/ClassDeclarations-sig

  java/JRE
  java/classes/Main
  java/classes/ConstructorDeclarations
  java/classes/EnumDeclarations
  java/classes/FieldDeclarations
  java/classes/InstanceInitializers
  java/classes/MethodDeclarations
  java/classes/StaticInitializers
  java/interfaces/Annotations
  java/interfaces/InterfaceDeclarations
  java/names/Main
  java/names/TypeNames
  java/types/Main
  java/types/ReferenceTypes
  java/types/TypeVariable
  java/util/Boolean


rules // 8.1. Class Declarations

  clsDeclOk : scope * scope * scope * ClassDeclaration * scope * scope

  clsDeclOk(s, s_cls, s_clsStatic, NormalClassDeclaration2ClassDeclaration(normalClsDecl), s_def, s_staticDef) :-
    normalClsDeclOk(s, s_cls, s_clsStatic, normalClsDecl, s_def, s_staticDef),
    true.

  clsDeclOk(s, s_cls, s_clsStatic, EnumDeclaration2ClassDeclaration(enumDecl), s_def, s_staticDef) :-
    enumDeclOk(s, s_cls, s_clsStatic, enumDecl, s_staticDef),
    true.


  normalClsDeclOk : scope * scope * scope * NormalClassDeclaration * scope * scope

  normalClsDeclOk(s, s_cls, s_clsStatic, ClassDeclaration(clsModList, id, typeParamsOpt, superClsOpt, superIntfsOpt, clsBodyDeclList), s_def, s_staticDef) :-
  {isStatic s_typeParams}
    clsModListOk(s, clsModList),
    isStatic == hasStaticClsMod(clsModList),

    addLexical(s_cls, isStatic, s),

    declareType2(s_def, s_staticDef, isStatic, id, s_cls, CLASS()),
    // FIXME noDuplicateType
    // FIXME noEnclosingTypeSameName
    // FIXME noClassCycle

    new s_typeParams,
    addLexical(s_typeParams, isStatic, s),
    s_cls -TYPE_PARAMS-> s_typeParams,
    typeParamsOptOk(s_typeParams, typeParamsOpt),

    superClsOptOk(s_typeParams, superClsOpt, s_cls),
    superIntfsOptOk(s_typeParams, superIntfsOpt, s_cls),

    s_cls -STATIC_MEMBERS-> s_clsStatic,

    declareImplicitCtorIfMissing(s_cls, clsBodyDeclList),

    clsBodyDeclListOk(s_cls, clsBodyDeclList, s_cls, s_clsStatic),
    true.


  declareType2 : scope * scope * B * Id * scope * KIND

  declareType2(s_def, s_staticDef, F(), id, s_ty, K) :- declareType(s_def, id, s_ty, K).
  declareType2(s_def, s_staticDef, T(), id, s_ty, K) :- declareType(s_staticDef, id, s_ty, K).


  clsModOk : scope * ClassModifier
  clsModListOk maps clsModOk(*, list(*))

  clsModOk(s, Annotation2ClassModifier(anno)) :-
    annoOk(s, anno),
    true.
  clsModOk(s, Public2ClassModifier(_)) :- true.
  clsModOk(s, Protected2ClassModifier(_)) :- true.
  clsModOk(s, Private2ClassModifier(_)) :- true.
  clsModOk(s, Abstract2ClassModifier(_)) :- true.
  clsModOk(s, Static2ClassModifier(_)) :- true.
  clsModOk(s, Final2ClassModifier(_)) :- true.
  clsModOk(s, Strictfp2ClassModifier(_)) :- true.


  hasStaticClsMod : list(ClassModifier) -> B

  hasStaticClsMod([Static2ClassModifier(_)|_]) = T().
  hasStaticClsMod([_|clsModList]) = hasStaticClsMod(clsModList).
  hasStaticClsMod([]) = F().


  typeParamsOptOk : scope * list(TypeParameters)

  typeParamsOptOk(s, []).

  typeParamsOptOk(s, [typeParams]) :- typeParamsOk(s, typeParams).


  typeParamsOk : scope * TypeParameters

  typeParamsOk(s, TypeParameters(typeParamList)) :-
    typeParamListOk(s, typeParamList).


  superClsOptOk : scope * list(SuperClass) * scope

  superClsOptOk(s, [], s_cls) :-
    setSuperCls(s_cls, objectOk(s)),
    true.

  superClsOptOk(s, [SuperClass(clsType)], s_cls) :-
  {T}
    T == clsTypeOk(s, clsType),
    setSuperCls(s_cls, T).


  setSuperCls : scope * TYPE

  setSuperCls(s_cls, T) :-
    isClsType(T),
    s_cls -EXTENDS-> typeScope(T).


  superIntfsOk : scope * SuperInterfaces * scope
  superIntfsOptOk maps superIntfsOk(*, list(*), *)

  superIntfsOk(s, SuperInterface(clsTypeList), s_cls) :-
  {Ts}
    Ts == clsTypeListOk(s, clsTypeList),
    addSuperIntfList(s_cls, Ts).

  addSuperIntf : scope * TYPE
  addSuperIntfList maps addSuperIntf(*, list(*))

  addSuperIntf(s_cls, T) :-
    isIntfType(T),
    s_cls -IMPLEMENTS-> typeScope(T).


  declareImplicitCtorIfMissing : scope * list(ClassBodyDeclaration)

  declareImplicitCtorIfMissing(s, [ConstructorDeclaration2ClassBodyDeclaration(_)|_]).

  declareImplicitCtorIfMissing(s, [_|clsBodyDecls]) :-
    declareImplicitCtorIfMissing(s, clsBodyDecls).

  declareImplicitCtorIfMissing(s, []) :-
    declareImplicitCtor(s).


  clsBodyDeclOk : scope * ClassBodyDeclaration * scope * scope
  clsBodyDeclListOk maps clsBodyDeclOk(*, list(*), *, *)

  clsBodyDeclOk(s, ClassMemberDeclaration2ClassBodyDeclaration(clsMemDecl), s_def, s_staticDef) :-
    clsMemDeclOk(s, clsMemDecl, s_def, s_staticDef),
    true.

  clsBodyDeclOk(s, InstanceInitializer2ClassBodyDeclaration(instInit), s_def, s_staticDef) :-
    instInitOk(s, instInit),
    true.

  clsBodyDeclOk(s, StaticInitializer2ClassBodyDeclaration(staticInit), s_def, s_staticDef) :-
    staticInitOk(s, staticInit),
    true.

  clsBodyDeclOk(s, ConstructorDeclaration2ClassBodyDeclaration(ctorDecl), s_def, s_staticDef) :-
    ctorDeclOk(s, ctorDecl, s_def),
    true.


  clsMemDeclOk : scope * ClassMemberDeclaration * scope * scope

  clsMemDeclOk(s, FieldDeclaration2ClassMemberDeclaration(fldDecl), s_def, s_staticDef) :-
    fldDeclOk(s, fldDecl, s_def, s_staticDef),
    true.

  clsMemDeclOk(s, MethodDeclaration2ClassMemberDeclaration(mthdDecl), s_def, s_staticDef) :-
    mthdDeclOk(s, mthdDecl, s_def, s_staticDef),
    true.

  clsMemDeclOk(s, ClassDeclaration2ClassMemberDeclaration(clsDecl), s_def, s_staticDef) :-
  {s_cls s_clsStatic}
    new s_cls s_clsStatic,
    clsDeclOk(s, s_cls, s_clsStatic, clsDecl, s_def, s_staticDef),
    true.

  clsMemDeclOk(s, InterfaceDeclaration2ClassMemberDeclaration(intfDecl), s_def, s_staticDef) :-
  {s_intf s_intfStatic}
    new s_intf s_intfStatic,
    intfDeclOk(s, s_intf, s_intfStatic, intfDecl, s_def, s_staticDef),
    true.

  clsMemDeclOk(s, SemiColon2ClassMemberDeclaration(semiColon), s_def, s_staticDef) :-
    true.


