module java/types/Conversions

imports

  java/JRE
  java/types/Main
  java/types/Indirection
  java/types/PrimitiveTypes
  java/types/ReferenceTypes
  java/types/Subtyping
  java/util/Boolean

// 5. Conversions and Contexts

signature

  relations
    box : -> TYPE

rules

  isBox : TYPE -> B

  isBox(REF(s_T)) = isBox1(ps) :-
    query box filter e and true in s_T |-> ps.

      isBox1 : list((path * TYPE)) -> B
      isBox1([]) = F().
      isBox1(_)  = T().

rules // 5.1.7 Boxing Conversion

  box : scope * TYPE -> TYPE

  box(s, BOOLEAN()) = booleanOk(s).
  box(s, BYTE()   ) = byteOk(s).
  box(s, SHORT()  ) = shortOk(s).
  box(s, CHAR()   ) = characterOk(s).
  box(s, INT()    ) = integerOk(s).
  box(s, LONG()   ) = longOk(s).
  box(s, FLOAT()  ) = floatOk(s).
  box(s, DOUBLE() ) = doubleOk(s).


rules // 5.1.8 Unboxing Conversion

  unbox : TYPE -> TYPE

  unbox(REF(s_T)) = T :-
    query box filter e and true in s_T |-> [(_, T)].


rules // 5.2 Assignment Contexts

  assignCompatible : scope * TYPE * TYPE
  assignCompatibleList maps assignCompatible(*, list(*), list(*))

  assignCompatible(_, BOOLEAN(), U) :- assignCompatibleBOOLEAN(U).
    assignCompatibleBOOLEAN : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleBOOLEAN(BOOLEAN()).

    // 5.1.8 Unboxing Conversion
    assignCompatibleBOOLEAN(U@REF(_)) :- assignCompatibleBOOLEAN(unbox(U)).


  assignCompatible(_, CHAR(), U) :- assignCompatibleCHAR(U).
    assignCompatibleCHAR : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleCHAR(CHAR()).

    // 5.1.3 Narrowing Primitive Conversion
    // FIXME Only for const expressions
    assignCompatibleCHAR(BYTE()) :- try { false } | note "Unchecked narrowing conversion.".
    assignCompatibleCHAR(SHORT()) :- try { false } | note "Unchecked narrowing conversion.".
    assignCompatibleCHAR(INT()) :- try { false } | note "Unchecked narrowing conversion.".

    // 5.1.8 Unboxing Conversion
    assignCompatibleCHAR(U@REF(_)) :- assignCompatibleCHAR(unbox(U)).


  assignCompatible(_, BYTE(), U) :- assignCompatibleBYTE(U).
    assignCompatibleBYTE : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleBYTE(BYTE()).

    // 5.1.3 Narrowing Primitive Conversion
    // FIXME Only for const expressions
    assignCompatibleBYTE(CHAR()) :- try { false } | note "Unchecked narrowing conversion.".
    assignCompatibleBYTE(SHORT()) :- try { false } | note "Unchecked narrowing conversion.".
    assignCompatibleBYTE(INT()) :- try { false } | note "Unchecked narrowing conversion.".

    // 5.1.8 Unboxing Conversion
    assignCompatibleBYTE(U@REF(_)) :- assignCompatibleBYTE(unbox(U)).


  assignCompatible(_, SHORT(), U) :- assignCompatibleSHORT(U).
    assignCompatibleSHORT : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleSHORT(SHORT()).

    // 5.1.2 Widening Primitive Conversion
    assignCompatibleSHORT(BYTE()).

    // 5.1.3 Narrowing Primitive Conversion
    // FIXME Only for const expressions
    assignCompatibleSHORT(CHAR()) :- try { false } | note "Unchecked narrowing conversion.".
    assignCompatibleSHORT(INT()) :- try { false } | note "Unchecked narrowing conversion.".

    // 5.1.8 Unboxing Conversion
    assignCompatibleSHORT(U@REF(_)) :- assignCompatibleSHORT(unbox(U)).


  assignCompatible(_, INT(), U) :- assignCompatibleINT(U).
    assignCompatibleINT : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleINT(INT()).

    // 5.1.2 Widening Primitive Conversion
    assignCompatibleINT(CHAR()).
    assignCompatibleINT(SHORT()).
    assignCompatibleINT(BYTE()).

    // 5.1.8 Unboxing Conversion
    assignCompatibleINT(U@REF(_)) :- assignCompatibleINT(unbox(U)).


  assignCompatible(_, LONG(), U) :- assignCompatibleLONG(U).
    assignCompatibleLONG : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleLONG(LONG()).

    // 5.1.2 Widening Primitive Conversion
    assignCompatibleLONG(INT()).
    assignCompatibleLONG(CHAR()).
    assignCompatibleLONG(SHORT()).
    assignCompatibleLONG(BYTE()).

    // 5.1.8 Unboxing Conversion
    assignCompatibleLONG(U@REF(_)) :- assignCompatibleLONG(unbox(U)).


  assignCompatible(_, FLOAT(), U) :- assignCompatibleFLOAT(U).
    assignCompatibleFLOAT : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleFLOAT(FLOAT()).

    // 5.1.2 Widening Primitive Conversion
    assignCompatibleFLOAT(LONG()).
    assignCompatibleFLOAT(INT()).
    assignCompatibleFLOAT(CHAR()).
    assignCompatibleFLOAT(SHORT()).
    assignCompatibleFLOAT(BYTE()).

    // 5.1.8 Unboxing Conversion
    assignCompatibleFLOAT(U@REF(_)) :- assignCompatibleFLOAT(unbox(U)).


  assignCompatible(_, DOUBLE(), U) :- assignCompatibleDOUBLE(U).
    assignCompatibleDOUBLE : TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleDOUBLE(DOUBLE()).

    // 5.1.2 Widening Primitive Conversion
    assignCompatibleDOUBLE(FLOAT()).
    assignCompatibleDOUBLE(LONG()).
    assignCompatibleDOUBLE(INT()).
    assignCompatibleDOUBLE(CHAR()).
    assignCompatibleDOUBLE(SHORT()).
    assignCompatibleDOUBLE(BYTE()).

    // 5.1.8 Unboxing Conversion
    assignCompatibleDOUBLE(U@REF(_)) :- assignCompatibleDOUBLE(unbox(U)).


  assignCompatible(s, T@REF(_), U) :- assignCompatibleREF(s, T, U).
  assignCompatible(s, T@EXTREF(_, _), U) :- assignCompatibleREF(s, resolveExtRef(T), U).

    assignCompatibleREF : scope * TYPE * TYPE

    // 5.1.1 Identity Conversion
    assignCompatibleREF(_, T, T).

    // 5.1.5 Widening Reference Conversion
    assignCompatibleREF(s, T, U@REF(_)) :- assignCompatibleREFREF(s, typeKind(T), T, typeKind(U), U).

        assignCompatibleREFREF : scope * KIND * TYPE * KIND * TYPE
        assignCompatibleREFREF(s, ARRAY(), T, ARRAY(), U) :- assignCompatible(s, arrayElementType(T), arrayElementType(U)).
        assignCompatibleREFREF(s, _, REF(s_T), _, REF(s_U)) :- superTypeScope(s_T, s_U).
        assignCompatibleREFREF(s, _, REF(s_T), _, EXTREF(_, s_U)) :- superTypeScope(s_T, s_U).

    assignCompatibleREF(_, T, NULL()).

    // 5.1.7 Boxing Conversion
    assignCompatibleREF(s, T, U) :- assignCompatibleREF(s, T, box(s, U)).


rules // 5.3 Invocation Contexts (strict)

  invokeCompatibleStrict : PARAMS * list(TYPE)

  invokeCompatibleStrict(ARGS(Ts), Us) :- invokeCompatibleTypesStrictList(Ts, Us).
  invokeCompatibleStrict(VARARGS(Ts, S), Us) :- invokeCompatibleStrict1(Ts, S, Us).

      invokeCompatibleStrict1 : list(TYPE) * TYPE * list(TYPE)

      invokeCompatibleStrict1([T|Ts], S, [U|Us]) :-
        invokeCompatibleTypesStrict(T, U),
        invokeCompatibleStrict1(Ts, S, Us).

      invokeCompatibleStrict1([], S, [U]) :-
        invokeCompatibleStrict2(S, isArrayType(U), U).

      invokeCompatibleStrict1([], S, Us) :-
        invokeCompatibleTypesStrictTail(arrayElementType(S), Us).

      invokeCompatibleStrict2 : TYPE * B * TYPE
      invokeCompatibleStrict2(S, T(), U) :- invokeCompatibleTypesStrict(arrayElementType(S), arrayElementType(U)).
      invokeCompatibleStrict2(S, F(), U) :- invokeCompatibleTypesStrict(arrayElementType(S), U).


  invokeCompatibleTypesStrict : TYPE * TYPE
  invokeCompatibleTypesStrictList maps invokeCompatibleTypesStrict(list(*), list(*))
  invokeCompatibleTypesStrictTail maps invokeCompatibleTypesStrict(*, list(*))

  invokeCompatibleTypesStrict(BOOLEAN(), U) :- invokeCompatibleTypesStrictBOOLEAN(U).
    invokeCompatibleTypesStrictBOOLEAN : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictBOOLEAN(BOOLEAN()).


  invokeCompatibleTypesStrict(CHAR(), U) :- invokeCompatibleTypesStrictCHAR(U).
    invokeCompatibleTypesStrictCHAR : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictCHAR(CHAR()).


  invokeCompatibleTypesStrict(BYTE(), U) :- invokeCompatibleTypesStrictBYTE(U).
    invokeCompatibleTypesStrictBYTE : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictBYTE(BYTE()).


  invokeCompatibleTypesStrict(SHORT(), U) :- invokeCompatibleTypesStrictSHORT(U).
    invokeCompatibleTypesStrictSHORT : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictSHORT(SHORT()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesStrictSHORT(BYTE()).


  invokeCompatibleTypesStrict(INT(), U) :- invokeCompatibleTypesStrictINT(U).
    invokeCompatibleTypesStrictINT : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictINT(INT()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesStrictINT(CHAR()).
    invokeCompatibleTypesStrictINT(SHORT()).
    invokeCompatibleTypesStrictINT(BYTE()).


  invokeCompatibleTypesStrict(LONG(), U) :- invokeCompatibleTypesStrictLONG(U).
    invokeCompatibleTypesStrictLONG : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictLONG(LONG()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesStrictLONG(INT()).
    invokeCompatibleTypesStrictLONG(CHAR()).
    invokeCompatibleTypesStrictLONG(SHORT()).
    invokeCompatibleTypesStrictLONG(BYTE()).


  invokeCompatibleTypesStrict(FLOAT(), U) :- invokeCompatibleTypesStrictFLOAT(U).
    invokeCompatibleTypesStrictFLOAT : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictFLOAT(FLOAT()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesStrictFLOAT(LONG()).
    invokeCompatibleTypesStrictFLOAT(INT()).
    invokeCompatibleTypesStrictFLOAT(CHAR()).
    invokeCompatibleTypesStrictFLOAT(SHORT()).
    invokeCompatibleTypesStrictFLOAT(BYTE()).


  invokeCompatibleTypesStrict(DOUBLE(), U) :- invokeCompatibleTypesStrictDOUBLE(U).
    invokeCompatibleTypesStrictDOUBLE : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictDOUBLE(DOUBLE()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesStrictDOUBLE(FLOAT()).
    invokeCompatibleTypesStrictDOUBLE(LONG()).
    invokeCompatibleTypesStrictDOUBLE(INT()).
    invokeCompatibleTypesStrictDOUBLE(CHAR()).
    invokeCompatibleTypesStrictDOUBLE(SHORT()).
    invokeCompatibleTypesStrictDOUBLE(BYTE()).


  invokeCompatibleTypesStrict(T@REF(_), U) :- invokeCompatibleTypesStrictREF(T, U).
  invokeCompatibleTypesStrict(T@EXTREF(_, _), U) :- invokeCompatibleTypesStrictREF(resolveExtRef(T), U).

    invokeCompatibleTypesStrictREF : TYPE * TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesStrictREF(T, T).

    // 5.1.5 Widening Reference Conversion
    invokeCompatibleTypesStrictREF(T, U@REF(_)) :- invokeCompatibleTypesStrictREFREF(typeKind(T), T, typeKind(U), U).

        invokeCompatibleTypesStrictREFREF : KIND * TYPE * KIND * TYPE
        invokeCompatibleTypesStrictREFREF(ARRAY(), T, ARRAY(), U) :- invokeCompatibleTypesStrict(arrayElementType(T), arrayElementType(U)).
        invokeCompatibleTypesStrictREFREF(_, REF(s_T), _, REF(s_U)) :- superTypeScope(s_T, s_U).

    invokeCompatibleTypesStrictREF(T, NULL()).


rules // 5.3 Invocation Contexts (loose)

  invokeCompatibleLoose : scope * PARAMS * list(TYPE)

  invokeCompatibleLoose(s, ARGS(Ts), Us) :- invokeCompatibleTypesLooseList(s, Ts, Us).
  invokeCompatibleLoose(s, VARARGS(Ts, S), Us) :- invokeCompatibleLoose1(s, Ts, S, Us).

      invokeCompatibleLoose1 : scope * list(TYPE) * TYPE * list(TYPE)

      invokeCompatibleLoose1(s, [T|Ts], S, [U|Us]) :-
        invokeCompatibleTypesLoose(s, T, U),
        invokeCompatibleLoose1(s, Ts, S, Us).

      invokeCompatibleLoose1(s, [], S, [U]) :-
        invokeCompatibleLoose2(s, S, isArrayType(U), U).

      invokeCompatibleLoose1(s, [], S, Us) :-
        invokeCompatibleTypesLooseTail(s, arrayElementType(S), Us).

      invokeCompatibleLoose2 : scope * TYPE * B * TYPE
      invokeCompatibleLoose2(s, S, T(), U) :- invokeCompatibleTypesLoose(s, arrayElementType(S), arrayElementType(U)).
      invokeCompatibleLoose2(s, S, F(), U) :- invokeCompatibleTypesLoose(s, arrayElementType(S), U).


  invokeCompatibleTypesLoose : scope * TYPE * TYPE
  invokeCompatibleTypesLooseList maps invokeCompatibleTypesLoose(*, list(*), list(*))
  invokeCompatibleTypesLooseTail maps invokeCompatibleTypesLoose(*, *, list(*))

  invokeCompatibleTypesLoose(_, BOOLEAN(), U) :- invokeCompatibleTypesLooseBOOLEAN(U).
    invokeCompatibleTypesLooseBOOLEAN : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseBOOLEAN(BOOLEAN()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseBOOLEAN(U@REF(_)) :- invokeCompatibleTypesLooseBOOLEAN(unbox(U)).


  invokeCompatibleTypesLoose(_, CHAR(), U) :- invokeCompatibleTypesLooseCHAR(U).
    invokeCompatibleTypesLooseCHAR : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseCHAR(CHAR()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseCHAR(U@REF(_)) :- invokeCompatibleTypesLooseCHAR(unbox(U)).


  invokeCompatibleTypesLoose(_, BYTE(), U) :- invokeCompatibleTypesLooseBYTE(U).
    invokeCompatibleTypesLooseBYTE : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseBYTE(BYTE()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseBYTE(U@REF(_)) :- invokeCompatibleTypesLooseBYTE(unbox(U)).


  invokeCompatibleTypesLoose(_, SHORT(), U) :- invokeCompatibleTypesLooseSHORT(U).
    invokeCompatibleTypesLooseSHORT : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseSHORT(SHORT()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesLooseSHORT(BYTE()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseSHORT(U@REF(_)) :- invokeCompatibleTypesLooseSHORT(unbox(U)).


  invokeCompatibleTypesLoose(_, INT(), U) :- invokeCompatibleTypesLooseINT(U).
    invokeCompatibleTypesLooseINT : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseINT(INT()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesLooseINT(CHAR()).
    invokeCompatibleTypesLooseINT(SHORT()).
    invokeCompatibleTypesLooseINT(BYTE()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseINT(U@REF(_)) :- invokeCompatibleTypesLooseINT(unbox(U)).


  invokeCompatibleTypesLoose(_, LONG(), U) :- invokeCompatibleTypesLooseLONG(U).
    invokeCompatibleTypesLooseLONG : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseLONG(LONG()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesLooseLONG(INT()).
    invokeCompatibleTypesLooseLONG(CHAR()).
    invokeCompatibleTypesLooseLONG(SHORT()).
    invokeCompatibleTypesLooseLONG(BYTE()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseLONG(U@REF(_)) :- invokeCompatibleTypesLooseLONG(unbox(U)).


  invokeCompatibleTypesLoose(_, FLOAT(), U) :- invokeCompatibleTypesLooseFLOAT(U).
    invokeCompatibleTypesLooseFLOAT : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseFLOAT(FLOAT()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesLooseFLOAT(LONG()).
    invokeCompatibleTypesLooseFLOAT(INT()).
    invokeCompatibleTypesLooseFLOAT(CHAR()).
    invokeCompatibleTypesLooseFLOAT(SHORT()).
    invokeCompatibleTypesLooseFLOAT(BYTE()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseFLOAT(U@REF(_)) :- invokeCompatibleTypesLooseFLOAT(unbox(U)).


  invokeCompatibleTypesLoose(_, DOUBLE(), U) :- invokeCompatibleTypesLooseDOUBLE(U).
    invokeCompatibleTypesLooseDOUBLE : TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseDOUBLE(DOUBLE()).

    // 5.1.2 Widening Primitive Conversion
    invokeCompatibleTypesLooseDOUBLE(FLOAT()).
    invokeCompatibleTypesLooseDOUBLE(LONG()).
    invokeCompatibleTypesLooseDOUBLE(INT()).
    invokeCompatibleTypesLooseDOUBLE(CHAR()).
    invokeCompatibleTypesLooseDOUBLE(SHORT()).
    invokeCompatibleTypesLooseDOUBLE(BYTE()).

    // 5.1.8 Unboxing Conversion
    invokeCompatibleTypesLooseDOUBLE(U@REF(_)) :- invokeCompatibleTypesLooseDOUBLE(unbox(U)).


  invokeCompatibleTypesLoose(s, T@REF(_), U) :- invokeCompatibleTypesLooseREF(s, T, U).
  invokeCompatibleTypesLoose(s, T@EXTREF(_, _), U) :- invokeCompatibleTypesLooseREF(s, resolveExtRef(T), U).

    invokeCompatibleTypesLooseREF : scope * TYPE * TYPE

    // 5.1.1 Identity Conversion
    invokeCompatibleTypesLooseREF(_, T, T).

    // 5.1.5 Widening Reference Conversion
    invokeCompatibleTypesLooseREF(s, T, U@REF(_)) :- invokeCompatibleTypesLooseREFREF(s, typeKind(T), T, typeKind(U), U).

        invokeCompatibleTypesLooseREFREF : scope * KIND * TYPE * KIND * TYPE
        invokeCompatibleTypesLooseREFREF(s, ARRAY(), T, ARRAY(), U) :- invokeCompatibleTypesLoose(s, arrayElementType(T), arrayElementType(U)).
        invokeCompatibleTypesLooseREFREF(s, _, REF(s_T), _, REF(s_U)) :- superTypeScope(s_T, s_U).
        invokeCompatibleTypesLooseREFREF(s, _, REF(s_T), _, EXTREF(_, s_U)) :- superTypeScope(s_T, s_U).

    invokeCompatibleTypesLooseREF(_, T, NULL()).

    // 5.1.7 Boxing Conversion
    invokeCompatibleTypesLooseREF(s, T, U) :- invokeCompatibleTypesLooseREF(s, T, box(s, U)).


rules // 5.4 String Contexts

  stringCompatible : TYPE

  stringCompatible(_).


rules // 5.5 Casting Contexts

  castCompatible : TYPE * TYPE

  castCompatible(_, _).

    // FIXME
    // 5.1.1 Identity Conversion
    // 5.1.2 Widening Primitive Conversion
    // 5.1.3 Narrowing Primitive Conversion
    // 5.1.4 Widening and Narrowing Primitive Conversion
    // 5.1.5 Widening Reference Conversion
    // 5.1.6 Narrowing Reference Conversion
    // 5.1.7 Boxing Conversion
    // 5.1.8 Unboxing Conversion


rules // 5.6.1 Unary Numeric Promotion

  promoteNumericUnary : TYPE -> TYPE

  promoteNumericUnary(T@REF(_)) = promoteNumericUnary(unbox(T)).
  promoteNumericUnary(T@EXTREF(_, _)) = promoteNumericUnary(unbox(resolveExtRef(T))).
  promoteNumericUnary(CHAR()  ) = INT().
  promoteNumericUnary(BYTE()  ) = INT().
  promoteNumericUnary(SHORT() ) = INT().
  promoteNumericUnary(INT()   ) = INT().
  promoteNumericUnary(LONG()  ) = LONG().
  promoteNumericUnary(FLOAT() ) = FLOAT().
  promoteNumericUnary(DOUBLE()) = DOUBLE().


rules // 5.6.2 Binary Numeric Promotion

  promoteNumericBinary : TYPE * TYPE -> TYPE

  promoteNumericBinary(T@REF(_),       U@REF(_)      ) = promoteNumericBinary(unbox(T), unbox(U)).
  promoteNumericBinary(T@REF(_),       U             ) = promoteNumericBinary(unbox(T), U).
  promoteNumericBinary(T,              U@REF(_)      ) = promoteNumericBinary(T, unbox(U)).

  promoteNumericBinary(T@EXTREF(_, _), U             ) = promoteNumericBinary(resolveExtRef(T), U).
  promoteNumericBinary(T,              U@EXTREF(_, _)) = promoteNumericBinary(T, resolveExtRef(U)).

  promoteNumericBinary(DOUBLE(),       U             ) = DOUBLE() :- isNumeric(U).
  promoteNumericBinary(T,              DOUBLE()      ) = DOUBLE() :- isNumeric(T).

  promoteNumericBinary(FLOAT(),        U             ) = FLOAT() :- isNumeric(U).
  promoteNumericBinary(T,              FLOAT()       ) = FLOAT() :- isNumeric(T).

  promoteNumericBinary(LONG(),         U             ) = LONG() :- isNumeric(U).
  promoteNumericBinary(T,              LONG()        ) = LONG() :- isNumeric(T).

  promoteNumericBinary(T,              U             ) = INT() :- isNumeric(T), isNumeric(U).


rules

  conditionCompatible : TYPE

  conditionCompatible(BOOLEAN()).
  conditionCompatible(T@REF(_)) :- conditionCompatible(unbox(T)).
  conditionCompatible(T@EXTREF(_, _)) :- conditionCompatible(resolveExtRef(T)).


rules

  switchCompatible : TYPE

  switchCompatible(CHAR()).
  switchCompatible(BYTE()).
  switchCompatible(SHORT()).
  switchCompatible(INT()).
  switchCompatible(T@REF(_)) :- switchCompatibleREF(isString(T), isEnum(T)).
  switchCompatible(T@EXTREF(_, _)) :- switchCompatible(resolveExtRef(T)).

      switchCompatibleREF : B * B
      switchCompatibleREF(T(), _).
      switchCompatibleREF(_, T()).

  switchCaseCompatible : TYPE * TYPE

  switchCaseCompatible(T, U) :- equalsCompatible(T, U). // FIXME is this correct?


rules

  equalsCompatible : TYPE * TYPE


  equalsCompatible(T@REF(_),  U@REF(_) ) :- equalsCompatibleREFREF(isBox(T), T, isBox(U), U).

    equalsCompatibleREFREF : B * TYPE * B * TYPE
    equalsCompatibleREFREF(T(), T, T(), U) :- equalsCompatible(unbox(T), unbox(U)).
    equalsCompatibleREFREF(_  , _, _  , _).

  equalsCompatible(REF(_),    NULL()   ).
  equalsCompatible(NULL(),    REF(_)   ).

  equalsCompatible(T@REF(_),  U        ) :- equalsCompatible(unbox(T), U).
  equalsCompatible(T,         U@REF(_) ) :- equalsCompatible(T, unbox(U)).

  equalsCompatible(BOOLEAN(), BOOLEAN()).

  equalsCompatible(T,         U        ) :- isNumeric(T), isNumeric(U).


rules

  promoteBooleanOrNumericBinary : TYPE * TYPE -> TYPE

  promoteBooleanOrNumericBinary(T@REF(_),  U@REF(_) ) = promoteBooleanOrNumericBinary(unbox(T), unbox(U)).
  promoteBooleanOrNumericBinary(T@REF(_),  U        ) = promoteBooleanOrNumericBinary(unbox(T), U).
  promoteBooleanOrNumericBinary(T,         U@REF(_) ) = promoteBooleanOrNumericBinary(T, unbox(U)).

  promoteBooleanOrNumericBinary(BOOLEAN(), BOOLEAN()) = BOOLEAN().

  promoteBooleanOrNumericBinary(T,         U        ) = promoteNumericBinary(T, U).

rules

  promoteAddition : scope * TYPE * TYPE -> TYPE

  promoteAddition(s, T, U) = promoteAddition1(isString(T), isString(U), T, U).

    promoteAddition1 : B * B * TYPE * TYPE -> TYPE
    promoteAddition1(T(), _, S, _) = S.
    promoteAddition1(_, T(), _, S) = S.
    promoteAddition1(_, _, T, U) = promoteNumericBinary(T, U).

rules // 15.25 Conditional Operator ? :

  condType : TYPE * TYPE -> TYPE

  condType(T, T) = T.

  condType(T@REF(_) , U@REF(_) ) = condTypeREFREF(isBox(T), T, isBox(U), U).

    condTypeREFREF : B * TYPE * B * TYPE -> TYPE
    condTypeREFREF(T(), T, T(), U) = condType(unbox(T), unbox(U)).
    condTypeREFREF(_  , T, _  , U) = NULL() :- try { false } | warning "Unchecked least-upper-bound type.". // FIXME lub(T, U)

  condType(T@REF(_) , NULL()   ) = T.
  condType(NULL()   , U@REF(_) ) = U.

  condType(T@REF(_) , U        ) = condType(unbox(T), U).
  condType(T        , U@REF(_) ) = condType(T, unbox(U)).

  condType(BOOLEAN(), BOOLEAN()) = BOOLEAN().

  // cases that are more specific than binary numeric promotion
  condType(BYTE()   , SHORT()  ) = SHORT().
  condType(SHORT()  , BYTE()   ) = SHORT().

  condType(T        , U        ) = promoteNumericBinary(T, U).

