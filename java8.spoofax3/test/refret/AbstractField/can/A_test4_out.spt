module refret/AbstractField/can/A_test4_out

test parse: A_test4_out [[
  test;
  [p] {
  [A]
      //abstract and make private (do not abstract private accesses)
    package p;
    class A{
    	private int f;
    	void m(){
    		int g= f;
    	}
    	public int getF(){
    		return f;
    	}
    }
    class B{
    	int m(){
    		A a= new A();
    		return a.getF();
    	}
    }
  }
]] parse succeeds

test analysis: A_test4_out [[
  test;
  [p] {
  [A]
      //abstract and make private (do not abstract private accesses)
    package p;
    class A{
    	private int f;
    	void m(){
    		int g= f;
    	}
    	public int getF(){
    		return f;
    	}
    }
    class B{
    	int m(){
    		A a= new A();
    		return a.getF();
    	}
    }
  }
]] run test-analyze to SUCCEED()

test refret 0: A_test4_out [[
  test;
  [p] {
  [A]
      //abstract and make private (do not abstract private accesses)
    package p;
    class A{
    	private int f;
    	void m(){
    		int g= f;
    	}
    	public int [[getF]](){
    		return f;
    	}
    }
    class B{
    	int m(){
    		A a= new A();
    		return [[a.getF]]();
    	}
    }
  }
]] run fix-reference(|#2, #1) to [[
  test;
  [p] {
  [A]
      //abstract and make private (do not abstract private accesses)
    package p;
    class A{
    	private int f;
    	void m(){
    		int g= f;
    	}
    	public int getF(){
    		return f;
    	}
    }
    class B{
    	int m(){
    		A a= new A();
    		return a.getF();
    	}
    }
  }
]]

