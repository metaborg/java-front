module refret/inlineMethod/AndChainLambdaSingleLine_after

test parse: AndChainLambdaSingleLine_after [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]] parse succeeds

test analysis: AndChainLambdaSingleLine_after [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]] run test-analyze to SUCCEED()

test refret 0: AndChainLambdaSingleLine_after [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> ![[s]].isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]]

test refret 1: AndChainLambdaSingleLine_after [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> !s.isEmpty() && [[s]].length() + s.charAt(0) > 0;
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]]

test refret 2: AndChainLambdaSingleLine_after [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> !s.isEmpty() && s.length() + [[s]].charAt(0) > 0;
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]]

