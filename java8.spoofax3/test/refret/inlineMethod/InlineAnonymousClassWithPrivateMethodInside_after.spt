module refret/inlineMethod/InlineAnonymousClassWithPrivateMethodInside_after

test parse: InlineAnonymousClassWithPrivateMethodInside_after [[
  test;
  [Foo]
      public class Foo {
  
        public static void bar(final Runnable runnable) {
        runnable.run();
      }
    }
  
    class Bar {
      public static void main(String[] args) {
          Foo.bar(new Runnable() {
            @Override
            public void run() {
              doRun();
            }
  
            private void doRun() {
              // Woo-hoo
            }
          });
      }
    }
]] parse succeeds

test analysis: InlineAnonymousClassWithPrivateMethodInside_after [[
  test;
  [Foo]
      public class Foo {
  
        public static void bar(final Runnable runnable) {
        runnable.run();
      }
    }
  
    class Bar {
      public static void main(String[] args) {
          Foo.bar(new Runnable() {
            @Override
            public void run() {
              doRun();
            }
  
            private void doRun() {
              // Woo-hoo
            }
          });
      }
    }
]] run test-analyze to SUCCEED()

test refret 0: InlineAnonymousClassWithPrivateMethodInside_after [[
  test;
  [Foo]
      public class Foo {
  
        public static void [[bar]](final Runnable runnable) {
        runnable.run();
      }
    }
  
    class Bar {
      public static void main(String[] args) {
          [[bar]](new Runnable() {
            @Override
            public void run() {
              doRun();
            }
  
            private void doRun() {
              // Woo-hoo
            }
          });
      }
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Foo]
      public class Foo {
  
        public static void bar(final Runnable runnable) {
        runnable.run();
      }
    }
  
    class Bar {
      public static void main(String[] args) {
          Foo.bar(new Runnable() {
            @Override
            public void run() {
              doRun();
            }
  
            private void doRun() {
              // Woo-hoo
            }
          });
      }
    }
]]

