module refret/intellij/refret/inlineMethod/AndChainLambdaSingleLine_after

/*
test AndChainLambdaSingleLine_after: refret test 1 [[
  [[{disabled}]] // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> ![[s]].isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  [[{disabled}]] // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]]
*/

/*
test AndChainLambdaSingleLine_after: refret test 2 [[
  [[{disabled}]] // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> !s.isEmpty() && [[s]].length() + s.charAt(0) > 0;
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  [[{disabled}]] // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]]
*/

/*
test AndChainLambdaSingleLine_after: refret test 3 [[
  [[{disabled}]] // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> !s.isEmpty() && s.length() + [[s]].charAt(0) > 0;
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  [[{disabled}]] // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> !s.isEmpty() && s.length() + s.charAt(0) > 0;
      }
  
    }
]]
*/

