module refret/intellij/refret/inlineMethod/AndChainLambda_after

/*
test AndChainLambda_after: refret test 1 [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> {
            if ([[s]].isEmpty()) return false;
            int length = s.length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]]
*/

/*
test AndChainLambda_after: refret test 2 [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> {
            if (s.isEmpty()) return false;
            int length = [[s]].length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]]
*/

/*
test AndChainLambda_after: refret test 3 [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return [[s]] -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int ch = [[s]].charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]]
*/

/*
test AndChainLambda_after: refret test 4 [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int [[length]] = s.length();
            int ch = s.charAt(0);
            return [[length]] + ch > 0;
        };
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]]
*/

/*
test AndChainLambda_after: refret test 5 [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int [[ch]] = s.charAt(0);
            return length + [[ch]] > 0;
        };
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  // Generics
  test;
  [Test]
      import java.util.function.Predicate;
  
    class X {
      Predicate<String> predicate() {
        return s -> {
            if (s.isEmpty()) return false;
            int length = s.length();
            int ch = s.charAt(0);
            return length + ch > 0;
        };
      }
  
    }
]]
*/

