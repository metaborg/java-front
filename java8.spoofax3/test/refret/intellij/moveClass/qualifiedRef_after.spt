module refret/intellij/moveClass/qualifiedRef_after

test qualifiedRef_after: parsing [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class StaticMethod {
        public static int bar() {return 1;}
    }
  
  }
]] parse succeeds

test qualifiedRef_after: default analysis [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class StaticMethod {
        public static int bar() {return 1;}
    }
  
  }
]] analysis succeeds

test qualifiedRef_after: test analysis [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class StaticMethod {
        public static int bar() {return 1;}
    }
  
  }
]] run test-analyze to SUCCEED()

test qualifiedRef_after: refret test 1 [[
  test;
  [p2] {
  [Test]
      package p2;
    import [[StaticMethod]];
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class [[StaticMethod]] {
        public static int bar() {return 1;}
    }
  
  }
]] run fix-reference(|#1, #2) to [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class StaticMethod {
        public static int bar() {return 1;}
    }
  
  }
]]

test qualifiedRef_after: refret test 2 [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf([[StaticMethod]].bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class [[StaticMethod]] {
        public static int bar() {return 1;}
    }
  
  }
]] run fix-reference(|#1, #2) to [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class StaticMethod {
        public static int bar() {return 1;}
    }
  
  }
]]

test qualifiedRef_after: refret test 3 [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf([[StaticMethod]].bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class [[StaticMethod]] {
        public static int bar() {return 1;}
    }
  
  }
]] run fix-reference(|#1, #2) to [[
  test;
  [p2] {
  [Test]
      package p2;
    import p1.StaticMethod;
  
    import java.math.BigDecimal;
    public class Test extends BigDecimal {
        Test() {super(0);}
        void test() {
            valueOf(0);
            valueOf(StaticMethod.bar());
            valueOf(StaticMethod.bar());
        }
    }
  }
  [p1] {
  [StaticMethod]
      package p1;
    public class StaticMethod {
        public static int bar() {return 1;}
    }
  
  }
]]

