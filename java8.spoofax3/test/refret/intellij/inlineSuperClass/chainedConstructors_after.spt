module refret/intellij/inlineSuperClass/chainedConstructors_after

test chainedConstructors_after: parsing [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            this(1);
        }
  
        Test(int i, int j) {
          this.i = i;
        }
  
        Test(int i) {
          this(i, 0);
        }
    }
]] parse succeeds

test chainedConstructors_after: default analysis [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            this(1);
        }
  
        Test(int i, int j) {
          this.i = i;
        }
  
        Test(int i) {
          this(i, 0);
        }
    }
]] analysis succeeds

test chainedConstructors_after: test analysis [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            this(1);
        }
  
        Test(int i, int j) {
          this.i = i;
        }
  
        Test(int i) {
          this(i, 0);
        }
    }
]] run test-analyze to SUCCEED()

test chainedConstructors_after: refret test 1 [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            [[this]](1);
        }
  
        Test(int i, int j) {
          this.i = i;
        }
  
        [[Test]](int i) {
          this(i, 0);
        }
    }
]] run fix-reference(|#1, #2) to [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            this(1);
        }
  
        Test(int i, int j) {
          this.i = i;
        }
  
        Test(int i) {
          this(i, 0);
        }
    }
]]

test chainedConstructors_after: refret test 2 [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            this(1);
        }
  
        [[Test]](int i, int j) {
          this.i = i;
        }
  
        Test(int i) {
          [[this]](i, 0);
        }
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      class Test {
        int i;
  
        public Test() {
            this(1);
        }
  
        Test(int i, int j) {
          this.i = i;
        }
  
        Test(int i) {
          this(i, 0);
        }
    }
]]

