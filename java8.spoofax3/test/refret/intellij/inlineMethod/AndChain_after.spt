module refret/intellij/inlineMethod/AndChain_after

test parse: AndChain_after [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int head;
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return items[ head] > x;
      }
  
      // other methods
    }
]] parse succeeds

test analysis: AndChain_after [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int head;
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return items[ head] > x;
      }
  
      // other methods
    }
]] run test-analyze to SUCCEED()

test refret 0: AndChain_after [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int head;
      private int tail;
  
      public boolean [[isEmpty]]() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if ([[isEmpty]]())
            throw new NoSuchElementException("Queue is empty");
          return items[ head] > x;
      }
  
      // other methods
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int head;
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return items[ head] > x;
      }
  
      // other methods
    }
]]

test refret 1: AndChain_after [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] [[items]] = new long[16];
  
      private int head;
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return [[items]][ head] > x;
      }
  
      // other methods
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int head;
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return items[ head] > x;
      }
  
      // other methods
    }
]]

test refret 2: AndChain_after [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int [[head]];
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return items[ [[head]]] > x;
      }
  
      // other methods
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [MyQueue]
      import java.util.NoSuchElementException;
  
    public class MyQueue {
      private long[] items = new long[16];
  
      private int head;
      private int tail;
  
      public boolean isEmpty() { return head == tail; }
  
        // true if the first element of the queue is greater than specified number
      public boolean firstIsGreaterThan(int x) {
          if (isEmpty()) return false;
          if (isEmpty())
            throw new NoSuchElementException("Queue is empty");
          return items[ head] > x;
      }
  
      // other methods
    }
]]

