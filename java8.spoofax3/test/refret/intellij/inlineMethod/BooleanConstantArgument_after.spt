module refret/intellij/inlineMethod/BooleanConstantArgument_after

test parse: BooleanConstantArgument_after [[
  test;
  [Test]
      interface PsiElement {
      PsiElement getNextSibling();
      PsiElement getPrevSibling();
    }
  
    class Test1 {
      private void foo(PsiElement node) {
          PsiElement element = node.getNextSibling();
      }
  
      private void bar(PsiElement node) {
          PsiElement element = node.getPrevSibling();
      }
  
    }
]] parse succeeds

test analysis: BooleanConstantArgument_after [[
  test;
  [Test]
      interface PsiElement {
      PsiElement getNextSibling();
      PsiElement getPrevSibling();
    }
  
    class Test1 {
      private void foo(PsiElement node) {
          PsiElement element = node.getNextSibling();
      }
  
      private void bar(PsiElement node) {
          PsiElement element = node.getPrevSibling();
      }
  
    }
]] run test-analyze to SUCCEED()

test refret 0: BooleanConstantArgument_after [[
  test;
  [Test]
      interface PsiElement {
      PsiElement getNextSibling();
      PsiElement getPrevSibling();
    }
  
    class Test1 {
      private void foo(PsiElement [[node]]) {
          PsiElement element = [[node]].getNextSibling();
      }
  
      private void bar(PsiElement node) {
          PsiElement element = node.getPrevSibling();
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      interface PsiElement {
      PsiElement getNextSibling();
      PsiElement getPrevSibling();
    }
  
    class Test1 {
      private void foo(PsiElement node) {
          PsiElement element = node.getNextSibling();
      }
  
      private void bar(PsiElement node) {
          PsiElement element = node.getPrevSibling();
      }
  
    }
]]

test refret 1: BooleanConstantArgument_after [[
  test;
  [Test]
      interface PsiElement {
      PsiElement getNextSibling();
      PsiElement getPrevSibling();
    }
  
    class Test1 {
      private void foo(PsiElement node) {
          PsiElement element = node.getNextSibling();
      }
  
      private void bar(PsiElement [[node]]) {
          PsiElement element = [[node]].getPrevSibling();
      }
  
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      interface PsiElement {
      PsiElement getNextSibling();
      PsiElement getPrevSibling();
    }
  
    class Test1 {
      private void foo(PsiElement node) {
          PsiElement element = node.getNextSibling();
      }
  
      private void bar(PsiElement node) {
          PsiElement element = node.getPrevSibling();
      }
  
    }
]]

