module refret/intellij/inlineParameter/RefStaticMethod_after

test RefStaticMethod_after: parsing [[
  test;
  [StaticRefMove]
      public class StaticRefMove {
      public static int init() {
        return 1;
      }
  
      public void context() {
        StaticRefMoveSubject v = new StaticRefMoveSubject();
        v.subject();
      }
    }
  
    class StaticRefMoveSubject {
      public void subject() {
          int subj = StaticRefMove.init();
          System.out.println(subj);
      }
    }
]] parse succeeds

test RefStaticMethod_after: default analysis [[
  test;
  [StaticRefMove]
      public class StaticRefMove {
      public static int init() {
        return 1;
      }
  
      public void context() {
        StaticRefMoveSubject v = new StaticRefMoveSubject();
        v.subject();
      }
    }
  
    class StaticRefMoveSubject {
      public void subject() {
          int subj = StaticRefMove.init();
          System.out.println(subj);
      }
    }
]] analysis succeeds

test RefStaticMethod_after: test analysis [[
  test;
  [StaticRefMove]
      public class StaticRefMove {
      public static int init() {
        return 1;
      }
  
      public void context() {
        StaticRefMoveSubject v = new StaticRefMoveSubject();
        v.subject();
      }
    }
  
    class StaticRefMoveSubject {
      public void subject() {
          int subj = StaticRefMove.init();
          System.out.println(subj);
      }
    }
]] run test-analyze to SUCCEED()

test RefStaticMethod_after: refret test 1 [[
  test;
  [StaticRefMove]
      public class [[StaticRefMove]] {
      public static int [[init]]() {
        return 1;
      }
  
      public void context() {
        StaticRefMoveSubject v = new StaticRefMoveSubject();
        v.subject();
      }
    }
  
    class StaticRefMoveSubject {
      public void subject() {
          int subj = [[init()]];
          System.out.println(subj);
      }
    }
]] run fix-reference(|#3, #2, #1) to [[
  test;
  [StaticRefMove]
      public class StaticRefMove {
      public static int init() {
        return 1;
      }
  
      public void context() {
        StaticRefMoveSubject v = new StaticRefMoveSubject();
        v.subject();
      }
    }
  
    class StaticRefMoveSubject {
      public void subject() {
          int subj = StaticRefMove.init();
          System.out.println(subj);
      }
    }
]]

