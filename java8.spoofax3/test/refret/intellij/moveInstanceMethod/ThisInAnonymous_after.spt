module refret/intellij/moveInstanceMethod/ThisInAnonymous_after

test ThisInAnonymous_after: parsing [[
  test;
  [Test]
      public class Test {
    }
  
  
    class JetElement {
        void acceptChildren(JetVisitor v) {}
  
        private void prepareAnonymousClasses() {
            acceptChildren(new JetVisitor() {   // Context: this
                public void visitJetElement(JetElement element) {
                    element.acceptChildren(this);
                }
            });
        }
    }
  
    class JetVisitor {}
]] parse succeeds

test ThisInAnonymous_after: default analysis [[
  test;
  [Test]
      public class Test {
    }
  
  
    class JetElement {
        void acceptChildren(JetVisitor v) {}
  
        private void prepareAnonymousClasses() {
            acceptChildren(new JetVisitor() {   // Context: this
                public void visitJetElement(JetElement element) {
                    element.acceptChildren(this);
                }
            });
        }
    }
  
    class JetVisitor {}
]] analysis succeeds

test ThisInAnonymous_after: test analysis [[
  test;
  [Test]
      public class Test {
    }
  
  
    class JetElement {
        void acceptChildren(JetVisitor v) {}
  
        private void prepareAnonymousClasses() {
            acceptChildren(new JetVisitor() {   // Context: this
                public void visitJetElement(JetElement element) {
                    element.acceptChildren(this);
                }
            });
        }
    }
  
    class JetVisitor {}
]] run test-analyze to SUCCEED()

test ThisInAnonymous_after: refret test 1 [[
  test;
  [Test]
      public class Test {
    }
  
  
    class JetElement {
        void [[acceptChildren]](JetVisitor v) {}
  
        private void prepareAnonymousClasses() {
            [[aClass.acceptChildren]](new JetVisitor() {   // Context: this
                public void visitJetElement(JetElement element) {
                    element.acceptChildren(this);
                }
            });
        }
    }
  
    class JetVisitor {}
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
      public class Test {
    }
  
  
    class JetElement {
        void acceptChildren(JetVisitor v) {}
  
        private void prepareAnonymousClasses() {
            acceptChildren(new JetVisitor() {   // Context: this
                public void visitJetElement(JetElement element) {
                    element.acceptChildren(this);
                }
            });
        }
    }
  
    class JetVisitor {}
]]

