module refret/intellij/moveInstanceMethod/ConflictingLocalVariableAndTargetClassField_after

test parse: ConflictingLocalVariableAndTargetClassField_after [[
  test;
  [Test]
  
    import java.util.ArrayList;
    import java.util.List;
  
    class Data {
        final List<Datum> datums;
  
        Data(List<Datum> datums) {
            this.datums = datums;
        }
  
        public List<Datum> filter() {
            List<Datum> datums = new ArrayList<>();
            for (Datum datum : this.datums) {
                if (datum != null) datums.add(datum);
            }
            return datums;
        }
  
        static class Datum { }
    }
  
    class DataUser {
    }
]] parse succeeds

test analysis 1: ConflictingLocalVariableAndTargetClassField_after [[
  test;
  [Test]
  
    import java.util.ArrayList;
    import java.util.List;
  
    class Data {
        final List<Datum> datums;
  
        Data(List<Datum> datums) {
            this.datums = datums;
        }
  
        public List<Datum> filter() {
            List<Datum> datums = new ArrayList<>();
            for (Datum datum : this.datums) {
                if (datum != null) datums.add(datum);
            }
            return datums;
        }
  
        static class Datum { }
    }
  
    class DataUser {
    }
]] analysis succeeds

test analysis 2: ConflictingLocalVariableAndTargetClassField_after [[
  test;
  [Test]
  
    import java.util.ArrayList;
    import java.util.List;
  
    class Data {
        final List<Datum> datums;
  
        Data(List<Datum> datums) {
            this.datums = datums;
        }
  
        public List<Datum> filter() {
            List<Datum> datums = new ArrayList<>();
            for (Datum datum : this.datums) {
                if (datum != null) datums.add(datum);
            }
            return datums;
        }
  
        static class Datum { }
    }
  
    class DataUser {
    }
]] run test-analyze to SUCCEED()

test refret 0: ConflictingLocalVariableAndTargetClassField_after [[
  test;
  [Test]
  
    import java.util.ArrayList;
    import java.util.List;
  
    class Data {
        final List<Datum> [[datums]];
  
        Data(List<Datum> datums) {
            this.datums = datums;
        }
  
        public List<Datum> filter() {
            List<Datum> datums = new ArrayList<>();
            for (Datum datum : [[datums]]) {
                if (datum != null) datums.add(datum);
            }
            return datums;
        }
  
        static class Datum { }
    }
  
    class DataUser {
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
  
    import java.util.ArrayList;
    import java.util.List;
  
    class Data {
        final List<Datum> datums;
  
        Data(List<Datum> datums) {
            this.datums = datums;
        }
  
        public List<Datum> filter() {
            List<Datum> datums = new ArrayList<>();
            for (Datum datum : this.datums) {
                if (datum != null) datums.add(datum);
            }
            return datums;
        }
  
        static class Datum { }
    }
  
    class DataUser {
    }
]]

