module refret/intellij/moveInstanceMethod/PolyadicExpr_after

test parse: PolyadicExpr_after [[
  test;
  [Test]
      class A {
  
        void n(B b) {
            b.m(this);
        }
  
    }
  
    class B {
        private final int i;
  
        public B(int i) {
            this.i = i;
        }
  
  
        public int getI() {
            return i;
        }
  
        void m(A a) {
            System.out.print("display for me the shape" + a + " " + getI() + "times");
        }
    }
]] parse succeeds

test analysis 1: PolyadicExpr_after [[
  test;
  [Test]
      class A {
  
        void n(B b) {
            b.m(this);
        }
  
    }
  
    class B {
        private final int i;
  
        public B(int i) {
            this.i = i;
        }
  
  
        public int getI() {
            return i;
        }
  
        void m(A a) {
            System.out.print("display for me the shape" + a + " " + getI() + "times");
        }
    }
]] analysis succeeds

test analysis 2: PolyadicExpr_after [[
  test;
  [Test]
      class A {
  
        void n(B b) {
            b.m(this);
        }
  
    }
  
    class B {
        private final int i;
  
        public B(int i) {
            this.i = i;
        }
  
  
        public int getI() {
            return i;
        }
  
        void m(A a) {
            System.out.print("display for me the shape" + a + " " + getI() + "times");
        }
    }
]] run test-analyze to SUCCEED()

test refret 0: PolyadicExpr_after [[
  test;
  [Test]
      class A {
  
        void n(B b) {
            [[m]](this);
        }
  
    }
  
    class B {
        private final int i;
  
        public B(int i) {
            this.i = i;
        }
  
  
        public int getI() {
            return i;
        }
  
        void [[m]](A a) {
            System.out.print("display for me the shape" + a + " " + getI() + "times");
        }
    }
]] run fix-reference(|#1, #2) to [[
  test;
  [Test]
      class A {
  
        void n(B b) {
            b.m(this);
        }
  
    }
  
    class B {
        private final int i;
  
        public B(int i) {
            this.i = i;
        }
  
  
        public int getI() {
            return i;
        }
  
        void m(A a) {
            System.out.print("display for me the shape" + a + " " + getI() + "times");
        }
    }
]]

