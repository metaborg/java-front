module refret/intellij/moveInstanceMethod/MethodReferenceWithThisTarget_after

/*
test MethodReferenceWithThisTarget_after: parsing [[
  [[{disabled}]] // Method reference
  
  test;
  [Test]
      import java.util.function.Consumer;
  
    class Source {
    }
  
    class Destination {
      public void doSomething(String s) {
      }
  
        public void foo() {
          Consumer<String> doSomething = this::doSomething;
        }
    }
]] parse succeeds
*/

/*
test MethodReferenceWithThisTarget_after: default analysis [[
  [[{disabled}]] // Method reference
  
  test;
  [Test]
      import java.util.function.Consumer;
  
    class Source {
    }
  
    class Destination {
      public void doSomething(String s) {
      }
  
        public void foo() {
          Consumer<String> doSomething = this::doSomething;
        }
    }
]] analysis succeeds
*/

/*
test MethodReferenceWithThisTarget_after: test analysis [[
  [[{disabled}]] // Method reference
  
  test;
  [Test]
      import java.util.function.Consumer;
  
    class Source {
    }
  
    class Destination {
      public void doSomething(String s) {
      }
  
        public void foo() {
          Consumer<String> doSomething = this::doSomething;
        }
    }
]] run test-analyze to SUCCEED()
*/

/*
test MethodReferenceWithThisTarget_after: refret test 1 [[
  [[{disabled}]] // Method reference
  
  test;
  [Test]
      import java.util.function.Consumer;
  
    class Source {
    }
  
    class Destination {
      public void [[doSomething]](String s) {
      }
  
        public void foo() {
          Consumer<String> doSomething = [[doSomething]];
        }
    }
]] run fix-reference(|#2, #1) to [[
  [[{disabled}]] // Method reference
  
  test;
  [Test]
      import java.util.function.Consumer;
  
    class Source {
    }
  
    class Destination {
      public void doSomething(String s) {
      }
  
        public void foo() {
          Consumer<String> doSomething = this::doSomething;
        }
    }
]]
*/

