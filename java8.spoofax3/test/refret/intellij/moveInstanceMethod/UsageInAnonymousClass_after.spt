module refret/intellij/moveInstanceMethod/UsageInAnonymousClass_after

test UsageInAnonymousClass_after: parsing [[
  test;
  [Test]
  
    class A<T>  {
        void moo(B b) {
          System.out.println(b.foo);
        }
  
        class B {
        private String foo;
  
        public void run() {
          new B() {
            @Override
            public void run() {
              A.this.moo(this);
            }
          };
        }
  
        }
  
    }
]] parse succeeds

test UsageInAnonymousClass_after: default analysis [[
  test;
  [Test]
  
    class A<T>  {
        void moo(B b) {
          System.out.println(b.foo);
        }
  
        class B {
        private String foo;
  
        public void run() {
          new B() {
            @Override
            public void run() {
              A.this.moo(this);
            }
          };
        }
  
        }
  
    }
]] analysis succeeds

test UsageInAnonymousClass_after: test analysis [[
  test;
  [Test]
  
    class A<T>  {
        void moo(B b) {
          System.out.println(b.foo);
        }
  
        class B {
        private String foo;
  
        public void run() {
          new B() {
            @Override
            public void run() {
              A.this.moo(this);
            }
          };
        }
  
        }
  
    }
]] run test-analyze to SUCCEED()

test UsageInAnonymousClass_after: refret test 1 [[
  test;
  [Test]
  
    class A<T>  {
        void [[moo]](B b) {
          System.out.println(b.foo);
        }
  
        class B {
        private String foo;
  
        public void run() {
          new B() {
            @Override
            public void run() {
              [[moo]](this);
            }
          };
        }
  
        }
  
    }
]] run fix-reference(|#2, #1) to [[
  test;
  [Test]
  
    class A<T>  {
        void moo(B b) {
          System.out.println(b.foo);
        }
  
        class B {
        private String foo;
  
        public void run() {
          new B() {
            @Override
            public void run() {
              A.this.moo(this);
            }
          };
        }
  
        }
  
    }
]]

