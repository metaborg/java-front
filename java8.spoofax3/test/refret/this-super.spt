module refret/refret

test qualify field -- this [[
test;

[B]
class B {
  int [[x]];
}

[A]
class A extends B {
  int [[x]];
  public int foo(int [[x]]) {
    return [[x]];
  }
}
]]
run fix-reference(|#4, #3) to  // local parameter
[[
test;

[B]
class B {
  int x;
}

[A]
class A extends B {
  int x;
  public int foo(int x) {
    return x;
  }
}
]]

run fix-reference(|#4, #2) to // local field -- this
[[
test;

[B]
class B {
  int x;
}

[A]
class A extends B {
  int x;
  public int foo(int x) {
    return this.x;
  }
}
]]
run fix-reference(|#4, #1) to // local field -- super
[[
test;

[B]
class B {
  int x;
}

[A]
class A extends B {
  int x;
  public int foo(int x) {
    return super.x;
  }
}
]]


test this/super -- full [[
test;

[AS]
public static class AS {
    public int [[x]] = 4;
}

[BS]
public static class BS {
    public int [[x]] = 5;
}

[CS]
public static class CS {
    public int [[x]] = 6;
}

[A]
public static class A extends AS {
    public int [[x]] = 1;

    public class B extends BS {
        public int [[x]] = 2;

        public class C extends CS {
            public int [[x]] = 3;

            public int getX(int x) {
                return [[x]];
            }
        }
    }
}
]]
run fix-reference(|#7, #1) to
[[
test;

[AS]
public static class AS {
    public int x = 4;
}

[BS]
public static class BS {
    public int x = 5;
}

[CS]
public static class CS {
    public int x = 6;
}

[A]
public static class A extends AS {
    public int x = 1;

    public class B extends BS {
        public int x = 2;

        public class C extends CS {
            public int x = 3;

            public int getX(int x) {
                return A.super.x;
            }
        }
    }
}
]]
run fix-reference(|#7, #2) to
[[
test;

[AS]
public static class AS {
    public int x = 4;
}

[BS]
public static class BS {
    public int x = 5;
}

[CS]
public static class CS {
    public int x = 6;
}

[A]
public static class A extends AS {
    public int x = 1;

    public class B extends BS {
        public int x = 2;

        public class C extends CS {
            public int x = 3;

            public int getX(int x) {
                return B.super.x;
            }
        }
    }
}
]]
run fix-reference(|#7, #3) to
[[
test;

[AS]
public static class AS {
    public int x = 4;
}

[BS]
public static class BS {
    public int x = 5;
}

[CS]
public static class CS {
    public int x = 6;
}

[A]
public static class A extends AS {
    public int x = 1;

    public class B extends BS {
        public int x = 2;

        public class C extends CS {
            public int x = 3;

            public int getX(int x) {
                return super.x;
            }
        }
    }
}
]]
run fix-reference(|#7, #4) to
[[
test;

[AS]
public static class AS {
    public int x = 4;
}

[BS]
public static class BS {
    public int x = 5;
}

[CS]
public static class CS {
    public int x = 6;
}

[A]
public static class A extends AS {
    public int x = 1;

    public class B extends BS {
        public int x = 2;

        public class C extends CS {
            public int x = 3;

            public int getX(int x) {
                return A.this.x;
            }
        }
    }
}
]]
run fix-reference(|#7, #5) to
[[
test;

[AS]
public static class AS {
    public int x = 4;
}

[BS]
public static class BS {
    public int x = 5;
}

[CS]
public static class CS {
    public int x = 6;
}

[A]
public static class A extends AS {
    public int x = 1;

    public class B extends BS {
        public int x = 2;

        public class C extends CS {
            public int x = 3;

            public int getX(int x) {
                return B.this.x;
            }
        }
    }
}
]]
run fix-reference(|#7, #6) to
[[
test;

[AS]
public static class AS {
    public int x = 4;
}

[BS]
public static class BS {
    public int x = 5;
}

[CS]
public static class CS {
    public int x = 6;
}

[A]
public static class A extends AS {
    public int x = 1;

    public class B extends BS {
        public int x = 2;

        public class C extends CS {
            public int x = 3;

            public int getX(int x) {
                return this.x;
            }
        }
    }
}
]]
