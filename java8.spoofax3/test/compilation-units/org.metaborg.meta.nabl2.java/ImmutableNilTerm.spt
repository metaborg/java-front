module ImmutableNilTerm

language java8

start symbol Start

test ImmutableNilTerm [[ package org.metaborg.meta.nabl2.terms.generic;

import com.google.common.collect.ImmutableClassToInstanceMap;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.terms.ITermVar;
import org.pcollections.PSet;

/**
 * Immutable implementation of {@link NilTerm}.
 * <p>
 * Use the static factory method to get the default singleton instance:
 * {@code ImmutableNilTerm.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "NilTerm"})
@Immutable
final class ImmutableNilTerm
    extends NilTerm
    implements Serializable {
  private final ImmutableClassToInstanceMap<Object> attachments;
  private final int hashCode;

  private ImmutableNilTerm() {
    this.attachments = Objects.requireNonNull(super.getAttachments(), "attachments");
    this.hashCode = computeHashCode();
  }

  private ImmutableNilTerm(ImmutableClassToInstanceMap<Object> attachments) {
    this.attachments = attachments;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code attachments} attribute
   */
  @Override
  public ImmutableClassToInstanceMap<Object> getAttachments() {
    return attachments;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link NilTerm#getAttachments() attachments} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for attachments
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableNilTerm setAttachments(ImmutableClassToInstanceMap<Object> value) {
    if (this.attachments == value) return this;
    ImmutableClassToInstanceMap<Object> newValue = Objects.requireNonNull(value, "attachments");
    return validate(new ImmutableNilTerm(newValue));
  }

  /**
   * This instance is equal to all instances of {@code ImmutableNilTerm} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableNilTerm
        && equalTo((ImmutableNilTerm) another);
  }

  private boolean equalTo(ImmutableNilTerm another) {
    return true;
  }

  /**
   * Returns a constant hash code value.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    return 865956697;
  }

  private transient volatile long lazyInitBitmap;

  private static final long VARS_LAZY_INIT_BIT = 0x1L;

  private transient PSet<ITermVar> vars;

  /**
   * {@inheritDoc}
   * <p>
   * Returns a lazily initialized value of the {@link NilTerm#getVars() vars} attribute.
   * Initialized once and only once and stored for subsequent access with proper synchronization.
   * @return A lazily initialized value of the {@code l.name} attribute
   */
  @Override
  public PSet<ITermVar> getVars() {
    if ((lazyInitBitmap & VARS_LAZY_INIT_BIT) == 0) {
      synchronized (this) {
        if ((lazyInitBitmap & VARS_LAZY_INIT_BIT) == 0) {
          this.vars = Objects.requireNonNull(super.getVars(), "vars");
          lazyInitBitmap |= VARS_LAZY_INIT_BIT;
        }
      }
    }
    return vars;
  }

  private static final ImmutableNilTerm INSTANCE = validate(new ImmutableNilTerm());

  /**
   * Returns the default immutable singleton value of {@code NilTerm}
   * @return An immutable instance of NilTerm
   */
  public static ImmutableNilTerm of() {
    return INSTANCE;
  }

  private static ImmutableNilTerm validate(ImmutableNilTerm instance) {
    return INSTANCE != null && INSTANCE.equalTo(instance) ? INSTANCE : instance;
  }

  private static final long serialVersionUID = 42L;

  private Object readResolve() throws ObjectStreamException {
    return validate(this);
  }
} ]] parse succeeds
