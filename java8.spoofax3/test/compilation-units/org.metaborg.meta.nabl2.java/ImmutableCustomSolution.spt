module ImmutableCustomSolution

language java8

start symbol Start

test ImmutableCustomSolution [[ package org.metaborg.meta.nabl2.spoofax.analysis;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.terms.ITerm;

/**
 * Immutable implementation of {@link CustomSolution}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCustomSolution.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "CustomSolution"})
@Immutable
public final class ImmutableCustomSolution
    extends CustomSolution
    implements Serializable {
  private final List<EditorMessage> errors;
  private final List<EditorMessage> warnings;
  private final List<EditorMessage> notes;
  private final ITerm analysis;
  private final int hashCode;

  private ImmutableCustomSolution(
      Iterable<? extends EditorMessage> errors,
      Iterable<? extends EditorMessage> warnings,
      Iterable<? extends EditorMessage> notes,
      ITerm analysis) {
    this.errors = createUnmodifiableList(false, createSafeList(errors, true, false));
    this.warnings = createUnmodifiableList(false, createSafeList(warnings, true, false));
    this.notes = createUnmodifiableList(false, createSafeList(notes, true, false));
    this.analysis = Objects.requireNonNull(analysis, "analysis");
    this.hashCode = computeHashCode();
  }

  private ImmutableCustomSolution(
      ImmutableCustomSolution original,
      List<EditorMessage> errors,
      List<EditorMessage> warnings,
      List<EditorMessage> notes,
      ITerm analysis) {
    this.errors = errors;
    this.warnings = warnings;
    this.notes = notes;
    this.analysis = analysis;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code errors} attribute
   */
  @Override
  public List<EditorMessage> getErrors() {
    return errors;
  }

  /**
   * @return The value of the {@code warnings} attribute
   */
  @Override
  public List<EditorMessage> getWarnings() {
    return warnings;
  }

  /**
   * @return The value of the {@code notes} attribute
   */
  @Override
  public List<EditorMessage> getNotes() {
    return notes;
  }

  /**
   * @return The value of the {@code analysis} attribute
   */
  @Override
  public ITerm getAnalysis() {
    return analysis;
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link CustomSolution#getErrors() errors}.
   * @param elements The elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCustomSolution setErrors(EditorMessage... elements) {
    List<EditorMessage> newValue = createUnmodifiableList(false, createSafeList(Arrays.asList(elements), true, false));
    return new ImmutableCustomSolution(this, newValue, this.warnings, this.notes, this.analysis);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link CustomSolution#getErrors() errors}.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param elements An iterable of errors elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCustomSolution setErrors(Iterable<? extends EditorMessage> elements) {
    if (this.errors == elements) return this;
    List<EditorMessage> newValue = createUnmodifiableList(false, createSafeList(elements, true, false));
    return new ImmutableCustomSolution(this, newValue, this.warnings, this.notes, this.analysis);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link CustomSolution#getWarnings() warnings}.
   * @param elements The elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCustomSolution setWarnings(EditorMessage... elements) {
    List<EditorMessage> newValue = createUnmodifiableList(false, createSafeList(Arrays.asList(elements), true, false));
    return new ImmutableCustomSolution(this, this.errors, newValue, this.notes, this.analysis);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link CustomSolution#getWarnings() warnings}.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param elements An iterable of warnings elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCustomSolution setWarnings(Iterable<? extends EditorMessage> elements) {
    if (this.warnings == elements) return this;
    List<EditorMessage> newValue = createUnmodifiableList(false, createSafeList(elements, true, false));
    return new ImmutableCustomSolution(this, this.errors, newValue, this.notes, this.analysis);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link CustomSolution#getNotes() notes}.
   * @param elements The elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCustomSolution setNotes(EditorMessage... elements) {
    List<EditorMessage> newValue = createUnmodifiableList(false, createSafeList(Arrays.asList(elements), true, false));
    return new ImmutableCustomSolution(this, this.errors, this.warnings, newValue, this.analysis);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link CustomSolution#getNotes() notes}.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param elements An iterable of notes elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCustomSolution setNotes(Iterable<? extends EditorMessage> elements) {
    if (this.notes == elements) return this;
    List<EditorMessage> newValue = createUnmodifiableList(false, createSafeList(elements, true, false));
    return new ImmutableCustomSolution(this, this.errors, this.warnings, newValue, this.analysis);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CustomSolution#getAnalysis() analysis} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for analysis
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCustomSolution setAnalysis(ITerm value) {
    if (this.analysis == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "analysis");
    return new ImmutableCustomSolution(this, this.errors, this.warnings, this.notes, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCustomSolution} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCustomSolution
        && equalTo((ImmutableCustomSolution) another);
  }

  private boolean equalTo(ImmutableCustomSolution another) {
    return errors.equals(another.errors)
        && warnings.equals(another.warnings)
        && notes.equals(another.notes)
        && analysis.equals(another.analysis);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code errors}, {@code warnings}, {@code notes}, {@code analysis}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + errors.hashCode();
    h = h * 17 + warnings.hashCode();
    h = h * 17 + notes.hashCode();
    h = h * 17 + analysis.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code CustomSolution} with attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return "CustomSolution{"
        + "errors=" + errors
        + ", warnings=" + warnings
        + ", notes=" + notes
        + ", analysis=" + analysis
        + "}";
  }

  /**
   * Construct a new immutable {@code CustomSolution} instance.
   * @param errors The value for the {@code errors} attribute
   * @param warnings The value for the {@code warnings} attribute
   * @param notes The value for the {@code notes} attribute
   * @param analysis The value for the {@code analysis} attribute
   * @return An immutable CustomSolution instance
   */
  public static ImmutableCustomSolution of(List<EditorMessage> errors, List<EditorMessage> warnings, List<EditorMessage> notes, ITerm analysis) {
    return of((Iterable<? extends EditorMessage>) errors, (Iterable<? extends EditorMessage>) warnings, (Iterable<? extends EditorMessage>) notes, analysis);
  }

  /**
   * Construct a new immutable {@code CustomSolution} instance.
   * @param errors The value for the {@code errors} attribute
   * @param warnings The value for the {@code warnings} attribute
   * @param notes The value for the {@code notes} attribute
   * @param analysis The value for the {@code analysis} attribute
   * @return An immutable CustomSolution instance
   */
  public static ImmutableCustomSolution of(Iterable<? extends EditorMessage> errors, Iterable<? extends EditorMessage> warnings, Iterable<? extends EditorMessage> notes, ITerm analysis) {
    return new ImmutableCustomSolution(errors, warnings, notes, analysis);
  }

  /**
   * Creates an immutable copy of a {@link CustomSolution} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CustomSolution instance
   */
  public static ImmutableCustomSolution copyOf(CustomSolution instance) {
    if (instance instanceof ImmutableCustomSolution) {
      return (ImmutableCustomSolution) instance;
    }
    return ImmutableCustomSolution.of(instance.getErrors(), instance.getWarnings(), instance.getNotes(), instance.getAnalysis());
  }

  private static final long serialVersionUID = 42L;

  private static <T> List<T> createSafeList(Iterable<? extends T> iterable, boolean checkNulls, boolean skipNulls) {
    ArrayList<T> list;
    if (iterable instanceof Collection<?>) {
      int size = ((Collection<?>) iterable).size();
      if (size == 0) return Collections.emptyList();
      list = new ArrayList<T>();
    } else {
      list = new ArrayList<T>();
    }
    for (T element : iterable) {
      if (skipNulls && element == null) continue;
      if (checkNulls) Objects.requireNonNull(element, "element");
      list.add(element);
    }
    return list;
  }

  private static <T> List<T> createUnmodifiableList(boolean clone, List<T> list) {
    switch(list.size()) {
    case 0: return Collections.emptyList();
    case 1: return Collections.singletonList(list.get(0));
    default:
      if (clone) {
        return Collections.unmodifiableList(new ArrayList<T>(list));
      } else {
        if (list instanceof ArrayList<?>) {
          ((ArrayList<?>) list).trimToSize();
        }
        return Collections.unmodifiableList(list);
      }
    }
  }
} ]] parse succeeds
