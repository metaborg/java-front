module ImmutableConsTerm

language java8

start symbol Start

test ImmutableConsTerm [[ package org.metaborg.meta.nabl2.terms.generic;

import com.google.common.collect.ImmutableClassToInstanceMap;
import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.terms.IListTerm;
import org.metaborg.meta.nabl2.terms.ITerm;
import org.metaborg.meta.nabl2.terms.ITermVar;
import org.pcollections.PSet;

/**
 * Immutable implementation of {@link ConsTerm}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableConsTerm.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "ConsTerm"})
@Immutable
final class ImmutableConsTerm
    extends ConsTerm
    implements Serializable {
  private final ITerm head;
  private final IListTerm tail;
  private final ImmutableClassToInstanceMap<Object> attachments;
  private final int hashCode;

  private ImmutableConsTerm(ITerm head, IListTerm tail) {
    this.head = Objects.requireNonNull(head, "head");
    this.tail = Objects.requireNonNull(tail, "tail");
    this.attachments = Objects.requireNonNull(super.getAttachments(), "attachments");
    this.hashCode = computeHashCode();
  }

  private ImmutableConsTerm(
      ITerm head,
      IListTerm tail,
      ImmutableClassToInstanceMap<Object> attachments) {
    this.head = head;
    this.tail = tail;
    this.attachments = attachments;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code head} attribute
   */
  @Override
  public ITerm getHead() {
    return head;
  }

  /**
   * @return The value of the {@code tail} attribute
   */
  @Override
  public IListTerm getTail() {
    return tail;
  }

  /**
   * @return The value of the {@code attachments} attribute
   */
  @Override
  public ImmutableClassToInstanceMap<Object> getAttachments() {
    return attachments;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link ConsTerm#getHead() head} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for head
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableConsTerm setHead(ITerm value) {
    if (this.head == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "head");
    return new ImmutableConsTerm(newValue, this.tail, this.attachments);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link ConsTerm#getTail() tail} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for tail
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableConsTerm setTail(IListTerm value) {
    if (this.tail == value) return this;
    IListTerm newValue = Objects.requireNonNull(value, "tail");
    return new ImmutableConsTerm(this.head, newValue, this.attachments);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link ConsTerm#getAttachments() attachments} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for attachments
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableConsTerm setAttachments(ImmutableClassToInstanceMap<Object> value) {
    if (this.attachments == value) return this;
    ImmutableClassToInstanceMap<Object> newValue = Objects.requireNonNull(value, "attachments");
    return new ImmutableConsTerm(this.head, this.tail, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableConsTerm} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableConsTerm
        && equalTo((ImmutableConsTerm) another);
  }

  private boolean equalTo(ImmutableConsTerm another) {
    return head.equals(another.head)
        && tail.equals(another.tail);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code head}, {@code tail}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + head.hashCode();
    h = h * 17 + tail.hashCode();
    return h;
  }

  private transient volatile long lazyInitBitmap;

  private static final long GROUND_LAZY_INIT_BIT = 0x1L;

  private transient boolean ground;

  /**
   * {@inheritDoc}
   * <p>
   * Returns a lazily initialized value of the {@link ConsTerm#isGround() ground} attribute.
   * Initialized once and only once and stored for subsequent access with proper synchronization.
   * @return A lazily initialized value of the {@code l.name} attribute
   */
  @Override
  public boolean isGround() {
    if ((lazyInitBitmap & GROUND_LAZY_INIT_BIT) == 0) {
      synchronized (this) {
        if ((lazyInitBitmap & GROUND_LAZY_INIT_BIT) == 0) {
          this.ground = super.isGround();
          lazyInitBitmap |= GROUND_LAZY_INIT_BIT;
        }
      }
    }
    return ground;
  }

  private static final long VARS_LAZY_INIT_BIT = 0x2L;

  private transient PSet<ITermVar> vars;

  /**
   * {@inheritDoc}
   * <p>
   * Returns a lazily initialized value of the {@link ConsTerm#getVars() vars} attribute.
   * Initialized once and only once and stored for subsequent access with proper synchronization.
   * @return A lazily initialized value of the {@code l.name} attribute
   */
  @Override
  public PSet<ITermVar> getVars() {
    if ((lazyInitBitmap & VARS_LAZY_INIT_BIT) == 0) {
      synchronized (this) {
        if ((lazyInitBitmap & VARS_LAZY_INIT_BIT) == 0) {
          this.vars = Objects.requireNonNull(super.getVars(), "vars");
          lazyInitBitmap |= VARS_LAZY_INIT_BIT;
        }
      }
    }
    return vars;
  }

  /**
   * Construct a new immutable {@code ConsTerm} instance.
   * @param head The value for the {@code head} attribute
   * @param tail The value for the {@code tail} attribute
   * @return An immutable ConsTerm instance
   */
  public static ImmutableConsTerm of(ITerm head, IListTerm tail) {
    return new ImmutableConsTerm(head, tail);
  }

  /**
   * Creates an immutable copy of a {@link ConsTerm} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable ConsTerm instance
   */
  public static ImmutableConsTerm copyOf(ConsTerm instance) {
    if (instance instanceof ImmutableConsTerm) {
      return (ImmutableConsTerm) instance;
    }
    return ImmutableConsTerm.of(instance.getHead(), instance.getTail())
        .setAttachments(instance.getAttachments());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
