module ImmutableCGAssoc

language java8

start symbol Start

test ImmutableCGAssoc [[ package org.metaborg.meta.nabl2.constraints.namebinding;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.constraints.messages.IMessageInfo;
import org.metaborg.meta.nabl2.scopegraph.terms.Label;
import org.metaborg.meta.nabl2.terms.ITerm;

/**
 * Immutable implementation of {@link CGAssoc}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCGAssoc.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "CGAssoc"})
@Immutable
public final class ImmutableCGAssoc
    extends CGAssoc
    implements Serializable {
  private final ITerm declaration;
  private final Label label;
  private final ITerm scope;
  private final IMessageInfo messageInfo;
  private final int hashCode;

  private ImmutableCGAssoc(
      ITerm declaration,
      Label label,
      ITerm scope,
      IMessageInfo messageInfo) {
    this.declaration = Objects.requireNonNull(declaration, "declaration");
    this.label = Objects.requireNonNull(label, "label");
    this.scope = Objects.requireNonNull(scope, "scope");
    this.messageInfo = Objects.requireNonNull(messageInfo, "messageInfo");
    this.hashCode = computeHashCode();
  }

  private ImmutableCGAssoc(
      ImmutableCGAssoc original,
      ITerm declaration,
      Label label,
      ITerm scope,
      IMessageInfo messageInfo) {
    this.declaration = declaration;
    this.label = label;
    this.scope = scope;
    this.messageInfo = messageInfo;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code declaration} attribute
   */
  @Override
  public ITerm getDeclaration() {
    return declaration;
  }

  /**
   * @return The value of the {@code label} attribute
   */
  @Override
  public Label getLabel() {
    return label;
  }

  /**
   * @return The value of the {@code scope} attribute
   */
  @Override
  public ITerm getScope() {
    return scope;
  }

  /**
   * @return The value of the {@code messageInfo} attribute
   */
  @Override
  public IMessageInfo getMessageInfo() {
    return messageInfo;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGAssoc#getDeclaration() declaration} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for declaration
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGAssoc setDeclaration(ITerm value) {
    if (this.declaration == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "declaration");
    return new ImmutableCGAssoc(this, newValue, this.label, this.scope, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGAssoc#getLabel() label} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for label
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGAssoc setLabel(Label value) {
    if (this.label == value) return this;
    Label newValue = Objects.requireNonNull(value, "label");
    return new ImmutableCGAssoc(this, this.declaration, newValue, this.scope, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGAssoc#getScope() scope} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for scope
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGAssoc setScope(ITerm value) {
    if (this.scope == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "scope");
    return new ImmutableCGAssoc(this, this.declaration, this.label, newValue, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGAssoc#getMessageInfo() messageInfo} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for messageInfo
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGAssoc setMessageInfo(IMessageInfo value) {
    if (this.messageInfo == value) return this;
    IMessageInfo newValue = Objects.requireNonNull(value, "messageInfo");
    return new ImmutableCGAssoc(this, this.declaration, this.label, this.scope, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCGAssoc} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCGAssoc
        && equalTo((ImmutableCGAssoc) another);
  }

  private boolean equalTo(ImmutableCGAssoc another) {
    return declaration.equals(another.declaration)
        && label.equals(another.label)
        && scope.equals(another.scope)
        && messageInfo.equals(another.messageInfo);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code declaration}, {@code label}, {@code scope}, {@code messageInfo}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + declaration.hashCode();
    h = h * 17 + label.hashCode();
    h = h * 17 + scope.hashCode();
    h = h * 17 + messageInfo.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code CGAssoc} instance.
   * @param declaration The value for the {@code declaration} attribute
   * @param label The value for the {@code label} attribute
   * @param scope The value for the {@code scope} attribute
   * @param messageInfo The value for the {@code messageInfo} attribute
   * @return An immutable CGAssoc instance
   */
  public static ImmutableCGAssoc of(ITerm declaration, Label label, ITerm scope, IMessageInfo messageInfo) {
    return new ImmutableCGAssoc(declaration, label, scope, messageInfo);
  }

  /**
   * Creates an immutable copy of a {@link CGAssoc} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CGAssoc instance
   */
  public static ImmutableCGAssoc copyOf(CGAssoc instance) {
    if (instance instanceof ImmutableCGAssoc) {
      return (ImmutableCGAssoc) instance;
    }
    return ImmutableCGAssoc.of(instance.getDeclaration(), instance.getLabel(), instance.getScope(), instance.getMessageInfo());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
