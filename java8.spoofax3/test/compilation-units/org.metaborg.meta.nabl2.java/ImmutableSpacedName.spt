module ImmutableSpacedName

language java8

start symbol Start

test ImmutableSpacedName [[ package org.metaborg.meta.nabl2.scopegraph.terms;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.scopegraph.INamespace;
import org.metaborg.meta.nabl2.terms.ITerm;

/**
 * Immutable implementation of {@link SpacedName}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableSpacedName.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "SpacedName"})
@Immutable
public final class ImmutableSpacedName
    extends SpacedName
    implements Serializable {
  private final INamespace namespace;
  private final ITerm name;
  private final int hashCode;

  private ImmutableSpacedName(INamespace namespace, ITerm name) {
    this.namespace = Objects.requireNonNull(namespace, "namespace");
    this.name = Objects.requireNonNull(name, "name");
    this.hashCode = computeHashCode();
  }

  private ImmutableSpacedName(
      ImmutableSpacedName original,
      INamespace namespace,
      ITerm name) {
    this.namespace = namespace;
    this.name = name;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code namespace} attribute
   */
  @Override
  public INamespace getNamespace() {
    return namespace;
  }

  /**
   * @return The value of the {@code name} attribute
   */
  @Override
  public ITerm getName() {
    return name;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link SpacedName#getNamespace() namespace} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for namespace
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableSpacedName setNamespace(INamespace value) {
    if (this.namespace == value) return this;
    INamespace newValue = Objects.requireNonNull(value, "namespace");
    return new ImmutableSpacedName(this, newValue, this.name);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link SpacedName#getName() name} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for name
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableSpacedName setName(ITerm value) {
    if (this.name == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "name");
    return new ImmutableSpacedName(this, this.namespace, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableSpacedName} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableSpacedName
        && equalTo((ImmutableSpacedName) another);
  }

  private boolean equalTo(ImmutableSpacedName another) {
    return namespace.equals(another.namespace)
        && name.equals(another.name);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code namespace}, {@code name}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + namespace.hashCode();
    h = h * 17 + name.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code SpacedName} instance.
   * @param namespace The value for the {@code namespace} attribute
   * @param name The value for the {@code name} attribute
   * @return An immutable SpacedName instance
   */
  public static ImmutableSpacedName of(INamespace namespace, ITerm name) {
    return new ImmutableSpacedName(namespace, name);
  }

  /**
   * Creates an immutable copy of a {@link SpacedName} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable SpacedName instance
   */
  public static ImmutableSpacedName copyOf(SpacedName instance) {
    if (instance instanceof ImmutableSpacedName) {
      return (ImmutableSpacedName) instance;
    }
    return ImmutableSpacedName.of(instance.getNamespace(), instance.getName());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
