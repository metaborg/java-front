module ISourceRegion

language java8

start symbol Start

test ISourceRegion [[ package org.metaborg.core.source;

import java.io.Serializable;

/**
 * Interface for representing a finite region in source code text. A region has:
 * <ul>
 * <li>Offset - number of characters from the beginning of the source text, with interval [0,#chars).</li>
 * <li>Row - row or line in the source text, with interval [0,#rows), or -1 if the row is not supported.</li>
 * <li>Column - column in the source text, with interval [0,#columns@row), or -1 if the column is not supported.</li>
 * </ul>
 * Both the starting and ending numbers are inclusive.
 */
public interface ISourceRegion extends Serializable {
    /**
     * @return Inclusive starting offset, the number of characters from the beginning of the source text with interval
     *         [0,#chars).
     */
    int startOffset();

    /**
     * @return Inclusive starting row or line in the source text with interval [0,#rows), or -1 if not supported by this
     *         source region.
     */
    int startRow();

    /**
     * @return Inclusive starting column in the source text with interval [0,#columns@row), or -1 if not supported by
     *         this source region.
     */
    int startColumn();

    /**
     * @return Inclusive ending offset, the number of characters from the beginning of the source text with interval
     *         [0,#chars).
     */
    int endOffset();

    /**
     * @return Inclusive ending row or line in the source text with interval [0,#rows), or -1 if not supported by this
     *         source region.
     */
    int endRow();

    /**
     * @return Inclusive ending column in the source text with interval [0,#columns@row), or -1 if not supported by this
     *         source region.
     */
    int endColumn();

    /**
     * @return Length of the source region.
     */
    int length();

    /**
     * Checks if this region contains given region.
     *
     * @param region
     *            Other region to check.
     * @return True if this region contains given region, false otherwise.
     */
    boolean contains(ISourceRegion region);
} ]] parse succeeds
