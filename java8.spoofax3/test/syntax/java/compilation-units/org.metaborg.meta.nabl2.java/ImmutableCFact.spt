module ImmutableCFact

language java8

test ImmutableCFact [[ package org.metaborg.meta.nabl2.constraints.sym;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.constraints.messages.IMessageInfo;
import org.metaborg.meta.nabl2.terms.ITerm;

/**
 * Immutable implementation of {@link CFact}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCFact.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "CFact"})
@Immutable
public final class ImmutableCFact
    extends CFact
    implements Serializable {
  private final ITerm fact;
  private final IMessageInfo messageInfo;
  private final int hashCode;

  private ImmutableCFact(
      ITerm fact,
      IMessageInfo messageInfo) {
    this.fact = Objects.requireNonNull(fact, "fact");
    this.messageInfo = Objects.requireNonNull(messageInfo, "messageInfo");
    this.hashCode = computeHashCode();
  }

  private ImmutableCFact(
      ImmutableCFact original,
      ITerm fact,
      IMessageInfo messageInfo) {
    this.fact = fact;
    this.messageInfo = messageInfo;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code fact} attribute
   */
  @Override
  public ITerm getFact() {
    return fact;
  }

  /**
   * @return The value of the {@code messageInfo} attribute
   */
  @Override
  public IMessageInfo getMessageInfo() {
    return messageInfo;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CFact#getFact() fact} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for fact
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCFact setFact(ITerm value) {
    if (this.fact == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "fact");
    return new ImmutableCFact(this, newValue, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CFact#getMessageInfo() messageInfo} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for messageInfo
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCFact setMessageInfo(IMessageInfo value) {
    if (this.messageInfo == value) return this;
    IMessageInfo newValue = Objects.requireNonNull(value, "messageInfo");
    return new ImmutableCFact(this, this.fact, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCFact} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCFact
        && equalTo((ImmutableCFact) another);
  }

  private boolean equalTo(ImmutableCFact another) {
    return fact.equals(another.fact)
        && messageInfo.equals(another.messageInfo);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code fact}, {@code messageInfo}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + fact.hashCode();
    h = h * 17 + messageInfo.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code CFact} instance.
   * @param fact The value for the {@code fact} attribute
   * @param messageInfo The value for the {@code messageInfo} attribute
   * @return An immutable CFact instance
   */
  public static ImmutableCFact of(ITerm fact, IMessageInfo messageInfo) {
    return new ImmutableCFact(fact, messageInfo);
  }

  /**
   * Creates an immutable copy of a {@link CFact} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CFact instance
   */
  public static ImmutableCFact copyOf(CFact instance) {
    if (instance instanceof ImmutableCFact) {
      return (ImmutableCFact) instance;
    }
    return ImmutableCFact.of(instance.getFact(), instance.getMessageInfo());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
