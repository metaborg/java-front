module ImmutableCompoundMessage

language java8

start symbol Start

test ImmutableCompoundMessage [[ package org.metaborg.meta.nabl2.constraints.messages;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

/**
 * Immutable implementation of {@link MessageContent.CompoundMessage}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCompoundMessage.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "MessageContent.CompoundMessage"})
@Immutable
final class ImmutableCompoundMessage
    extends MessageContent.CompoundMessage
    implements Serializable {
  private final List<IMessageContent> parts;
  private final int hashCode;

  private ImmutableCompoundMessage(Iterable<? extends IMessageContent> parts) {
    this.parts = createUnmodifiableList(false, createSafeList(parts, true, false));
    this.hashCode = computeHashCode();
  }

  private ImmutableCompoundMessage(
      ImmutableCompoundMessage original,
      List<IMessageContent> parts) {
    this.parts = parts;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code parts} attribute
   */
  @Override
  List<IMessageContent> getParts() {
    return parts;
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link MessageContent.CompoundMessage#getParts() parts}.
   * @param elements The elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCompoundMessage setParts(IMessageContent... elements) {
    List<IMessageContent> newValue = createUnmodifiableList(false, createSafeList(Arrays.asList(elements), true, false));
    return new ImmutableCompoundMessage(this, newValue);
  }

  /**
   * Copy the current immutable object with elements that replace the content of {@link MessageContent.CompoundMessage#getParts() parts}.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param elements An iterable of parts elements to set
   * @return A modified copy of {@code this} object
   */
  public final ImmutableCompoundMessage setParts(Iterable<? extends IMessageContent> elements) {
    if (this.parts == elements) return this;
    List<IMessageContent> newValue = createUnmodifiableList(false, createSafeList(elements, true, false));
    return new ImmutableCompoundMessage(this, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCompoundMessage} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCompoundMessage
        && equalTo((ImmutableCompoundMessage) another);
  }

  private boolean equalTo(ImmutableCompoundMessage another) {
    return parts.equals(another.parts);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code parts}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + parts.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code CompoundMessage} instance.
   * @param parts The value for the {@code parts} attribute
   * @return An immutable CompoundMessage instance
   */
  public static ImmutableCompoundMessage of(List<IMessageContent> parts) {
    return of((Iterable<? extends IMessageContent>) parts);
  }

  /**
   * Construct a new immutable {@code CompoundMessage} instance.
   * @param parts The value for the {@code parts} attribute
   * @return An immutable CompoundMessage instance
   */
  public static ImmutableCompoundMessage of(Iterable<? extends IMessageContent> parts) {
    return new ImmutableCompoundMessage(parts);
  }

  /**
   * Creates an immutable copy of a {@link MessageContent.CompoundMessage} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CompoundMessage instance
   */
  public static ImmutableCompoundMessage copyOf(MessageContent.CompoundMessage instance) {
    if (instance instanceof ImmutableCompoundMessage) {
      return (ImmutableCompoundMessage) instance;
    }
    return ImmutableCompoundMessage.of(instance.getParts());
  }

  private static final long serialVersionUID = 42L;

  private static <T> List<T> createSafeList(Iterable<? extends T> iterable, boolean checkNulls, boolean skipNulls) {
    ArrayList<T> list;
    if (iterable instanceof Collection<?>) {
      int size = ((Collection<?>) iterable).size();
      if (size == 0) return Collections.emptyList();
      list = new ArrayList<T>();
    } else {
      list = new ArrayList<T>();
    }
    for (T element : iterable) {
      if (skipNulls && element == null) continue;
      if (checkNulls) Objects.requireNonNull(element, "element");
      list.add(element);
    }
    return list;
  }

  private static <T> List<T> createUnmodifiableList(boolean clone, List<T> list) {
    switch(list.size()) {
    case 0: return Collections.emptyList();
    case 1: return Collections.singletonList(list.get(0));
    default:
      if (clone) {
        return Collections.unmodifiableList(new ArrayList<T>(list));
      } else {
        if (list instanceof ArrayList<?>) {
          ((ArrayList<?>) list).trimToSize();
        }
        return Collections.unmodifiableList(list);
      }
    }
  }
} ]] parse succeeds
