module ImmutableCovariant

language java8

test ImmutableCovariant [[ package org.metaborg.meta.nabl2.relations.terms;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

/**
 * Immutable implementation of {@link Variances.Covariant}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCovariant.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "Variances.Covariant"})
@Immutable
public final class ImmutableCovariant
    extends Variances.Covariant
    implements Serializable {
  private final RelationName relation;
  private final int hashCode;

  private ImmutableCovariant(RelationName relation) {
    this.relation = Objects.requireNonNull(relation, "relation");
    this.hashCode = computeHashCode();
  }

  private ImmutableCovariant(ImmutableCovariant original, RelationName relation) {
    this.relation = relation;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code relation} attribute
   */
  @Override
  public RelationName getRelation() {
    return relation;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Variances.Covariant#getRelation() relation} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for relation
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCovariant setRelation(RelationName value) {
    if (this.relation == value) return this;
    RelationName newValue = Objects.requireNonNull(value, "relation");
    return new ImmutableCovariant(this, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCovariant} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCovariant
        && equalTo((ImmutableCovariant) another);
  }

  private boolean equalTo(ImmutableCovariant another) {
    return relation.equals(another.relation);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code relation}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + relation.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code Covariant} with attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return "Covariant{"
        + "relation=" + relation
        + "}";
  }

  /**
   * Construct a new immutable {@code Covariant} instance.
   * @param relation The value for the {@code relation} attribute
   * @return An immutable Covariant instance
   */
  public static ImmutableCovariant of(RelationName relation) {
    return new ImmutableCovariant(relation);
  }

  /**
   * Creates an immutable copy of a {@link Variances.Covariant} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable Covariant instance
   */
  public static ImmutableCovariant copyOf(Variances.Covariant instance) {
    if (instance instanceof ImmutableCovariant) {
      return (ImmutableCovariant) instance;
    }
    return ImmutableCovariant.of(instance.getRelation());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
