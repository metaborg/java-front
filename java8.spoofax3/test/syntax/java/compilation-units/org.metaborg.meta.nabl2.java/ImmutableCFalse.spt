module ImmutableCFalse

language java8

test ImmutableCFalse [[ package org.metaborg.meta.nabl2.constraints.base;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.constraints.messages.MessageInfo;

/**
 * Immutable implementation of {@link CFalse}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCFalse.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "CFalse"})
@Immutable
public final class ImmutableCFalse
    extends CFalse
    implements Serializable {
  private final MessageInfo messageInfo;
  private final int hashCode;

  private ImmutableCFalse(MessageInfo messageInfo) {
    this.messageInfo = Objects.requireNonNull(messageInfo, "messageInfo");
    this.hashCode = computeHashCode();
  }

  private ImmutableCFalse(ImmutableCFalse original, MessageInfo messageInfo) {
    this.messageInfo = messageInfo;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code messageInfo} attribute
   */
  @Override
  public MessageInfo getMessageInfo() {
    return messageInfo;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CFalse#getMessageInfo() messageInfo} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for messageInfo
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCFalse setMessageInfo(MessageInfo value) {
    if (this.messageInfo == value) return this;
    MessageInfo newValue = Objects.requireNonNull(value, "messageInfo");
    return new ImmutableCFalse(this, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCFalse} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCFalse
        && equalTo((ImmutableCFalse) another);
  }

  private boolean equalTo(ImmutableCFalse another) {
    return messageInfo.equals(another.messageInfo);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code messageInfo}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + messageInfo.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code CFalse} instance.
   * @param messageInfo The value for the {@code messageInfo} attribute
   * @return An immutable CFalse instance
   */
  public static ImmutableCFalse of(MessageInfo messageInfo) {
    return new ImmutableCFalse(messageInfo);
  }

  /**
   * Creates an immutable copy of a {@link CFalse} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CFalse instance
   */
  public static ImmutableCFalse copyOf(CFalse instance) {
    if (instance instanceof ImmutableCFalse) {
      return (ImmutableCFalse) instance;
    }
    return ImmutableCFalse.of(instance.getMessageInfo());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
