module ImmutableCGRef

language java8

test ImmutableCGRef [[ package org.metaborg.meta.nabl2.constraints.namebinding;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.constraints.messages.IMessageInfo;
import org.metaborg.meta.nabl2.terms.ITerm;

/**
 * Immutable implementation of {@link CGRef}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCGRef.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "CGRef"})
@Immutable
public final class ImmutableCGRef
    extends CGRef
    implements Serializable {
  private final ITerm reference;
  private final ITerm scope;
  private final IMessageInfo messageInfo;
  private final int hashCode;

  private ImmutableCGRef(
      ITerm reference,
      ITerm scope,
      IMessageInfo messageInfo) {
    this.reference = Objects.requireNonNull(reference, "reference");
    this.scope = Objects.requireNonNull(scope, "scope");
    this.messageInfo = Objects.requireNonNull(messageInfo, "messageInfo");
    this.hashCode = computeHashCode();
  }

  private ImmutableCGRef(
      ImmutableCGRef original,
      ITerm reference,
      ITerm scope,
      IMessageInfo messageInfo) {
    this.reference = reference;
    this.scope = scope;
    this.messageInfo = messageInfo;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code reference} attribute
   */
  @Override
  public ITerm getReference() {
    return reference;
  }

  /**
   * @return The value of the {@code scope} attribute
   */
  @Override
  public ITerm getScope() {
    return scope;
  }

  /**
   * @return The value of the {@code messageInfo} attribute
   */
  @Override
  public IMessageInfo getMessageInfo() {
    return messageInfo;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGRef#getReference() reference} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for reference
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGRef setReference(ITerm value) {
    if (this.reference == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "reference");
    return new ImmutableCGRef(this, newValue, this.scope, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGRef#getScope() scope} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for scope
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGRef setScope(ITerm value) {
    if (this.scope == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "scope");
    return new ImmutableCGRef(this, this.reference, newValue, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CGRef#getMessageInfo() messageInfo} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for messageInfo
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCGRef setMessageInfo(IMessageInfo value) {
    if (this.messageInfo == value) return this;
    IMessageInfo newValue = Objects.requireNonNull(value, "messageInfo");
    return new ImmutableCGRef(this, this.reference, this.scope, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCGRef} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCGRef
        && equalTo((ImmutableCGRef) another);
  }

  private boolean equalTo(ImmutableCGRef another) {
    return reference.equals(another.reference)
        && scope.equals(another.scope)
        && messageInfo.equals(another.messageInfo);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code reference}, {@code scope}, {@code messageInfo}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + reference.hashCode();
    h = h * 17 + scope.hashCode();
    h = h * 17 + messageInfo.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code CGRef} instance.
   * @param reference The value for the {@code reference} attribute
   * @param scope The value for the {@code scope} attribute
   * @param messageInfo The value for the {@code messageInfo} attribute
   * @return An immutable CGRef instance
   */
  public static ImmutableCGRef of(ITerm reference, ITerm scope, IMessageInfo messageInfo) {
    return new ImmutableCGRef(reference, scope, messageInfo);
  }

  /**
   * Creates an immutable copy of a {@link CGRef} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CGRef instance
   */
  public static ImmutableCGRef copyOf(CGRef instance) {
    if (instance instanceof ImmutableCGRef) {
      return (ImmutableCGRef) instance;
    }
    return ImmutableCGRef.of(instance.getReference(), instance.getScope(), instance.getMessageInfo());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
