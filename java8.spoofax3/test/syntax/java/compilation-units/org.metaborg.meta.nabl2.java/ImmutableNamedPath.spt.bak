module ImmutableNamedPath

language java8

test ImmutableNamedPath [[ package org.metaborg.meta.nabl2.scopegraph.terms;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.scopegraph.ILabel;
import org.metaborg.meta.nabl2.scopegraph.IOccurrence;
import org.metaborg.meta.nabl2.scopegraph.IPath;
import org.metaborg.meta.nabl2.scopegraph.IScope;

/**
 * Immutable implementation of {@link Paths.NamedPath}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableNamedPath.<S, L, O>of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "Paths.NamedPath<S, L, O>"})
@Immutable
final class ImmutableNamedPath<S extends IScope, L extends ILabel, O extends IOccurrence>
    extends Paths.NamedPath<S, L, O>
    implements Serializable {
  private final S scope;
  private final L label;
  private final O reference;
  private final IPath<S, L, O> inner;
  private final IPath<S, L, O> tail;
  private final int hashCode;

  private ImmutableNamedPath(
      S scope,
      L label,
      O reference,
      IPath<S, L, O> inner,
      IPath<S, L, O> tail) {
    this.scope = Objects.requireNonNull(scope, "scope");
    this.label = Objects.requireNonNull(label, "label");
    this.reference = Objects.requireNonNull(reference, "reference");
    this.inner = Objects.requireNonNull(inner, "inner");
    this.tail = Objects.requireNonNull(tail, "tail");
    this.hashCode = computeHashCode();
  }

  private ImmutableNamedPath(
      ImmutableNamedPath original,
      S scope,
      L label,
      O reference,
      IPath<S, L, O> inner,
      IPath<S, L, O> tail) {
    this.scope = scope;
    this.label = label;
    this.reference = reference;
    this.inner = inner;
    this.tail = tail;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code scope} attribute
   */
  @Override
  public S getScope() {
    return scope;
  }

  /**
   * @return The value of the {@code label} attribute
   */
  @Override
  public L getLabel() {
    return label;
  }

  /**
   * @return The value of the {@code reference} attribute
   */
  @Override
  public O getReference() {
    return reference;
  }

  /**
   * @return The value of the {@code inner} attribute
   */
  @Override
  public IPath<S, L, O> getInner() {
    return inner;
  }

  /**
   * @return The value of the {@code tail} attribute
   */
  @Override
  public IPath<S, L, O> getTail() {
    return tail;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Paths.NamedPath#getScope() scope} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for scope
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableNamedPath<S, L, O> setScope(S value) {
    if (this.scope == value) return this;
    S newValue = Objects.requireNonNull(value, "scope");
    return new ImmutableNamedPath<S, L, O>(this, newValue, this.label, this.reference, this.inner, this.tail);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Paths.NamedPath#getLabel() label} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for label
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableNamedPath<S, L, O> setLabel(L value) {
    if (this.label == value) return this;
    L newValue = Objects.requireNonNull(value, "label");
    return new ImmutableNamedPath<S, L, O>(this, this.scope, newValue, this.reference, this.inner, this.tail);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Paths.NamedPath#getReference() reference} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for reference
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableNamedPath<S, L, O> setReference(O value) {
    if (this.reference == value) return this;
    O newValue = Objects.requireNonNull(value, "reference");
    return new ImmutableNamedPath<S, L, O>(this, this.scope, this.label, newValue, this.inner, this.tail);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Paths.NamedPath#getInner() inner} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for inner
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableNamedPath<S, L, O> setInner(IPath<S, L, O> value) {
    if (this.inner == value) return this;
    IPath<S, L, O> newValue = Objects.requireNonNull(value, "inner");
    return new ImmutableNamedPath<S, L, O>(this, this.scope, this.label, this.reference, newValue, this.tail);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link Paths.NamedPath#getTail() tail} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for tail
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableNamedPath<S, L, O> setTail(IPath<S, L, O> value) {
    if (this.tail == value) return this;
    IPath<S, L, O> newValue = Objects.requireNonNull(value, "tail");
    return new ImmutableNamedPath<S, L, O>(this, this.scope, this.label, this.reference, this.inner, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableNamedPath} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableNamedPath<?, ?, ?>
        && equalTo((ImmutableNamedPath<S, L, O>) another);
  }

  private boolean equalTo(ImmutableNamedPath<S, L, O> another) {
    return scope.equals(another.scope)
        && label.equals(another.label)
        && reference.equals(another.reference)
        && inner.equals(another.inner)
        && tail.equals(another.tail);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code scope}, {@code label}, {@code reference}, {@code inner}, {@code tail}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + scope.hashCode();
    h = h * 17 + label.hashCode();
    h = h * 17 + reference.hashCode();
    h = h * 17 + inner.hashCode();
    h = h * 17 + tail.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code NamedPath} with attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return "NamedPath{"
        + "scope=" + scope
        + ", label=" + label
        + ", reference=" + reference
        + ", inner=" + inner
        + ", tail=" + tail
        + "}";
  }

  private transient volatile long lazyInitBitmap;

  private static final long DECLARATION_LAZY_INIT_BIT = 0x1L;

  private transient O declaration;

  /**
   * {@inheritDoc}
   * <p>
   * Returns a lazily initialized value of the {@link Paths.NamedPath#getDeclaration() declaration} attribute.
   * Initialized once and only once and stored for subsequent access with proper synchronization.
   * @return A lazily initialized value of the {@code l.name} attribute
   */
  @Override
  public O getDeclaration() {
    if ((lazyInitBitmap & DECLARATION_LAZY_INIT_BIT) == 0) {
      synchronized (this) {
        if ((lazyInitBitmap & DECLARATION_LAZY_INIT_BIT) == 0) {
          this.declaration = Objects.requireNonNull(super.getDeclaration(), "declaration");
          lazyInitBitmap |= DECLARATION_LAZY_INIT_BIT;
        }
      }
    }
    return declaration;
  }

  /**
   * Construct a new immutable {@code NamedPath} instance.
   * @param scope The value for the {@code scope} attribute
   * @param label The value for the {@code label} attribute
   * @param reference The value for the {@code reference} attribute
   * @param inner The value for the {@code inner} attribute
   * @param tail The value for the {@code tail} attribute
   * @return An immutable NamedPath instance
   */
  public static <S extends IScope, L extends ILabel, O extends IOccurrence> ImmutableNamedPath<S, L, O> of(S scope, L label, O reference, IPath<S, L, O> inner, IPath<S, L, O> tail) {
    return new ImmutableNamedPath<S, L, O>(scope, label, reference, inner, tail);
  }

  /**
   * Creates an immutable copy of a {@link Paths.NamedPath} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param <S> generic parameter S
   * @param <L> generic parameter L
   * @param <O> generic parameter O
   * @param instance The instance to copy
   * @return A copied immutable NamedPath instance
   */
  public static <S extends IScope, L extends ILabel, O extends IOccurrence> ImmutableNamedPath<S, L, O> copyOf(Paths.NamedPath<S, L, O> instance) {
    if (instance instanceof ImmutableNamedPath<?, ?, ?>) {
      return (ImmutableNamedPath<S, L, O>) instance;
    }
    return ImmutableNamedPath.<S, L, O>of(instance.getScope(), instance.getLabel(), instance.getReference(), instance.getInner(), instance.getTail());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
