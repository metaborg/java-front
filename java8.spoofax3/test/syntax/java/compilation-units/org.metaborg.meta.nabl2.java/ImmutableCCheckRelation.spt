module ImmutableCCheckRelation

language java8

test ImmutableCCheckRelation [[ package org.metaborg.meta.nabl2.constraints.relations;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import org.metaborg.meta.nabl2.constraints.messages.MessageInfo;
import org.metaborg.meta.nabl2.relations.terms.RelationName;
import org.metaborg.meta.nabl2.terms.ITerm;

/**
 * Immutable implementation of {@link CCheckRelation}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableCCheckRelation.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "CCheckRelation"})
@Immutable
public final class ImmutableCCheckRelation
    extends CCheckRelation
    implements Serializable {
  private final ITerm left;
  private final RelationName relation;
  private final ITerm right;
  private final MessageInfo messageInfo;
  private final int hashCode;

  private ImmutableCCheckRelation(
      ITerm left,
      RelationName relation,
      ITerm right,
      MessageInfo messageInfo) {
    this.left = Objects.requireNonNull(left, "left");
    this.relation = Objects.requireNonNull(relation, "relation");
    this.right = Objects.requireNonNull(right, "right");
    this.messageInfo = Objects.requireNonNull(messageInfo, "messageInfo");
    this.hashCode = computeHashCode();
  }

  private ImmutableCCheckRelation(
      ImmutableCCheckRelation original,
      ITerm left,
      RelationName relation,
      ITerm right,
      MessageInfo messageInfo) {
    this.left = left;
    this.relation = relation;
    this.right = right;
    this.messageInfo = messageInfo;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code left} attribute
   */
  @Override
  public ITerm getLeft() {
    return left;
  }

  /**
   * @return The value of the {@code relation} attribute
   */
  @Override
  public RelationName getRelation() {
    return relation;
  }

  /**
   * @return The value of the {@code right} attribute
   */
  @Override
  public ITerm getRight() {
    return right;
  }

  /**
   * @return The value of the {@code messageInfo} attribute
   */
  @Override
  public MessageInfo getMessageInfo() {
    return messageInfo;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CCheckRelation#getLeft() left} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for left
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCCheckRelation setLeft(ITerm value) {
    if (this.left == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "left");
    return new ImmutableCCheckRelation(this, newValue, this.relation, this.right, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CCheckRelation#getRelation() relation} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for relation
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCCheckRelation setRelation(RelationName value) {
    if (this.relation == value) return this;
    RelationName newValue = Objects.requireNonNull(value, "relation");
    return new ImmutableCCheckRelation(this, this.left, newValue, this.right, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CCheckRelation#getRight() right} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for right
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCCheckRelation setRight(ITerm value) {
    if (this.right == value) return this;
    ITerm newValue = Objects.requireNonNull(value, "right");
    return new ImmutableCCheckRelation(this, this.left, this.relation, newValue, this.messageInfo);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link CCheckRelation#getMessageInfo() messageInfo} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for messageInfo
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableCCheckRelation setMessageInfo(MessageInfo value) {
    if (this.messageInfo == value) return this;
    MessageInfo newValue = Objects.requireNonNull(value, "messageInfo");
    return new ImmutableCCheckRelation(this, this.left, this.relation, this.right, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableCCheckRelation} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableCCheckRelation
        && equalTo((ImmutableCCheckRelation) another);
  }

  private boolean equalTo(ImmutableCCheckRelation another) {
    return left.equals(another.left)
        && relation.equals(another.relation)
        && right.equals(another.right)
        && messageInfo.equals(another.messageInfo);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code left}, {@code relation}, {@code right}, {@code messageInfo}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + left.hashCode();
    h = h * 17 + relation.hashCode();
    h = h * 17 + right.hashCode();
    h = h * 17 + messageInfo.hashCode();
    return h;
  }

  /**
   * Construct a new immutable {@code CCheckRelation} instance.
   * @param left The value for the {@code left} attribute
   * @param relation The value for the {@code relation} attribute
   * @param right The value for the {@code right} attribute
   * @param messageInfo The value for the {@code messageInfo} attribute
   * @return An immutable CCheckRelation instance
   */
  public static ImmutableCCheckRelation of(ITerm left, RelationName relation, ITerm right, MessageInfo messageInfo) {
    return new ImmutableCCheckRelation(left, relation, right, messageInfo);
  }

  /**
   * Creates an immutable copy of a {@link CCheckRelation} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable CCheckRelation instance
   */
  public static ImmutableCCheckRelation copyOf(CCheckRelation instance) {
    if (instance instanceof ImmutableCCheckRelation) {
      return (ImmutableCCheckRelation) instance;
    }
    return ImmutableCCheckRelation.of(instance.getLeft(), instance.getRelation(), instance.getRight(), instance.getMessageInfo());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
