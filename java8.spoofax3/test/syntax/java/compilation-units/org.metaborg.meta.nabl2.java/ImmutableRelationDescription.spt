module ImmutableRelationDescription

language java8

test ImmutableRelationDescription [[ package org.metaborg.meta.nabl2.relations;

import java.io.Serializable;
import java.util.Objects;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;

/**
 * Immutable implementation of {@link RelationDescription}.
 * <p>
 * Use the static factory method to create immutable instances:
 * {@code ImmutableRelationDescription.of()}.
 */
@SuppressWarnings({"all"})
@ParametersAreNonnullByDefault
@Generated({"Immutables.generator", "RelationDescription"})
@Immutable
public final class ImmutableRelationDescription
    extends RelationDescription
    implements Serializable {
  private final RelationDescription.Reflexivity reflexivity;
  private final RelationDescription.Symmetry symmetry;
  private final RelationDescription.Transitivity transitivity;
  private final int hashCode;

  private ImmutableRelationDescription(
      RelationDescription.Reflexivity reflexivity,
      RelationDescription.Symmetry symmetry,
      RelationDescription.Transitivity transitivity) {
    this.reflexivity = Objects.requireNonNull(reflexivity, "reflexivity");
    this.symmetry = Objects.requireNonNull(symmetry, "symmetry");
    this.transitivity = Objects.requireNonNull(transitivity, "transitivity");
    this.hashCode = computeHashCode();
  }

  private ImmutableRelationDescription(
      ImmutableRelationDescription original,
      RelationDescription.Reflexivity reflexivity,
      RelationDescription.Symmetry symmetry,
      RelationDescription.Transitivity transitivity) {
    this.reflexivity = reflexivity;
    this.symmetry = symmetry;
    this.transitivity = transitivity;
    this.hashCode = computeHashCode();
  }

  /**
   * @return The value of the {@code reflexivity} attribute
   */
  @Override
  public RelationDescription.Reflexivity getReflexivity() {
    return reflexivity;
  }

  /**
   * @return The value of the {@code symmetry} attribute
   */
  @Override
  public RelationDescription.Symmetry getSymmetry() {
    return symmetry;
  }

  /**
   * @return The value of the {@code transitivity} attribute
   */
  @Override
  public RelationDescription.Transitivity getTransitivity() {
    return transitivity;
  }

  /**
   * Copy the current immutable object by setting a value for the {@link RelationDescription#getReflexivity() reflexivity} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for reflexivity
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableRelationDescription setReflexivity(RelationDescription.Reflexivity value) {
    if (this.reflexivity == value) return this;
    RelationDescription.Reflexivity newValue = Objects.requireNonNull(value, "reflexivity");
    return new ImmutableRelationDescription(this, newValue, this.symmetry, this.transitivity);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link RelationDescription#getSymmetry() symmetry} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for symmetry
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableRelationDescription setSymmetry(RelationDescription.Symmetry value) {
    if (this.symmetry == value) return this;
    RelationDescription.Symmetry newValue = Objects.requireNonNull(value, "symmetry");
    return new ImmutableRelationDescription(this, this.reflexivity, newValue, this.transitivity);
  }

  /**
   * Copy the current immutable object by setting a value for the {@link RelationDescription#getTransitivity() transitivity} attribute.
   * A shallow reference equality check is used to prevent copying of the same value by returning {@code this}.
   * @param value A new value for transitivity
   * @return A modified copy of the {@code this} object
   */
  public final ImmutableRelationDescription setTransitivity(RelationDescription.Transitivity value) {
    if (this.transitivity == value) return this;
    RelationDescription.Transitivity newValue = Objects.requireNonNull(value, "transitivity");
    return new ImmutableRelationDescription(this, this.reflexivity, this.symmetry, newValue);
  }

  /**
   * This instance is equal to all instances of {@code ImmutableRelationDescription} that have equal attribute values.
   * @return {@code true} if {@code this} is equal to {@code another} instance
   */
  @Override
  public boolean equals(@Nullable Object another) {
    if (this == another) return true;
    return another instanceof ImmutableRelationDescription
        && equalTo((ImmutableRelationDescription) another);
  }

  private boolean equalTo(ImmutableRelationDescription another) {
    return reflexivity.equals(another.reflexivity)
        && symmetry.equals(another.symmetry)
        && transitivity.equals(another.transitivity);
  }

  /**
   * Returns a precomputed-on-construction hash code from attributes: {@code reflexivity}, {@code symmetry}, {@code transitivity}.
   * @return hashCode value
   */
  @Override
  public int hashCode() {
    return hashCode;
  }

  private int computeHashCode() {
    int h = 31;
    h = h * 17 + reflexivity.hashCode();
    h = h * 17 + symmetry.hashCode();
    h = h * 17 + transitivity.hashCode();
    return h;
  }

  /**
   * Prints the immutable value {@code RelationDescription} with attribute values.
   * @return A string representation of the value
   */
  @Override
  public String toString() {
    return "RelationDescription{"
        + "reflexivity=" + reflexivity
        + ", symmetry=" + symmetry
        + ", transitivity=" + transitivity
        + "}";
  }

  /**
   * Construct a new immutable {@code RelationDescription} instance.
   * @param reflexivity The value for the {@code reflexivity} attribute
   * @param symmetry The value for the {@code symmetry} attribute
   * @param transitivity The value for the {@code transitivity} attribute
   * @return An immutable RelationDescription instance
   */
  public static ImmutableRelationDescription of(RelationDescription.Reflexivity reflexivity, RelationDescription.Symmetry symmetry, RelationDescription.Transitivity transitivity) {
    return new ImmutableRelationDescription(reflexivity, symmetry, transitivity);
  }

  /**
   * Creates an immutable copy of a {@link RelationDescription} value.
   * Uses accessors to get values to initialize the new immutable instance.
   * If an instance is already immutable, it is returned as is.
   * @param instance The instance to copy
   * @return A copied immutable RelationDescription instance
   */
  public static ImmutableRelationDescription copyOf(RelationDescription instance) {
    if (instance instanceof ImmutableRelationDescription) {
      return (ImmutableRelationDescription) instance;
    }
    return ImmutableRelationDescription.of(instance.getReflexivity(), instance.getSymmetry(), instance.getTransitivity());
  }

  private static final long serialVersionUID = 42L;
} ]] parse succeeds
