module java/packages/ImportDeclarations

imports

  signatures/syntax/java/packages/ImportDeclarations-sig

  java/names/ExpressionNames
  java/names/Main
  java/names/MethodNames
  java/names/PackageOrTypeNames
  java/names/TypeNames
  java/packages/Main
  java/types/Main
  java/types/ReferenceTypes


rules // 7.5. Import Declarations

  importDeclOk : scope * ImportDeclaration * scope
  importDeclListOk maps importDeclOk(*, list(*), *)

  importDeclOk(s, SingleTypeImport(typeName), s_imp) :-
  {typeDecl s_imp'}
    typeDecl == typeNameOk(s, typeName),
    new s_imp',
    s_imp -SINGLE_TYPE_IMPORT-> s_imp',
    aliasType(s_imp', typeDecl).


  importDeclOk(s, TypeImportOnDemand(pkgOrTypeName), s_imp) :-
  {pkgOrTypeDecl s_pkgOrType}
    pkgOrTypeDecl == pkgOrTypeNameOk(s, pkgOrTypeName),
    s_pkgOrType == pkgOrTypeDeclScope(pkgOrTypeDecl),
    s_imp -TYPE_IMPORT_ONDEMAND-> s_pkgOrType.


  importDeclOk(s, SingleStaticImport(typeName, id), s_imp) :-
  {s_ty s_imp' types mthds vars}
    s_ty == typeDeclScope(typeNameOk(s, typeName)),
    new s_imp',
    s_imp -SINGLE_STATIC_IMPORT-> s_imp',

    types == resolveAllStaticMemberTypeNames(s_ty, id),
    importStaticTypeList(id, types, s_imp'),

    mthds == resolveAllStaticMemberMthdNames(s_ty, id),
    importStaticMthdList(id, mthds, s_imp'),

    vars == resolveAllStaticMemberExprNames(s_ty, id),
    importStaticExprList(id, vars, s_imp'),

    importStaticNotEmpty(id, types, mthds, vars).

      importStaticType : Id * TYPE_PATH * scope
      importStaticTypeList maps importStaticType(*, list(*), *)
      importStaticType(id, (_, typeDecl@(id', _)), s_imp) :- aliasType(s_imp, typeDecl),
        @id.ref := id'.

      importStaticMthd : Id * MTHD_PATH * scope
      importStaticMthdList maps importStaticMthd(*, list(*), *)
      importStaticMthd(id, (_, mthdDecl@(id', _, _)), s_imp) :- aliasMthdName(s_imp, mthdDecl),
        @id.ref := id'.

      importStaticExpr : Id * VAR_PATH * scope
      importStaticExprList maps importStaticExpr(*, list(*), *)
      importStaticExpr(id, (_, varDecl@(id', _)), s_imp) :- aliasExprName(s_imp, varDecl),
        @id.ref := id'.

      importStaticNotEmpty : Id * list(TYPE_PATH) * list(MTHD_PATH) * list(VAR_PATH)
      importStaticNotEmpty(id, [], [], []) :- false | error $[Cannot resolve static type/method/expression [id].].
      importStaticNotEmpty(_, _, _, _).

  importDeclOk(s, StaticImportOnDemand(typeName), s_imp) :-
  {s_ty}
    s_ty == typeDeclScope(typeNameOk(s, typeName)),
    s_imp -STATIC_IMPORT_ONDEMAND-> s_ty.

