module java/names/PackageOrTypeNames

imports

  signatures/syntax/java/names/Names-sig

  java/names/Main
  java/names/PackageNames
  java/names/TypeNames
  java/types/Main


// 6.5.4 Meaning of PackageOrTypeNames

signature

  sorts PKG_OR_TYPE_DECL constructors
    PKG_DECL  : PKG_DECL  -> PKG_OR_TYPE_DECL
    TYPE_DECL : TYPE_DECL -> PKG_OR_TYPE_DECL

rules

  pkgOrTypeNameOk : scope * PackageOrTypeName -> PKG_OR_TYPE_DECL

  pkgOrTypeNameOk(s, pkgOrTypeName) = resolvePkgOrTypeName(s, pkgOrTypeNameOk1(pkgOrTypeName)).

      pkgOrTypeNameOk1 : PackageOrTypeName -> QID

      pkgOrTypeNameOk1(PackageOrTypeName(id)) = ID(id).

      pkgOrTypeNameOk1(QPackageOrTypeName(pkgOrTypeName, id)) = QID(pkgOrTypeNameOk1(pkgOrTypeName), id).


  resolvePkgOrTypeName : scope * QID -> PKG_OR_TYPE_DECL

  resolvePkgOrTypeName(s, ID(id)) = pkgOrTypeDecl :-
    pkgOrTypeDecl == resolveLexicalPkgOrTypeName(s, id).

  resolvePkgOrTypeName(s, QID(qid, id)) = pkgOrTypeDecl :-
  {s_pkgOrType}
    s_pkgOrType == pkgOrTypeDeclScope(resolvePkgOrTypeName(s, qid)),
    pkgOrTypeDecl == resolveMemberPkgOrTypeName(s_pkgOrType, id).


  pkgOrTypeDeclScope : PKG_OR_TYPE_DECL -> scope

  pkgOrTypeDeclScope(PKG_DECL(pkgDecl)) = pkgDeclScope(pkgDecl).

  pkgOrTypeDeclScope(TYPE_DECL(typeDecl)) = typeDeclScope(typeDecl).


  resolveLexicalPkgOrTypeName : scope * Id -> PKG_OR_TYPE_DECL

  resolveLexicalPkgOrTypeName(s, id) = resolveLexicalPkgOrTypeName1(s, id, resolveLexicalTypeNames(s, id)).

      resolveLexicalPkgOrTypeName1 : scope * Id * list(TYPE_PATH) -> PKG_OR_TYPE_DECL
      resolveLexicalPkgOrTypeName2 : scope * Id * list(PKG_PATH) -> PKG_OR_TYPE_DECL

      resolveLexicalPkgOrTypeName1(s, id, []) = resolveLexicalPkgOrTypeName2(s, id, resolveLexicalPkgNames(s, id)).

      resolveLexicalPkgOrTypeName1(s, id, typePathList) = TYPE_DECL(typeDecl) :-
        typeDecl == singleTypeDecl(id, typePathList).

      resolveLexicalPkgOrTypeName2(s, id, []) = _ :-
        false | error $[Type or package [id] not found].

      resolveLexicalPkgOrTypeName2(s, id, pkgPathList) = PKG_DECL(pkgDecl) :-
        pkgDecl == singlePkgDecl(id, pkgPathList).


  resolveMemberPkgOrTypeName : scope * Id -> PKG_OR_TYPE_DECL

  resolveMemberPkgOrTypeName(s, id) = resolveMemberPkgOrTypeName1(s, id, resolveMemberTypeNames(s, id)).

      resolveMemberPkgOrTypeName1 : scope * Id * list(TYPE_PATH) -> PKG_OR_TYPE_DECL
      resolveMemberPkgOrTypeName2 : scope * Id * list(PKG_PATH) -> PKG_OR_TYPE_DECL

      resolveMemberPkgOrTypeName1(s, id, []) = resolveMemberPkgOrTypeName2(s, id, resolveMemberPkgNames(s, id)).

      resolveMemberPkgOrTypeName1(s, id, typePathList) = TYPE_DECL(typeDecl) :-
        typeDecl == singleTypeDecl(id, typePathList).

      resolveMemberPkgOrTypeName2(s, id, []) = _ :-
        false | error $[Type or package [id] not found].

      resolveMemberPkgOrTypeName2(s, id, pkgPathList) = PKG_DECL(pkgDecl) :-
        pkgDecl == singlePkgDecl(id, pkgPathList).

