module java/classes/FieldDeclarations

imports

  signatures/syntax/java/classes/FieldDeclarations-sig

  java/arrays/ArrayInitializers
  java/classes/Main
  java/expressions/Main
  java/interfaces/Annotations
  java/names/ExpressionNames
  java/names/Main
  java/names/TypeNames
  java/names/PackageOrTypeNames
  java/types/Main
  java/types/Conversions
  java/types/ParameterizedTypes
  java/types/PrimitiveTypes
  java/types/ReferenceTypes
  java/types/Subtyping
  java/util/Boolean


rules // 8.3. Field Declarations

  fldDeclOk : scope * FieldDeclaration * scope * scope

  fldDeclOk(s, FieldDecl(fldModList, unannType, varDeclList), s_def, s_staticDef) :-
  {isStatic s' T}
    fldModListOk(s, fldModList),
    isStatic == hasStaticFldMod(fldModList),

    new s',
    addLexical(s', isStatic, s),

    T == unannTypeOk(s', unannType),
    varDeclListOk2(s', T, varDeclList, s_def, s_staticDef, isStatic).


  varDeclIdOk : scope * TYPE * VarDeclId * scope

  varDeclIdOk(s, T, VariableDecl(id), s_def) :-
    declareExprName(s_def, id, T).

  varDeclIdOk(s, T, VariableDeclArray(id, annDimList), s_def) :-
  {U}
    U == annDimListOk(s, T, annDimList),
    declareExprName(s_def, id, U).


  varDeclListOk2 : scope * TYPE * list(VarDecl) * scope * scope * B

  varDeclListOk2(s, T, varDeclList, s_def, s_staticDef, F()) :-
    varDeclListOk(s, T, varDeclList, s_def).

  varDeclListOk2(s, T, varDeclList, s_def, s_staticDef, T()) :-
    varDeclListOk(s, T, varDeclList, s_staticDef).


  varDeclOk : scope * TYPE * VarDecl * scope
  varDeclListOk maps varDeclOk(*, *, list(*), *)

  varDeclOk(s, T, VariableDeclInit(varDeclId, varInit), s_def) :-
    varDeclIdOk(s, T, varDeclId, s_def),
    varInitOk(s, T, varInit).

  varDeclOk(s, T, VarDeclId2VarDecl(varDeclId), s_def) :-
    varDeclIdOk(s, T, varDeclId, s_def).


  varInitOk : scope * TYPE * VariableInitializer
  varInitListOk maps varInitOk(*, *, list(*))

  varInitOk(s, T, Expression2VariableInitializer(expr)) :-
  {T'}
    T' == exprOk(s, expr),
    assignCompatible(s, T, T').

  varInitOk(s, T, ArrayInitializer2VariableInitializer(arrayInit)) :-
    arrayInitOk(s, T, arrayInit).


  fldModOk : scope * FieldModifier
  fldModListOk maps fldModOk(*, list(*))

  fldModOk(s, Annotation2FieldModifier(anno)) :-
    annoOk(s, anno),
    true.
  fldModOk(s, Public2FieldModifier(_)) :- true.
  fldModOk(s, Protected2FieldModifier(_)) :- true.
  fldModOk(s, Private2FieldModifier(_)) :- true.
  fldModOk(s, Static2FieldModifier(_)) :- true.
  fldModOk(s, Final2FieldModifier(_)) :- true.
  fldModOk(s, Transient2FieldModifier(_)) :- true.
  fldModOk(s, Volatile2FieldModifier(_)) :- true.


  hasStaticFldMod : list(FieldModifier) -> B

  hasStaticFldMod([Static2FieldModifier(_)|_]) = T().
  hasStaticFldMod([_|fldModList]) = hasStaticFldMod(fldModList).
  hasStaticFldMod([]) = F().


  unannTypeOk : scope * UnannType -> TYPE

  unannTypeOk(s, UnannPrimitiveType2UnannType(unannPrimType)) = unannPrimTypeOk(unannPrimType).

  unannTypeOk(s, UnannReferenceType2UnannType(unannRefType)) = unannRefTypeOk(s, unannRefType).


  unannPrimTypeOk : UnannPrimitiveType -> TYPE

  unannPrimTypeOk(UnannNumericType(numType)) = numTypeOk(numType).

  unannPrimTypeOk(UnannBooleanType()) = BOOLEAN().


  unannRefTypeOk : scope * UnannReferenceType -> TYPE

  unannRefTypeOk(s, UnannClassType2UnannReferenceType(unannClsType)) = unannClsTypeOk(s, unannClsType).

  unannRefTypeOk(s, UnannArrayType2UnannReferenceType(unannArrayType)) = unannArrayTypeOk(s, unannArrayType).


  unannClsTypeOk : scope * UnannClassType -> TYPE

  unannClsTypeOk(s, UnannClassType(id, typeArgsOpt)) = typeDeclType(typeDecl) :-
    typeDecl == singleTypeDecl(id, resolveLexicalTypeNames(s, id)),
    _ == typeArgsOptOk(s, typeArgsOpt),
    true.

  unannClsTypeOk(s, UnannClassOrInterfaceTypeMember(unannClsType, annoList, id, typeArgsOpt)) = typeDeclType(typeDecl) :-
  {s_pkgOrCls}
    s_pkgOrCls == unannPkgOrClsTypeOk(s, unannClsType),
    annoListOk(s, annoList),
    typeDecl == singleTypeDecl(id, resolveMemberTypeNames(s_pkgOrCls, id)),
    _ == typeArgsOptOk(s, typeArgsOpt),
    true.


  unannPkgOrClsTypeOk : scope * UnannClassType -> scope

  unannPkgOrClsTypeOk(s, UnannClassType(id, typeArgsOpt)) = s_pkgOrCls :-
  {pkgOrTypeDecl}
    pkgOrTypeDecl == resolveLexicalPkgOrTypeName(s, id),
    s_pkgOrCls == pkgOrTypeDeclScope(pkgOrTypeDecl),
    _ == typeArgsOptOk(s, typeArgsOpt),
    true.

  unannPkgOrClsTypeOk(s, UnannClassOrInterfaceTypeMember(unannClsType, annoList, id, typeArgsOpt)) = s_pkgOrCls :-
  {pkgOrTypeDecl s_pkgOrCls'}
    s_pkgOrCls' == unannPkgOrClsTypeOk(s, unannClsType),
    annoListOk(s, annoList),
    pkgOrTypeDecl == resolveMemberPkgOrTypeName(s_pkgOrCls', id),
    s_pkgOrCls == pkgOrTypeDeclScope(pkgOrTypeDecl),
    _ == typeArgsOptOk(s, typeArgsOpt),
    true.


  unannArrayTypeOk : scope * UnannArrayType -> TYPE

  unannArrayTypeOk(s, UnannArrayTypePrimitive(unannPrimType, annDimList)) = T :-
  {S}
    S == unannPrimTypeOk(unannPrimType),
    T == annDimListOk(s, S, annDimList).

  unannArrayTypeOk(s, UnannArrayTypeClassType(unannClsType, annDimList)) = T :-
  {S}
    S == unannClsTypeOk(s, unannClsType),
    T == annDimListOk(s, S, annDimList).


