module java/expressions/ClassInstanceCreation

imports

  signatures/syntax/java/expressions/ClassInstanceCreation-sig

  java/JRE
  java/classes/ClassDeclarations
  java/expressions/Main
  java/interfaces/Annotations
  java/names/Main
  java/names/MethodNames
  java/names/TypeNames
  java/names/PackageOrTypeNames
  java/types/ParameterizedTypes
  java/types/ReferenceTypes


rules // 15.9. Class Instance Creation Expressions

  exprOk(s, UnqualifiedInstance2Expression(unqualInst)) = T :-
    T == unqualInstOk(s, unqualInst).

  exprOk(s, QualifiedInstance(expr, unqualInst)) = T' :-
  {T}
    T == exprOk(s, expr),
    T' == qualInstOk(s, T, unqualInst),
    true.


  unqualInstOk : scope * UnqualifiedInstance -> TYPE

  unqualInstOk(s, NewInstance(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList)) =
    unqualInstOk(s, NewInstanceWithInitializer(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList, [])).

  unqualInstOk(s, NewInstanceWithInitializer(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList, clsBodyDeclList)) = REF(s_inst) :-
  {qid U Ts s_instStatic S M}
    _ == typeArgsOptOk(s, typeArgsOpt),
    annoListOk(s, annoList),
    qid == qualIdListOk(s, id, qualIdList),
    U == typeDeclType(resolveTypeName_(s, qid)),
    typeArgsOrDiamondOptOk(s, typeArgsOrDiamondOpt),
    Ts == exprListOk(s, exprList),

    new s_inst, s_inst -LEX-> s,
    initTypeScope(s_inst, Id("$local$"), CLASS()),

    S == setSuperClsOrImplementIntf(s_inst, U),
    M == resolveDirectMemberMthdName(typeScope(S), Id("<init>"), Ts),

    ctorRefOk(qid, M),

    new s_instStatic,
    s_inst -STATIC_MEMBERS-> s_instStatic,

    clsBodyDeclListOk(s_inst, clsBodyDeclList, s_inst, s_instStatic).


  qualInstOk : scope * TYPE * UnqualifiedInstance -> TYPE

  qualInstOk(s, T, NewInstance(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList)) =
    qualInstOk(s, T, NewInstanceWithInitializer(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList, [])).

  qualInstOk(s, T, NewInstanceWithInitializer(typeArgsOpt, annoList, id, qualIdList, typeArgsOrDiamondOpt, exprList, clsBodyDeclList)) = REF(s_inst) :-
  {s_ty U Ts s_instStatic S M}
    _ == typeArgsOptOk(s, typeArgsOpt),
    annoListOk(s, annoList),
    s_ty == typeScope(T),
    U == typeDeclType(singleTypeDecl_(id, resolveMemberTypeNames(s_ty, id))),
    typeArgsOrDiamondOptOk(s, typeArgsOrDiamondOpt),
    Ts == exprListOk(s, exprList),

    new s_inst, s_inst -LEX-> s,
    initTypeScope(s_inst, Id("$local$"), CLASS()),

    S == setSuperClsOrImplementIntf(s_inst, U),
    M == resolveDirectMemberMthdName(typeScope(S), Id("<init>"), Ts),

    ctorRefOk(ID(id), M),

    new s_instStatic,
    s_inst -STATIC_MEMBERS-> s_instStatic,

    clsBodyDeclListOk(s_inst, clsBodyDeclList, s_inst, s_instStatic).


  qualIdListOk : scope * Id * list(QualifiedId) -> QID
    qualIdListOk1 : scope * QID * list(QualifiedId) -> QID

  qualIdListOk(s, id, qualIdList) = qualIdListOk1(s, ID(id), qualIdList).

    qualIdListOk1(s, qid, []) = qid.

    qualIdListOk1(s, qid, [QualifiedId(annoList, id)|qualIdList]) = qualIdListOk1(s, QID(qid, id), qualIdList) :-
      annoListOk(s, annoList).

  ctorRefOk: QID * MTHD_DECL
  ctorRefOk(QID(_, id), (_, ref, _, _)) :- @id.ref := ref.
  ctorRefOk(ID(id), (_, ref, _, _)) :- @id.ref := ref.

  typeArgsOrDiamondOptOk : scope * TypeArgumentsOrDiamond-OPT
  typeArgsOrDiamondOptOk(s, NoTypeArgumentsOrDiamond()).
  typeArgsOrDiamondOptOk(s, SomeTypeArgumentsOrDiamond(typeArgsOrDiamond)) :- typeArgsOrDiamondOk(s, typeArgsOrDiamond).

  typeArgsOrDiamondOk : scope * TypeArgumentsOrDiamond

  typeArgsOrDiamondOk(s, TypeArguments2TypeArgumentsOrDiamond(typeArgs)) :-
    _ == typeArgsOk(s, typeArgs).

  typeArgsOrDiamondOk(s, Diamond()) :-
    true.


  setSuperClsOrImplementIntf : scope * TYPE -> TYPE // return super type for constructor resolution

  setSuperClsOrImplementIntf(s_cls, T) = U :-
    U == setSuperClsOrImplementIntf1(s_cls, typeKind(T), T).

      setSuperClsOrImplementIntf1 : scope * KIND * TYPE -> TYPE

      setSuperClsOrImplementIntf1(s_cls, CLASS(), T) = T :-
        setSuperCls(s_cls, T).

      setSuperClsOrImplementIntf1(s_cls, INTF(), T) = S :-
        S == objectOk(s_cls),
        setSuperCls(s_cls, S),
        addSuperIntf(s_cls, T).


