module refret/oracle/class-types

imports

  strategolib
  statix/runtime/-
  statix/api

imports

  signatures/syntax/java/lexical/-
  signatures/syntax/java/names/-
  signatures/syntax/java/types/-
  signatures/syntax/java/interfaces/-

  refret/-

rules // classes and packages

  qualify-class-reference(|Id, string, blob) :: ? -> List(ClassType * ?)
  qualify-class-reference(|tgt, sortName, a): t@ClassType(ann*, x, tp*) -> prop*
    with ref-idx    := <stx--get-ast-index> x
       ; s-tgt      := <scope-prop(|a)> tgt
       ; s-tgt'     := <type-scope(|a)> (x, s-tgt)
       ; p-cls*     := <reconstruct-static-qualifiers(|a)> (x, s-tgt')
       ; q-cls      := <map(mk-qualified-class-type(|ann*, tp*)); make-set> p-cls*
	   ; prop*      := <map(!(<id>, ref-idx))> q-cls

  // Make qualified class reference names

  mk-qualified-class-type(|List(Annotation), TypeArguments-OPT) :: QName -> ClassType
  mk-qualified-class-type(|ann*, tp*): QName([x]) -> ClassType(ann*, x, tp*)

  mk-qualified-class-type(|ann*, tp*): QName(xs) -> ClassOrInterfaceTypeMember(q, ann*, x, tp*)
    with (x*, x) := <split-init-last> xs
       ; q       := <foldl'(mk-top-level-pkg-name, mk-nested-pkg-name)> x*


  mk-top-level-pkg-name = !ClassType([], <id>, NoTypeArguments())
  mk-nested-pkg-name: (x, q) -> ClassOrInterfaceTypeMember(q, [], x, NoTypeArguments())
