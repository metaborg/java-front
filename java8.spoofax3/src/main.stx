module main

imports

  java/Main
  java/names/Main
  java/names/PackageNames
  java/names/TypeNames
  java/packages/CompilationUnits
  java/packages/PackageDeclarations
  java/classes/ClassDeclarations
  java/classes/ConstructorDeclarations
  java/names/MethodNames
  java/types/PrimitiveTypes
  java/types/ReferenceTypes
  java/JRE

  signatures/start-sig
  signatures/syntax/java/Test-sig

rules

  projectOk : scope

  projectOk(s_proj) :-
    true.


  groupOk : scope * string * scope

  groupOk(s_parent, id, s_pkg) :-
    s_pkg -PARENT_PKG-> s_parent,
    declarePkg(s_parent, Id(id), s_pkg),
    true.


  fileOk : scope * Start

  fileOk(s_pkg, CompilationUnit2Start(compilationUnit)) :-
    startOk(s_pkg, compilationUnit).

  startOk : scope * CompilationUnit

  startOk(s_pkg, compilationUnit@CompilationUnit(_, _, _)) :-
    compilationUnitOk(rootScope(s_pkg), s_pkg, compilationUnit).

  startOk(s_pkg, Test(testUnitList)) :-
  {s_test s_anonPkg}
    // isolate tests from the regular global scope
    new s_test, s_test -LEX-> rootScope(s_pkg),

    new s_anonPkg, groupOk(s_test, "(unnamed)", s_anonPkg),

    testUnitListOk(s_test, s_anonPkg, testUnitList).


  testUnitOk : scope * scope * TestUnit
  testUnitListOk maps testUnitOk(*, *, list(*))

  testUnitOk(s_parent, s_pkg, TestPkg(id, testUnitList)) :-
  {s_subPkg}
    new s_subPkg, groupOk(s_parent, id, s_subPkg),
    testUnitListOk(s_subPkg, s_subPkg, testUnitList).

  testUnitOk(s_parent, s_pkg, TestFile(_, compilationUnit)) :-
    startOk(s_pkg, compilationUnit).

rules // alternative initial constraint for reference retention

  programOk: Start

  programOk(ast) :- {s s_pkg_java s_pkg_lang s_obj s_objStatic}
    new s,

    // "java" package
    new s_pkg_java,
    s_pkg_java -PARENT_PKG-> s,
    declarePkg(s, Id("java"), s_pkg_java),

    // "lang" package
    new s_pkg_lang,
    s_pkg_lang -PARENT_PKG-> s_pkg_java,
    declarePkg(s_pkg_java, Id("lang"), s_pkg_lang),

    // "Object" class
    new s_obj s_objStatic,
    s_obj -STATIC_MEMBERS-> s_objStatic,
    declareType2(s_pkg_lang, s_pkg_lang, F(), Id("Object"), s_obj, CLASS()),
    declareMthdName(s_obj, Id("<init>"), ARGS([]), TYPED(REF(s_obj))),

    // equals method

    declareMthdName(s_obj, Id("equals"), ARGS([REF(s_obj)]), TYPED(BOOLEAN())),
    declareMthdName(s_obj, Id("hashCode"), ARGS([]), TYPED(INT())),

    // type-check as regular file
    fileOk(s, ast).

rules

  rootScope : scope -> scope

  rootScope(s) = s_root :-
    query () filter PARENT_PKG* min PARENT_PKG < $ and true in s |-> [(_, s_root)].
