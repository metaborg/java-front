module main

imports

  java/Main
  java/names/Main
  java/names/PackageNames
  java/names/TypeNames
  java/packages/CompilationUnits
  java/packages/PackageDeclarations
  java/classes/ClassDeclarations
  java/classes/ConstructorDeclarations
  java/names/MethodNames
  java/types/PrimitiveTypes
  java/types/ReferenceTypes
  java/JRE

  signatures/start-sig
  signatures/syntax/java/Test-sig

  refret

rules

  projectOk : scope

  projectOk(s_proj) :-
    true.


  groupOk : scope * string * scope

  groupOk(s_parent, id, s_pkg) :-
    s_pkg -PARENT_PKG-> s_parent,
    declarePkg(s_parent, Id(id), s_pkg),
    true.


  fileOk : scope * Start

  fileOk(s_pkg, CompilationUnit2Start(compilationUnit)) :-
    startOk(s_pkg, compilationUnit).

  startOk : scope * CompilationUnit

  startOk(s_pkg, compilationUnit@CompilationUnit(_, _, _)) :-
    compilationUnitOk(rootScope(s_pkg), s_pkg, compilationUnit).

  startOk(s_pkg, Test(testUnitList)) :-
  {s_test s_anonPkg}
    // isolate tests from the regular global scope
    new s_test, s_test -LEX-> rootScope(s_pkg),

    new s_anonPkg, groupOk(s_test, "(unnamed)", s_anonPkg),

    testUnitListOk(s_test, s_anonPkg, testUnitList).


  testUnitOk : scope * scope * TestUnit
  testUnitListOk maps testUnitOk(*, *, list(*))

  testUnitOk(s_parent, s_pkg, TestPkg(id, testUnitList)) :-
  {s_subPkg}
    new s_subPkg, groupOk(s_parent, id, s_subPkg),
    testUnitListOk(s_subPkg, s_subPkg, testUnitList).

  testUnitOk(s_parent, s_pkg, TestFile(_, compilationUnit)) :-
    startOk(s_pkg, compilationUnit).

rules // alternative initial constraint for reference retention

  programOk: Start

  programOk(ast) :- {s
  		s_java
  		s_java_lang
  		s_java_lang_Object s_java_lang_Object_static
  		s_java_lang_String s_java_lang_String_static
  		s_java_lang_Iterable s_java_lang_Iterable_static
  		s_java_lang_System s_java_lang_System_static
  		s_java_util
  		s_java_util_NoSuchElementException s_java_util_NoSuchElementException_static
  		s_java_io
  		s_java_io_PrintStream s_java_io_PrintStream_static
	}
    new s,

    // package java
    new s_java,
    s_java -PARENT_PKG-> s,
    declarePkg(s, Id("java"), s_java),


    // package java.lang
    new s_java_lang,
    s_java_lang -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("lang"), s_java_lang),

    // class java.lang.Object
    new s_java_lang_Object s_java_lang_Object_static,
    s_java_lang_Object -STATIC_MEMBERS-> s_java_lang_Object_static,
    declareType2(s_java_lang, s_java_lang, F(), Id("Object"), s_java_lang_Object, CLASS()),
    // constructor()
    declareMthdName(s_java_lang_Object, Id("<init>"), ARGS([]), TYPED(REF(s_java_lang_Object))),
    // boolean equals(Object)
    declareMthdName(s_java_lang_Object, Id("equals"), ARGS([REF(s_java_lang_Object)]), TYPED(BOOLEAN())),
    // int hashCode()
    declareMthdName(s_java_lang_Object, Id("hashCode"), ARGS([]), TYPED(INT())),

    // class java.lang.String
    new s_java_lang_String s_java_lang_String_static,
    s_java_lang_String -STATIC_MEMBERS-> s_java_lang_String_static,
    declareType2(s_java_lang, s_java_lang, F(), Id("String"), s_java_lang_String, CLASS()),

    // interface java.lang.Iterable
    new s_java_lang_Iterable s_java_lang_Iterable_static,
    s_java_lang_Iterable -STATIC_MEMBERS-> s_java_lang_Iterable_static,
    declareType2(s_java_lang, s_java_lang, F(), Id("Iterable"), s_java_lang_Iterable, INTF()),

    // class java.lang.System
    new s_java_lang_System s_java_lang_System_static,
    s_java_lang_System -STATIC_MEMBERS-> s_java_lang_System_static,
    declareType2(s_java_lang, s_java_lang, F(), Id("System"), s_java_lang_System, CLASS()),
    // static PrintStream out
	//declareExprName(s_java_lang_System, Id("out"), REF(s_java_io_PrintStream)),

    // package java.io
    new s_java_io,
    s_java_io -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("io"), s_java_io),

    // class java.io.PrintStream
    new s_java_io_PrintStream s_java_io_PrintStream_static,
    s_java_io_PrintStream -STATIC_MEMBERS-> s_java_io_PrintStream_static,
    declareType2(s_java_io, s_java_io, F(), Id("PrintStream"), s_java_io_PrintStream, CLASS()),
    // void println(String)
    declareMthdName(s_java_io_PrintStream, Id("println"), ARGS([REF(s_java_lang_String)]), VOID()),
    // void println(int)
    declareMthdName(s_java_io_PrintStream, Id("println"), ARGS([INT()]), VOID()),


    // "java.util" package
    new s_java_util,
    s_java_util -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("util"), s_java_util),

    // class java.util.NoSuchElementException
    new s_java_util_NoSuchElementException s_java_util_NoSuchElementException_static,
    s_java_util_NoSuchElementException -STATIC_MEMBERS-> s_java_util_NoSuchElementException_static,
    declareType2(s_java_util, s_java_util, F(), Id("NoSuchElementException"), s_java_util_NoSuchElementException, CLASS()),
    declareMthdName(s_java_util_NoSuchElementException, Id("<init>"), ARGS([REF(s_java_lang_String)]), TYPED(REF(s_java_util_NoSuchElementException))),


    // type-check as regular file
    fileOk(s, ast).

rules

  rootScope : scope -> scope

  rootScope(s) = s_root :-
    query () filter PARENT_PKG* min PARENT_PKG < $ and true in s |-> [(_, s_root)].
