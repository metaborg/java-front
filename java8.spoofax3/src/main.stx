module main

imports

  java/Main
  java/names/Main
  java/names/PackageNames
  java/names/TypeNames
  java/packages/CompilationUnits
  java/packages/PackageDeclarations
  java/classes/ClassDeclarations
  java/classes/ConstructorDeclarations
  java/names/MethodNames
  java/types/PrimitiveTypes
  java/types/ReferenceTypes
  java/names/ExpressionNames
  java/JRE

  signatures/start-sig
  signatures/syntax/java/Test-sig

  refret

rules

  projectOk : scope

  projectOk(s_proj) :-
    true.


  groupOk : scope * string * scope

  groupOk(s_parent, id, s_pkg) :-
    s_pkg -PARENT_PKG-> s_parent,
    declarePkg(s_parent, Id(id), s_pkg),
    true.


  fileOk : scope * Start

  fileOk(s_pkg, CompilationUnit2Start(compilationUnit)) :-
    startOk(s_pkg, compilationUnit).

  startOk : scope * CompilationUnit

  startOk(s_pkg, compilationUnit@CompilationUnit(_, _, _)) :-
    compilationUnitOk(rootScope(s_pkg), s_pkg, compilationUnit).

  startOk(s_pkg, Test(testUnitList)) :-
  {s_test s_anonPkg}
    // isolate tests from the regular global scope
    new s_test, s_test -LEX-> rootScope(s_pkg),

    new s_anonPkg, groupOk(s_test, "(unnamed)", s_anonPkg),

    testUnitListOk(s_test, s_anonPkg, testUnitList).


  testUnitOk : scope * scope * TestUnit
  testUnitListOk maps testUnitOk(*, *, list(*))

  testUnitOk(s_parent, s_pkg, TestPkg(id, testUnitList)) :-
  {s_subPkg}
    new s_subPkg, groupOk(s_parent, id, s_subPkg),
    testUnitListOk(s_subPkg, s_subPkg, testUnitList).

  testUnitOk(s_parent, s_pkg, TestFile(_, compilationUnit)) :-
    startOk(s_pkg, compilationUnit).

rules // alternative initial constraint for reference retention

  programOk: Start

  programOk(ast) :- {s
      s_java
      s_java_lang
      s_java_lang_Object s_java_lang_Object_static
      s_java_lang_Integer s_java_lang_Integer_static
      s_java_lang_String s_java_lang_String_static
      s_java_lang_Iterable s_java_lang_Iterable_static
      s_java_lang_Runnable s_java_lang_Runnable_static
      s_java_lang_System s_java_lang_System_static
      s_java_lang_Override s_java_lang_Override_static
      s_java_lang_Throwable s_java_lang_Throwable_static
      s_java_lang_Math s_java_lang_Math_static
      s_java_util
      s_java_util_List s_java_util_List_static
      s_java_util_Collection s_java_util_Collection_static
      s_java_util_LinkedHashSet s_java_util_LinkedHashSet_static
      s_java_util_ArrayList s_java_util_ArrayList_static
      s_java_util_NoSuchElementException s_java_util_NoSuchElementException_static
      s_java_util_stream
      s_java_util_stream_Stream s_java_util_stream_Stream_static
      s_java_util_function
      s_java_util_function_Predicate s_java_util_function_Predicate_static
      s_java_util_function_Consumer s_java_util_function_Consumer_static
      s_java_io
      s_java_io_PrintStream s_java_io_PrintStream_static
      s_java_math
      s_java_math_BigDecimal s_java_math_BigDecimal_static
  }
    new s,

    // package java
    new s_java,
    s_java -PARENT_PKG-> s,
    declarePkg(s, Id("java"), s_java),


    // package java.lang
    new s_java_lang,
    s_java_lang -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("lang"), s_java_lang),

    // class java.lang.Object
    new s_java_lang_Object s_java_lang_Object_static,
    s_java_lang_Object -STATIC_MEMBERS-> s_java_lang_Object_static,
    s_java_lang_Object -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("Object"), s_java_lang_Object, CLASS()),
    // constructor()
    declareMthdName(s_java_lang_Object, Id("<init>"), ARGS([]), TYPED(REF(s_java_lang_Object))),
    // boolean equals(Object)
    declareMthdName(s_java_lang_Object, Id("equals"), ARGS([REF(s_java_lang_Object)]), TYPED(BOOLEAN())),
    // int hashCode()
    declareMthdName(s_java_lang_Object, Id("hashCode"), ARGS([]), TYPED(INT())),

    // class java.lang.Integer
    new s_java_lang_Integer s_java_lang_Integer_static,
    s_java_lang_Integer -STATIC_MEMBERS-> s_java_lang_Integer_static,
    declareType2(s_java_lang, s_java_lang, F(), Id("Integer"), s_java_lang_Integer, CLASS()),
    // constructor(int)
    declareMthdName(s_java_lang_Integer, Id("<init>"), ARGS([INT()]), TYPED(REF(s_java_lang_Integer))),

    // class java.lang.String
    new s_java_lang_String s_java_lang_String_static,
    s_java_lang_String -STATIC_MEMBERS-> s_java_lang_String_static,
    s_java_lang_String -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("String"), s_java_lang_String, CLASS()),
    !typeName["java/lang/String"] in s_java_lang_String,

    // interface java.lang.Iterable
    new s_java_lang_Iterable s_java_lang_Iterable_static,
    s_java_lang_Iterable -STATIC_MEMBERS-> s_java_lang_Iterable_static,
    s_java_lang_Iterable -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("Iterable"), s_java_lang_Iterable, INTF()),
    !typeName["java/lang/Iterable"] in s_java_lang_Iterable,

    // class java.lang.Runnable
    new s_java_lang_Runnable s_java_lang_Runnable_static,
    s_java_lang_Runnable -STATIC_MEMBERS-> s_java_lang_Runnable_static,
    s_java_lang_Runnable -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("Runnable"), s_java_lang_Runnable, CLASS()),
    // constructor()
    declareMthdName(s_java_lang_Runnable, Id("<init>"), ARGS([]), TYPED(REF(s_java_lang_Runnable))),
    // void run()
    declareMthdName(s_java_lang_Runnable, Id("run"), ARGS([]), VOID()),

    // class java.lang.System
    new s_java_lang_System s_java_lang_System_static,
    s_java_lang_System -STATIC_MEMBERS-> s_java_lang_System_static,
    s_java_lang_System -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("System"), s_java_lang_System, CLASS()),
    // static PrintStream out
    declareExprName(s_java_lang_System_static, Id("out"), REF(s_java_io_PrintStream)),

    // class java.lang.Override
    new s_java_lang_Override s_java_lang_Override_static,
    s_java_lang_Override -STATIC_MEMBERS-> s_java_lang_Override_static,
    s_java_lang_Override -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("Override"), s_java_lang_Override, CLASS()),

    // class java.lang.Throwable
    new s_java_lang_Throwable s_java_lang_Throwable_static,
    s_java_lang_Throwable -STATIC_MEMBERS-> s_java_lang_Throwable_static,
    s_java_lang_Throwable -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("Throwable"), s_java_lang_Throwable, CLASS()),
    !typeName["java/lang/Throwable"] in s_java_lang_Throwable,

    // class java.lang.Math
    new s_java_lang_Math s_java_lang_Math_static,
    s_java_lang_Math -STATIC_MEMBERS-> s_java_lang_Math_static,
    s_java_lang_Math -IMPORT_PKG-> s_java_lang,
    declareType2(s_java_lang, s_java_lang, F(), Id("Math"), s_java_lang_Math, CLASS()),
    // int random()
    declareMthdName(s_java_lang_Math, Id("random"), ARGS([]), TYPED(INT())),


    // package java.io
    new s_java_io,
    s_java_io -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("io"), s_java_io),

    // class java.io.PrintStream
    new s_java_io_PrintStream s_java_io_PrintStream_static,
    s_java_io_PrintStream -STATIC_MEMBERS-> s_java_io_PrintStream_static,
    s_java_io_PrintStream -IMPORT_PKG-> s_java_io,
    declareType2(s_java_io, s_java_io, F(), Id("PrintStream"), s_java_io_PrintStream, CLASS()),
    // void println(Object)
    declareMthdName(s_java_io_PrintStream, Id("println"), ARGS([REF(s_java_lang_Object)]), VOID()),
    // void println(String)
    declareMthdName(s_java_io_PrintStream, Id("println"), ARGS([REF(s_java_lang_String)]), VOID()),
    // void println(int)
    declareMthdName(s_java_io_PrintStream, Id("println"), ARGS([INT()]), VOID()),


    // package java.util
    new s_java_util,
    s_java_util -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("util"), s_java_util),

    // class java.util.List
    new s_java_util_List s_java_util_List_static,
    s_java_util_List -STATIC_MEMBERS-> s_java_util_List_static,
    s_java_util_List -IMPORT_PKG-> s_java_util,
    declareType2(s_java_util, s_java_util, F(), Id("List"), s_java_util_List, CLASS()),

    // class java.util.Collection
    new s_java_util_Collection s_java_util_Collection_static,
    s_java_util_Collection -STATIC_MEMBERS-> s_java_util_Collection_static,
    s_java_util_Collection -IMPORT_PKG-> s_java_util,
    declareType2(s_java_util, s_java_util, F(), Id("Collection"), s_java_util_Collection, CLASS()),

    // class java.util.LinkedHashSet
    new s_java_util_LinkedHashSet s_java_util_LinkedHashSet_static,
    s_java_util_LinkedHashSet -STATIC_MEMBERS-> s_java_util_LinkedHashSet_static,
    s_java_util_LinkedHashSet -IMPORT_PKG-> s_java_util,
    declareType2(s_java_util, s_java_util, F(), Id("LinkedHashSet"), s_java_util_LinkedHashSet, CLASS()),

    // class java.util.ArrayList
    new s_java_util_ArrayList s_java_util_ArrayList_static,
    s_java_util_ArrayList -STATIC_MEMBERS-> s_java_util_ArrayList_static,
    s_java_util_ArrayList -IMPORT_PKG-> s_java_util,
    declareType2(s_java_util, s_java_util, F(), Id("ArrayList"), s_java_util_ArrayList, CLASS()),
    declareMthdName(s_java_util_ArrayList, Id("<init>"), ARGS([INT()]), TYPED(REF(s_java_util_ArrayList))),

    // class java.util.NoSuchElementException
    new s_java_util_NoSuchElementException s_java_util_NoSuchElementException_static,
    s_java_util_NoSuchElementException -STATIC_MEMBERS-> s_java_util_NoSuchElementException_static,
    s_java_util_NoSuchElementException -IMPORT_PKG-> s_java_util,
    s_java_util_NoSuchElementException -EXTENDS-> s_java_lang_Throwable, // Ignore Exception for now
    declareType2(s_java_util, s_java_util, F(), Id("NoSuchElementException"), s_java_util_NoSuchElementException, CLASS()),
    declareMthdName(s_java_util_NoSuchElementException, Id("<init>"), ARGS([REF(s_java_lang_String)]), TYPED(REF(s_java_util_NoSuchElementException))),


    // package java.util.stream
    new s_java_util_stream,
    s_java_util_stream -PARENT_PKG-> s_java_util,
    declarePkg(s_java_util, Id("stream"), s_java_util_stream),

    // class java.util.stream.Stream
    new s_java_util_stream_Stream s_java_util_stream_Stream_static,
    s_java_util_stream_Stream -STATIC_MEMBERS-> s_java_util_stream_Stream_static,
    s_java_util_stream_Stream -IMPORT_PKG-> s_java_util_stream,
    declareType2(s_java_util_stream, s_java_util_stream, F(), Id("Stream"), s_java_util_stream_Stream, CLASS()),


    // package java.util.function
    new s_java_util_function,
    s_java_util_function -PARENT_PKG-> s_java_util,
    declarePkg(s_java_util, Id("function"), s_java_util_function),

    // class java.util.function.Consumer
    new s_java_util_function_Consumer s_java_util_function_Consumer_static,
    s_java_util_function_Consumer -STATIC_MEMBERS-> s_java_util_function_Consumer_static,
    s_java_util_function_Consumer -IMPORT_PKG-> s_java_util_function,
    declareType2(s_java_util_function, s_java_util_function, F(), Id("Consumer"), s_java_util_function_Consumer, CLASS()),

    // class java.util.function.Consumer
    new s_java_util_function_Predicate s_java_util_function_Predicate_static,
    s_java_util_function_Predicate -STATIC_MEMBERS-> s_java_util_function_Predicate_static,
    s_java_util_function_Predicate -IMPORT_PKG-> s_java_util_function,
    declareType2(s_java_util_function, s_java_util_function, F(), Id("Predicate"), s_java_util_function_Predicate, CLASS()),


    // package java.math
    new s_java_math,
    s_java_math -PARENT_PKG-> s_java,
    declarePkg(s_java, Id("math"), s_java_math),

    // class java.math.BigDecimal
    new s_java_math_BigDecimal s_java_math_BigDecimal_static,
    s_java_math_BigDecimal -STATIC_MEMBERS-> s_java_math_BigDecimal_static,
    s_java_math_BigDecimal -IMPORT_PKG-> s_java_math,
    declareType2(s_java_math, s_java_math, F(), Id("BigDecimal"), s_java_math_BigDecimal, CLASS()),
    // constructor()
    declareMthdName(s_java_math_BigDecimal, Id("<init>"), ARGS([INT()]), TYPED(REF(s_java_math_BigDecimal))),


    // type-check as regular file
    fileOk(s, ast).

rules

  rootScope : scope -> scope

  rootScope(s) = s_root :-
    query () filter PARENT_PKG* min PARENT_PKG < $ and true in s |-> [(_, s_root)].
