module statics/java/classes/EnumDeclarations

imports

  signatures/syntax/java/classes/EnumDeclarations-sig

  statics/java/JRE
  statics/java/classes/ClassDeclarations
  statics/java/classes/ConstructorDeclarations
  statics/java/classes/InstanceInitializers
  statics/java/classes/Main
  statics/java/classes/MethodDeclarations
  statics/java/classes/StaticInitializers
  statics/java/expressions/Main
  statics/java/interfaces/Annotations
  statics/java/names/Main
  statics/java/names/ExpressionNames
  statics/java/names/MethodNames
  statics/java/names/TypeNames
  statics/java/statements/Blocks
  statics/java/types/ReferenceTypes


rules // 8.9. Enum Types

  enumDeclOk : scope * EnumDeclaration * scope

  enumDeclOk(s, EnumDeclComma(clsModList, id, superIntfsOpt, enumConstList, enumBodyDeclsOpt), s_staticDef) :-
    enumDeclOk(s, EnumDecl(clsModList, id, superIntfsOpt, enumConstList, enumBodyDeclsOpt), s_staticDef).

  enumDeclOk(s, EnumDecl(clsModList, id, superIntfsOpt, enumConstList, enumBodyDeclsOpt), s_staticDef) :-
  {s_enum s_enumStatic}
    clsModListOk(s, clsModList),

    new s_enum,
    s_enum -STATIC_LEX-> s,

    declareType(s_staticDef, id, s_enum, CLASS()),

    setSuperCls(s_enum, enumOk(s)),
    superIntfsOptOk(s, superIntfsOpt, s_enum),

    new s_enumStatic,
    s_enum -STATIC_MEMBERS-> s_enumStatic,
    enumPredefinedMethods(s, REF(s_enum), s_enumStatic),

    enumConstListOk(s_enum, REF(s_enum), enumConstList, s_enumStatic),

    enumBodyDeclsOptOk(s_enum, enumBodyDeclsOpt, s_enum, s_enumStatic). // FIXME what is allowed here in enums?


  enumPredefinedMethods : scope * TYPE * scope

  enumPredefinedMethods(s, T, s_staticDef) :-
    declareMthdName(s_staticDef, Id("values"), ARGS([]), TYPED(makeArrayType(s, T))),
    declareMthdName(s_staticDef, Id("valueOf"), ARGS([stringOk(s)]), TYPED(T)).


  enumConstOk : scope * TYPE * EnumConstant * scope
  enumConstListOk maps enumConstOk(*, *, list(*), *)

  enumConstOk(s, T, EnumConst(annoList, id, enumConstArgsOpt, clsBodyDeclList), s_staticDef) :-
  {s_const s_constStatic}
    annoListOk(s, annoList),

    declareExprName(s_staticDef, id, T),

    enumConstArgsOptOk(s, enumConstArgsOpt),

    new s_const,
    s_const -STATIC_LEX-> s,

    initTypeScope(s_const, id, CLASS()),

    setSuperCls(s_const, T),

    new s_constStatic,
    s_const -STATIC_MEMBERS-> s_constStatic,

    clsBodyDeclListOk(s_const, clsBodyDeclList, s_const, s_constStatic). // FIXME what is allowed here in enums?

  enumConstOk(s, T, EnumConstNoBody(annoList, id, enumConstArgsOpt), s_staticDef) :-
    enumConstOk(s, T, EnumConst(annoList, id, enumConstArgsOpt, []), s_staticDef).


  enumConstArgsOptOk : scope * EnumConstantArgs-OPT

  enumConstArgsOptOk(s, NoEnumConstantArgs()) :-
    _ == resolveDirectMemberMthdName(s, Id("<init>"), []).

  enumConstArgsOptOk(s, SomeEnumConstantArgs(EnumConstArgs(exprList))) :-
  {Ts}
    Ts == exprListOk(s, exprList),
    _ == resolveDirectMemberMthdName(s, Id("<init>"), Ts).


  enumBodyDeclsOptOk : scope * EnumBodyDeclarations-OPT * scope * scope

  enumBodyDeclsOptOk(s, NoEnumBodyDeclarations(), s_def, s_staticDef) :-
    declareImplicitEnumCtor(s).

  enumBodyDeclsOptOk(s, SomeEnumBodyDeclarations(enumBodyDecls), s_def, s_staticDef) :-
    enumBodyDeclsOk(s, enumBodyDecls, s_def, s_staticDef).


  enumBodyDeclsOk : scope * EnumBodyDeclarations * scope * scope

  enumBodyDeclsOk(s, EnumBodyDecs(clsBodyDeclList), s_def, s_staticDef) :-
    declareImplicitEnumCtorIfMissing(s_def, clsBodyDeclList),
    enumBodyDeclListOk(s, clsBodyDeclList, s_def, s_staticDef).


  enumBodyDeclOk : scope * ClassBodyDeclaration * scope * scope
  enumBodyDeclListOk maps enumBodyDeclOk(*, list(*), *, *)

  enumBodyDeclOk(s, ClassMemberDeclaration2ClassBodyDeclaration(clsMemDecl), s_def, s_staticDef) :-
    clsMemDeclOk(s, clsMemDecl, s_def, s_staticDef),
    true.

  enumBodyDeclOk(s, InstanceInitializer2ClassBodyDeclaration(instInit), s_def, s_staticDef) :-
    instInitOk(s, instInit),
    true.

  enumBodyDeclOk(s, StaticInitializer2ClassBodyDeclaration(staticInit), s_def, s_staticDef) :-
    staticInitOk(s, staticInit),
    true.

  enumBodyDeclOk(s, ConstructorDeclaration2ClassBodyDeclaration(ctorDecl), s_def, s_staticDef) :-
    enumCtorDeclOk(s, ctorDecl, s_def),
    true.


  declareImplicitEnumCtorIfMissing : scope * list(ClassBodyDeclaration)

  declareImplicitEnumCtorIfMissing(s, [ConstructorDeclaration2ClassBodyDeclaration(_)|_]).

  declareImplicitEnumCtorIfMissing(s, [_|clsBodyDecls]) :-
    declareImplicitEnumCtorIfMissing(s, clsBodyDecls).

  declareImplicitEnumCtorIfMissing(s, []) :-
    declareImplicitEnumCtor(s).


  // copy of declareImplicitCtor without super constructor lookup (which is not nullary for java.lang.Enum)
  declareImplicitEnumCtor : scope

  declareImplicitEnumCtor(s) :-
    declareMthdName(s, Id("<init>"), ARGS([]), TYPED(typeDeclType(this(s)))).


  // copy of ctorDeclOk with different logic for super constructor invocation
  enumCtorDeclOk : scope * ConstructorDeclaration * scope

  enumCtorDeclOk(s, ConstrDecl(ctorModList, typeParamsOpt, id, formalParams, throwsOpt, ctorInvOpt, blkStmtList), s_def) :-
  {s_ctorHead s_ctorBody Ts R}
    ctorModListOk(s, ctorModList),

    new s_ctorHead,
    s_ctorHead -LEX-> s,

    typeParamsOptOk(s_ctorHead, typeParamsOpt),
    ctorIdOk(s, id),
    Ts == formalParamsOk(s_ctorHead, formalParams, s_ctorHead),
    R == TYPED(typeDeclType(this(s))),
    declareMthdName(s_def, Id("<init>"), Ts, R),
    throwsOptOk(s_ctorHead, throwsOpt),

    new s_ctorBody,
    s_ctorBody -LEX-> s_ctorHead,

    enumCtorInvOptOk(s_ctorBody, ctorInvOpt),
    blkStmtListOk(s_ctorBody, blkStmtList).


  enumCtorInvOptOk : scope * ConstructorInvocation-OPT

  enumCtorInvOptOk(s, NoConstructorInvocation()).
  enumCtorInvOptOk(s, SomeConstructorInvocation(ctorInv)) :- enumCtorInvOk(s, ctorInv).


  enumCtorInvOk : scope * ConstructorInvocation

  enumCtorInvOk(s, ctorInv@AltConstrInv(_, _)) :-
    ctorInvOk(s, ctorInv).

  enumCtorInvOk(s, SuperConstrInv(typeArgsOpt, exprList)) :-
    false | error "Super constructor invocation not allowed in enum constructor.".

  enumCtorInvOk(s, ExprNameConstrInv(expr, typeArgsOpt, exprList)) :-
    false | error "Expression constructor invocation not allowed in enum constructor.".

