module statics/java/expressions/BinaryOperators

imports

  signatures/syntax/java/expressions/BinaryOperators-sig

  statics/java/expressions/Main
  statics/java/types/Conversions
  statics/java/types/Main
  statics/java/types/PrimitiveTypes
  statics/java/types/ReferenceTypes
  statics/java/types/Subtyping
  statics/java/JRE


rules // 15.17. Multiplicative Operators
      // 15.18. Additive Operators
      // 15.19. Shift Operators
      // 15.20. Relational Operators
      // 15.21. Equality Operators
      // 15.22. Bitwise and Logical Operators
      // 15.23. Conditional-And Operator &&
      // 15.24. Conditional-Or Operator ||

  exprOk(s, Mul(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, Div(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, Mod(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, Add(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteAddition(s, T, U).

  exprOk(s, Sub(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, LeftShift(expr1, expr2)) = S :-
  {T}
    S == promoteNumericUnary(exprOk(s, expr1)),
    T == promoteNumericUnary(exprOk(s, expr2)),
    isIntegral(S),
    isIntegral(T).

  exprOk(s, RightShift(expr1, expr2)) = S :-
  {T}
    S == promoteNumericUnary(exprOk(s, expr1)),
    T == promoteNumericUnary(exprOk(s, expr2)),
    isIntegral(T),
    isIntegral(S).

  exprOk(s, URightShift(expr1, expr2)) = S :-
  {T S'}
    S == promoteNumericUnary(exprOk(s, expr1)),
    T == promoteNumericUnary(exprOk(s, expr2)),
    isIntegral(T),
    isIntegral(S).

  exprOk(s, Lt(expr1, expr2)) = BOOLEAN() :-
  {S T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, Gt(expr1, expr2)) = BOOLEAN() :-
  {S T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, LtEq(expr1, expr2)) = BOOLEAN() :-
  {S T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, GtEq(expr1, expr2)) = BOOLEAN() :-
  {S T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteNumericBinary(T, U).

  exprOk(s, InstanceOf(expr, refType)) = BOOLEAN() :-
  {T U}
    T == exprOk(s, expr),
    U == refTypeOk(s, refType),
    castCompatible(U, T).

  exprOk(s, Eq(expr1, expr2)) = BOOLEAN() :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    equalsCompatible(T, U).

  exprOk(s, NotEq(expr1, expr2)) = BOOLEAN() :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    equalsCompatible(T, U).

  exprOk(s, And(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteBooleanOrNumericBinary(T, U).

  exprOk(s, Xor(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteBooleanOrNumericBinary(T, U).

  exprOk(s, Or(expr1, expr2)) = S :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    S == promoteBooleanOrNumericBinary(T, U).

  exprOk(s, LazyAnd(expr1, expr2)) = BOOLEAN() :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    conditionCompatible(T),
    conditionCompatible(U).

  exprOk(s, LazyOr(expr1, expr2)) = BOOLEAN() :-
  {T U}
    T == exprOk(s, expr1),
    U == exprOk(s, expr2),
    conditionCompatible(T),
    conditionCompatible(U).

  exprOk(s, Cond(expr_cond, expr_then, expr_else)) = S :-
  {T U1 U2}
    T == exprOk(s, expr_cond),
    U1 == exprOk(s, expr_then),
    U2 == exprOk(s, expr_else),
    conditionCompatible(T),
    S == condType(U1, U2).

