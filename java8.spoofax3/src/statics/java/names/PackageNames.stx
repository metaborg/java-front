module statics/java/names/PackageNames

imports

  signatures/syntax/java/names/Names-sig

  statics/java/names/Main
  statics/java/types/Main


// 6.5.3 Meaning of Module Names and Package Names

signature

  sorts
    PKG_DECL   = (Id * scope)
    PKG_PATH   = (path * (Id * scope))

  relations
    pkg     : Id -> scope
    thisPkg : Id -> scope


rules

  pkgNameOk : scope * PackageName -> PKG_DECL

  pkgNameOk(s, PackageName(id)) = resolvePkgName(scope, pkgNameOk1(pkgName)).

      pkgNameOk1 : PackageName -> QID

      pkgNameOk1(PackageName(id)) = ID(id).

      pkgNameOk1(QPackageName(pkgName, id)) = QID(pkgNameOk1(pkgName), id).


  pkgDeclId : PKG_DECL -> Id

  pkgDeclId((id, _)) = id.


  pkgDeclScope : PKG_DECL -> scope

  pkgDeclScope((_, s_pkg)) = s_pkg.


  resolvePkgName : scope * QID -> PKG_DECL

  resolvePkgName(s, ID(id)) = pkgDecl :-
    pkgDecl == singlePkgDecl(id, resolveLexicalPkgNames(s, id)).

  resolvePkgName(s, QID(qid, id)) = pkgDecl :-
  {s_pkg}
    s_pkg == pkgDeclScope(resolvePkgName(s, qid)),
    pkgDecl == singlePkgDecl(id, resolveMemberPkgNames(s_pkg, id)).


  resolveLexicalPkgNames : scope * Id -> list(PKG_PATH)

  resolveLexicalPkgNames(s, id) = pkgPathList :-
    query pkg
      filter /* lex pkg re */
          (LEX|STATIC_LEX)*
        and { id' :- id' == id }
      min /* pkg ord */
          $ < LEX, $ < STATIC_LEX
        and true
      in s |-> pkgPathList,
    true.


  resolveMemberPkgNames : scope * Id -> list(PKG_PATH)

  resolveMemberPkgNames(s, id) = pkgPathList :-
    query pkg
      filter /* mem pkg re */
          e
        and { id' :- id' == id }
      in s |-> pkgPathList,
    true.


  singlePkgDecl : Id * list(PKG_PATH) -> PKG_DECL

  singlePkgDecl(id, []) = _ :-
    false | error $[Package [id] not found] @id.

  singlePkgDecl(id, [(_, pkgDecl@(id', _))]) = pkgDecl :-
    @id.ref := id'.

  singlePkgDecl(id, pkgDeclList) = _ :-
    false | error $[Package [id] is ambiguous] @id.


//  composePkgDecl : Id * list(PKG_PATH) -> PKG_DECL
//
//  composePkgDecl(id, pkgPathList) = (id, s_pkg) :-
//    new s_pkg,
//    composePkgPathList(id, s_pkg, pkgPathList),
//    true.


//  composePkgPath : Id * scope * PKG_PATH
//  composePkgPathList maps composePkgPath(*, *, list(*))
//
//  composePkgPath(_, s_pkg, (_, (_, s_pkg))).
//
//  composePkgPath(id, s_pkg, (_, (id', s_pkg'))) :-
//    s_pkg -PKGC-> s_pkg',
//    true.


  declarePkg : scope * Id * scope

  declarePkg(s, id, s_pkg) :-
    !pkg[id, s_pkg] in s,
    !thisPkg[id, s_pkg] in s_pkg.


  thisPkg : scope -> PKG_DECL

  thisPkg(s) = pkgDecl :-
    query thisPkg
      filter (LEX|STATIC_LEX)* IMPORT_PKG
        and true
      min $ < LEX, $ < STATIC_LEX
        and true
      in s |-> [(_, pkgDecl)].


  superPkg : PKG_DECL -> PKG_DECL

  superPkg(pkgDecl) = pkgDecl' :-
  {s_pkg}
    s_pkg == pkgDeclScope(pkgDecl),
    query thisPkg
      filter PARENT_PKG and true
      min /* */ and true
      in s_pkg |-> [(_, pkgDecl')].


  noHomonymousPkg: scope * Id

  noHomonymousPkg(s, id) :-
    query pkg
      filter e and { id' :- id' == id }
      in s |-> [].

